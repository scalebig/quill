/*!
 * Quill Editor v2.0.0-dev.3
 * https://quilljs.com/
 * Copyright (c) 2014, Jason Chen
 * Copyright (c) 2013, salesforce.com
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["Quill"] = factory();
	else
		root["Quill"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 41);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var deep_equal_1 = __importDefault(__webpack_require__(3));
var extend_1 = __importDefault(__webpack_require__(1));
var fast_diff_1 = __importDefault(__webpack_require__(38));
var AttributeMap_1 = __importDefault(__webpack_require__(39));
var Op_1 = __importDefault(__webpack_require__(5));
var NULL_CHARACTER = String.fromCharCode(0); // Placeholder char for embed in diff()
var Delta = /** @class */ (function () {
    function Delta(ops) {
        // Assume we are given a well formed ops
        if (Array.isArray(ops)) {
            this.ops = ops;
        }
        else if (ops != null && Array.isArray(ops.ops)) {
            this.ops = ops.ops;
        }
        else {
            this.ops = [];
        }
    }
    Delta.prototype.insert = function (arg, attributes) {
        var newOp = {};
        if (typeof arg === 'string' && arg.length === 0) {
            return this;
        }
        newOp.insert = arg;
        if (attributes != null &&
            typeof attributes === 'object' &&
            Object.keys(attributes).length > 0) {
            newOp.attributes = attributes;
        }
        return this.push(newOp);
    };
    Delta.prototype.delete = function (length) {
        if (length <= 0) {
            return this;
        }
        return this.push({ delete: length });
    };
    Delta.prototype.retain = function (length, attributes) {
        if (length <= 0) {
            return this;
        }
        var newOp = { retain: length };
        if (attributes != null &&
            typeof attributes === 'object' &&
            Object.keys(attributes).length > 0) {
            newOp.attributes = attributes;
        }
        return this.push(newOp);
    };
    Delta.prototype.push = function (newOp) {
        var index = this.ops.length;
        var lastOp = this.ops[index - 1];
        newOp = extend_1.default(true, {}, newOp);
        if (typeof lastOp === 'object') {
            if (typeof newOp.delete === 'number' &&
                typeof lastOp.delete === 'number') {
                this.ops[index - 1] = { delete: lastOp.delete + newOp.delete };
                return this;
            }
            // Since it does not matter if we insert before or after deleting at the same index,
            // always prefer to insert first
            if (typeof lastOp.delete === 'number' && newOp.insert != null) {
                index -= 1;
                lastOp = this.ops[index - 1];
                if (typeof lastOp !== 'object') {
                    this.ops.unshift(newOp);
                    return this;
                }
            }
            if (deep_equal_1.default(newOp.attributes, lastOp.attributes)) {
                if (typeof newOp.insert === 'string' &&
                    typeof lastOp.insert === 'string') {
                    this.ops[index - 1] = { insert: lastOp.insert + newOp.insert };
                    if (typeof newOp.attributes === 'object') {
                        this.ops[index - 1].attributes = newOp.attributes;
                    }
                    return this;
                }
                else if (typeof newOp.retain === 'number' &&
                    typeof lastOp.retain === 'number') {
                    this.ops[index - 1] = { retain: lastOp.retain + newOp.retain };
                    if (typeof newOp.attributes === 'object') {
                        this.ops[index - 1].attributes = newOp.attributes;
                    }
                    return this;
                }
            }
        }
        if (index === this.ops.length) {
            this.ops.push(newOp);
        }
        else {
            this.ops.splice(index, 0, newOp);
        }
        return this;
    };
    Delta.prototype.chop = function () {
        var lastOp = this.ops[this.ops.length - 1];
        if (lastOp && lastOp.retain && !lastOp.attributes) {
            this.ops.pop();
        }
        return this;
    };
    Delta.prototype.filter = function (predicate) {
        return this.ops.filter(predicate);
    };
    Delta.prototype.forEach = function (predicate) {
        this.ops.forEach(predicate);
    };
    Delta.prototype.map = function (predicate) {
        return this.ops.map(predicate);
    };
    Delta.prototype.partition = function (predicate) {
        var passed = [];
        var failed = [];
        this.forEach(function (op) {
            var target = predicate(op) ? passed : failed;
            target.push(op);
        });
        return [passed, failed];
    };
    Delta.prototype.reduce = function (predicate, initialValue) {
        return this.ops.reduce(predicate, initialValue);
    };
    Delta.prototype.changeLength = function () {
        return this.reduce(function (length, elem) {
            if (elem.insert) {
                return length + Op_1.default.length(elem);
            }
            else if (elem.delete) {
                return length - elem.delete;
            }
            return length;
        }, 0);
    };
    Delta.prototype.length = function () {
        return this.reduce(function (length, elem) {
            return length + Op_1.default.length(elem);
        }, 0);
    };
    Delta.prototype.slice = function (start, end) {
        if (start === void 0) { start = 0; }
        if (end === void 0) { end = Infinity; }
        var ops = [];
        var iter = Op_1.default.iterator(this.ops);
        var index = 0;
        while (index < end && iter.hasNext()) {
            var nextOp = void 0;
            if (index < start) {
                nextOp = iter.next(start - index);
            }
            else {
                nextOp = iter.next(end - index);
                ops.push(nextOp);
            }
            index += Op_1.default.length(nextOp);
        }
        return new Delta(ops);
    };
    Delta.prototype.compose = function (other) {
        var thisIter = Op_1.default.iterator(this.ops);
        var otherIter = Op_1.default.iterator(other.ops);
        var ops = [];
        var firstOther = otherIter.peek();
        if (firstOther != null &&
            typeof firstOther.retain === 'number' &&
            firstOther.attributes == null) {
            var firstLeft = firstOther.retain;
            while (thisIter.peekType() === 'insert' &&
                thisIter.peekLength() <= firstLeft) {
                firstLeft -= thisIter.peekLength();
                ops.push(thisIter.next());
            }
            if (firstOther.retain - firstLeft > 0) {
                otherIter.next(firstOther.retain - firstLeft);
            }
        }
        var delta = new Delta(ops);
        while (thisIter.hasNext() || otherIter.hasNext()) {
            if (otherIter.peekType() === 'insert') {
                delta.push(otherIter.next());
            }
            else if (thisIter.peekType() === 'delete') {
                delta.push(thisIter.next());
            }
            else {
                var length_1 = Math.min(thisIter.peekLength(), otherIter.peekLength());
                var thisOp = thisIter.next(length_1);
                var otherOp = otherIter.next(length_1);
                if (typeof otherOp.retain === 'number') {
                    var newOp = {};
                    if (typeof thisOp.retain === 'number') {
                        newOp.retain = length_1;
                    }
                    else {
                        newOp.insert = thisOp.insert;
                    }
                    // Preserve null when composing with a retain, otherwise remove it for inserts
                    var attributes = AttributeMap_1.default.compose(thisOp.attributes, otherOp.attributes, typeof thisOp.retain === 'number');
                    if (attributes) {
                        newOp.attributes = attributes;
                    }
                    delta.push(newOp);
                    // Optimization if rest of other is just retain
                    if (!otherIter.hasNext() &&
                        deep_equal_1.default(delta.ops[delta.ops.length - 1], newOp)) {
                        var rest = new Delta(thisIter.rest());
                        return delta.concat(rest).chop();
                    }
                    // Other op should be delete, we could be an insert or retain
                    // Insert + delete cancels out
                }
                else if (typeof otherOp.delete === 'number' &&
                    typeof thisOp.retain === 'number') {
                    delta.push(otherOp);
                }
            }
        }
        return delta.chop();
    };
    Delta.prototype.concat = function (other) {
        var delta = new Delta(this.ops.slice());
        if (other.ops.length > 0) {
            delta.push(other.ops[0]);
            delta.ops = delta.ops.concat(other.ops.slice(1));
        }
        return delta;
    };
    Delta.prototype.diff = function (other, cursor) {
        if (this.ops === other.ops) {
            return new Delta();
        }
        var strings = [this, other].map(function (delta) {
            return delta
                .map(function (op) {
                if (op.insert != null) {
                    return typeof op.insert === 'string' ? op.insert : NULL_CHARACTER;
                }
                var prep = delta === other ? 'on' : 'with';
                throw new Error('diff() called ' + prep + ' non-document');
            })
                .join('');
        });
        var retDelta = new Delta();
        var diffResult = fast_diff_1.default(strings[0], strings[1], cursor);
        var thisIter = Op_1.default.iterator(this.ops);
        var otherIter = Op_1.default.iterator(other.ops);
        diffResult.forEach(function (component) {
            var length = component[1].length;
            while (length > 0) {
                var opLength = 0;
                switch (component[0]) {
                    case fast_diff_1.default.INSERT:
                        opLength = Math.min(otherIter.peekLength(), length);
                        retDelta.push(otherIter.next(opLength));
                        break;
                    case fast_diff_1.default.DELETE:
                        opLength = Math.min(length, thisIter.peekLength());
                        thisIter.next(opLength);
                        retDelta.delete(opLength);
                        break;
                    case fast_diff_1.default.EQUAL:
                        opLength = Math.min(thisIter.peekLength(), otherIter.peekLength(), length);
                        var thisOp = thisIter.next(opLength);
                        var otherOp = otherIter.next(opLength);
                        if (deep_equal_1.default(thisOp.insert, otherOp.insert)) {
                            retDelta.retain(opLength, AttributeMap_1.default.diff(thisOp.attributes, otherOp.attributes));
                        }
                        else {
                            retDelta.push(otherOp).delete(opLength);
                        }
                        break;
                }
                length -= opLength;
            }
        });
        return retDelta.chop();
    };
    Delta.prototype.eachLine = function (predicate, newline) {
        if (newline === void 0) { newline = '\n'; }
        var iter = Op_1.default.iterator(this.ops);
        var line = new Delta();
        var i = 0;
        while (iter.hasNext()) {
            if (iter.peekType() !== 'insert') {
                return;
            }
            var thisOp = iter.peek();
            var start = Op_1.default.length(thisOp) - iter.peekLength();
            var index = typeof thisOp.insert === 'string'
                ? thisOp.insert.indexOf(newline, start) - start
                : -1;
            if (index < 0) {
                line.push(iter.next());
            }
            else if (index > 0) {
                line.push(iter.next(index));
            }
            else {
                if (predicate(line, iter.next(1).attributes || {}, i) === false) {
                    return;
                }
                i += 1;
                line = new Delta();
            }
        }
        if (line.length() > 0) {
            predicate(line, {}, i);
        }
    };
    Delta.prototype.transform = function (arg, priority) {
        if (priority === void 0) { priority = false; }
        priority = !!priority;
        if (typeof arg === 'number') {
            return this.transformPosition(arg, priority);
        }
        var other = arg;
        var thisIter = Op_1.default.iterator(this.ops);
        var otherIter = Op_1.default.iterator(other.ops);
        var delta = new Delta();
        while (thisIter.hasNext() || otherIter.hasNext()) {
            if (thisIter.peekType() === 'insert' &&
                (priority || otherIter.peekType() !== 'insert')) {
                delta.retain(Op_1.default.length(thisIter.next()));
            }
            else if (otherIter.peekType() === 'insert') {
                delta.push(otherIter.next());
            }
            else {
                var length_2 = Math.min(thisIter.peekLength(), otherIter.peekLength());
                var thisOp = thisIter.next(length_2);
                var otherOp = otherIter.next(length_2);
                if (thisOp.delete) {
                    // Our delete either makes their delete redundant or removes their retain
                    continue;
                }
                else if (otherOp.delete) {
                    delta.push(otherOp);
                }
                else {
                    // We retain either their retain or insert
                    delta.retain(length_2, AttributeMap_1.default.transform(thisOp.attributes, otherOp.attributes, priority));
                }
            }
        }
        return delta.chop();
    };
    Delta.prototype.transformPosition = function (index, priority) {
        if (priority === void 0) { priority = false; }
        priority = !!priority;
        var thisIter = Op_1.default.iterator(this.ops);
        var offset = 0;
        while (thisIter.hasNext() && offset <= index) {
            var length_3 = thisIter.peekLength();
            var nextType = thisIter.peekType();
            thisIter.next();
            if (nextType === 'delete') {
                index -= Math.min(length_3, index - offset);
                continue;
            }
            else if (nextType === 'insert' && (offset < index || !priority)) {
                index += length_3;
            }
            offset += length_3;
        }
        return index;
    };
    Delta.Op = Op_1.default;
    Delta.AttributeMap = AttributeMap_1.default;
    return Delta;
}());
module.exports = Delta;
//# sourceMappingURL=Delta.js.map

/***/ }),
/* 1 */
/***/ (function(module, exports) {

'use strict';

var hasOwn = Object.prototype.hasOwnProperty;
var toStr = Object.prototype.toString;
var defineProperty = Object.defineProperty;
var gOPD = Object.getOwnPropertyDescriptor;

var isArray = function isArray(arr) {
	if (typeof Array.isArray === 'function') {
		return Array.isArray(arr);
	}

	return toStr.call(arr) === '[object Array]';
};

var isPlainObject = function isPlainObject(obj) {
	if (!obj || toStr.call(obj) !== '[object Object]') {
		return false;
	}

	var hasOwnConstructor = hasOwn.call(obj, 'constructor');
	var hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');
	// Not own constructor property must be Object
	if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {
		return false;
	}

	// Own properties are enumerated firstly, so to speed up,
	// if last one is own, then all properties are own.
	var key;
	for (key in obj) { /**/ }

	return typeof key === 'undefined' || hasOwn.call(obj, key);
};

// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target
var setProperty = function setProperty(target, options) {
	if (defineProperty && options.name === '__proto__') {
		defineProperty(target, options.name, {
			enumerable: true,
			configurable: true,
			value: options.newValue,
			writable: true
		});
	} else {
		target[options.name] = options.newValue;
	}
};

// Return undefined instead of __proto__ if '__proto__' is not an own property
var getProperty = function getProperty(obj, name) {
	if (name === '__proto__') {
		if (!hasOwn.call(obj, name)) {
			return void 0;
		} else if (gOPD) {
			// In early versions of node, obj['__proto__'] is buggy when obj has
			// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.
			return gOPD(obj, name).value;
		}
	}

	return obj[name];
};

module.exports = function extend() {
	var options, name, src, copy, copyIsArray, clone;
	var target = arguments[0];
	var i = 1;
	var length = arguments.length;
	var deep = false;

	// Handle a deep copy situation
	if (typeof target === 'boolean') {
		deep = target;
		target = arguments[1] || {};
		// skip the boolean and the target
		i = 2;
	}
	if (target == null || (typeof target !== 'object' && typeof target !== 'function')) {
		target = {};
	}

	for (; i < length; ++i) {
		options = arguments[i];
		// Only deal with non-null/undefined values
		if (options != null) {
			// Extend the base object
			for (name in options) {
				src = getProperty(target, name);
				copy = getProperty(options, name);

				// Prevent never-ending loop
				if (target !== copy) {
					// Recurse if we're merging plain objects or arrays
					if (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {
						if (copyIsArray) {
							copyIsArray = false;
							clone = src && isArray(src) ? src : [];
						} else {
							clone = src && isPlainObject(src) ? src : {};
						}

						// Never move original objects, clone them
						setProperty(target, { name: name, newValue: extend(deep, clone, copy) });

					// Don't bring in undefined values
					} else if (typeof copy !== 'undefined') {
						setProperty(target, { name: name, newValue: copy });
					}
				}
			}
		}
	}

	// Return the modified object
	return target;
};


/***/ }),
/* 2 */
/***/ (function(module, exports) {

var clone = (function() {
'use strict';

function _instanceof(obj, type) {
  return type != null && obj instanceof type;
}

var nativeMap;
try {
  nativeMap = Map;
} catch(_) {
  // maybe a reference error because no `Map`. Give it a dummy value that no
  // value will ever be an instanceof.
  nativeMap = function() {};
}

var nativeSet;
try {
  nativeSet = Set;
} catch(_) {
  nativeSet = function() {};
}

var nativePromise;
try {
  nativePromise = Promise;
} catch(_) {
  nativePromise = function() {};
}

/**
 * Clones (copies) an Object using deep copying.
 *
 * This function supports circular references by default, but if you are certain
 * there are no circular references in your object, you can save some CPU time
 * by calling clone(obj, false).
 *
 * Caution: if `circular` is false and `parent` contains circular references,
 * your program may enter an infinite loop and crash.
 *
 * @param `parent` - the object to be cloned
 * @param `circular` - set to true if the object to be cloned may contain
 *    circular references. (optional - true by default)
 * @param `depth` - set to a number if the object is only to be cloned to
 *    a particular depth. (optional - defaults to Infinity)
 * @param `prototype` - sets the prototype to be used when cloning an object.
 *    (optional - defaults to parent prototype).
 * @param `includeNonEnumerable` - set to true if the non-enumerable properties
 *    should be cloned as well. Non-enumerable properties on the prototype
 *    chain will be ignored. (optional - false by default)
*/
function clone(parent, circular, depth, prototype, includeNonEnumerable) {
  if (typeof circular === 'object') {
    depth = circular.depth;
    prototype = circular.prototype;
    includeNonEnumerable = circular.includeNonEnumerable;
    circular = circular.circular;
  }
  // maintain two arrays for circular references, where corresponding parents
  // and children have the same index
  var allParents = [];
  var allChildren = [];

  var useBuffer = typeof Buffer != 'undefined';

  if (typeof circular == 'undefined')
    circular = true;

  if (typeof depth == 'undefined')
    depth = Infinity;

  // recurse this function so we don't reset allParents and allChildren
  function _clone(parent, depth) {
    // cloning null always returns null
    if (parent === null)
      return null;

    if (depth === 0)
      return parent;

    var child;
    var proto;
    if (typeof parent != 'object') {
      return parent;
    }

    if (_instanceof(parent, nativeMap)) {
      child = new nativeMap();
    } else if (_instanceof(parent, nativeSet)) {
      child = new nativeSet();
    } else if (_instanceof(parent, nativePromise)) {
      child = new nativePromise(function (resolve, reject) {
        parent.then(function(value) {
          resolve(_clone(value, depth - 1));
        }, function(err) {
          reject(_clone(err, depth - 1));
        });
      });
    } else if (clone.__isArray(parent)) {
      child = [];
    } else if (clone.__isRegExp(parent)) {
      child = new RegExp(parent.source, __getRegExpFlags(parent));
      if (parent.lastIndex) child.lastIndex = parent.lastIndex;
    } else if (clone.__isDate(parent)) {
      child = new Date(parent.getTime());
    } else if (useBuffer && Buffer.isBuffer(parent)) {
      if (Buffer.allocUnsafe) {
        // Node.js >= 4.5.0
        child = Buffer.allocUnsafe(parent.length);
      } else {
        // Older Node.js versions
        child = new Buffer(parent.length);
      }
      parent.copy(child);
      return child;
    } else if (_instanceof(parent, Error)) {
      child = Object.create(parent);
    } else {
      if (typeof prototype == 'undefined') {
        proto = Object.getPrototypeOf(parent);
        child = Object.create(proto);
      }
      else {
        child = Object.create(prototype);
        proto = prototype;
      }
    }

    if (circular) {
      var index = allParents.indexOf(parent);

      if (index != -1) {
        return allChildren[index];
      }
      allParents.push(parent);
      allChildren.push(child);
    }

    if (_instanceof(parent, nativeMap)) {
      parent.forEach(function(value, key) {
        var keyChild = _clone(key, depth - 1);
        var valueChild = _clone(value, depth - 1);
        child.set(keyChild, valueChild);
      });
    }
    if (_instanceof(parent, nativeSet)) {
      parent.forEach(function(value) {
        var entryChild = _clone(value, depth - 1);
        child.add(entryChild);
      });
    }

    for (var i in parent) {
      var attrs;
      if (proto) {
        attrs = Object.getOwnPropertyDescriptor(proto, i);
      }

      if (attrs && attrs.set == null) {
        continue;
      }
      child[i] = _clone(parent[i], depth - 1);
    }

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(parent);
      for (var i = 0; i < symbols.length; i++) {
        // Don't need to worry about cloning a symbol because it is a primitive,
        // like a number or string.
        var symbol = symbols[i];
        var descriptor = Object.getOwnPropertyDescriptor(parent, symbol);
        if (descriptor && !descriptor.enumerable && !includeNonEnumerable) {
          continue;
        }
        child[symbol] = _clone(parent[symbol], depth - 1);
        if (!descriptor.enumerable) {
          Object.defineProperty(child, symbol, {
            enumerable: false
          });
        }
      }
    }

    if (includeNonEnumerable) {
      var allPropertyNames = Object.getOwnPropertyNames(parent);
      for (var i = 0; i < allPropertyNames.length; i++) {
        var propertyName = allPropertyNames[i];
        var descriptor = Object.getOwnPropertyDescriptor(parent, propertyName);
        if (descriptor && descriptor.enumerable) {
          continue;
        }
        child[propertyName] = _clone(parent[propertyName], depth - 1);
        Object.defineProperty(child, propertyName, {
          enumerable: false
        });
      }
    }

    return child;
  }

  return _clone(parent, depth);
}

/**
 * Simple flat clone using prototype, accepts only objects, usefull for property
 * override on FLAT configuration object (no nested props).
 *
 * USE WITH CAUTION! This may not behave as you wish if you do not know how this
 * works.
 */
clone.clonePrototype = function clonePrototype(parent) {
  if (parent === null)
    return null;

  var c = function () {};
  c.prototype = parent;
  return new c();
};

// private utility functions

function __objToStr(o) {
  return Object.prototype.toString.call(o);
}
clone.__objToStr = __objToStr;

function __isDate(o) {
  return typeof o === 'object' && __objToStr(o) === '[object Date]';
}
clone.__isDate = __isDate;

function __isArray(o) {
  return typeof o === 'object' && __objToStr(o) === '[object Array]';
}
clone.__isArray = __isArray;

function __isRegExp(o) {
  return typeof o === 'object' && __objToStr(o) === '[object RegExp]';
}
clone.__isRegExp = __isRegExp;

function __getRegExpFlags(re) {
  var flags = '';
  if (re.global) flags += 'g';
  if (re.ignoreCase) flags += 'i';
  if (re.multiline) flags += 'm';
  return flags;
}
clone.__getRegExpFlags = __getRegExpFlags;

return clone;
})();

if (typeof module === 'object' && module.exports) {
  module.exports = clone;
}


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

var pSlice = Array.prototype.slice;
var objectKeys = __webpack_require__(36);
var isArguments = __webpack_require__(37);

var deepEqual = module.exports = function (actual, expected, opts) {
  if (!opts) opts = {};
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;

  } else if (actual instanceof Date && expected instanceof Date) {
    return actual.getTime() === expected.getTime();

  // 7.3. Other pairs that do not both pass typeof value == 'object',
  // equivalence is determined by ==.
  } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {
    return opts.strict ? actual === expected : actual == expected;

  // 7.4. For all other Object pairs, including Array objects, equivalence is
  // determined by having the same number of owned properties (as verified
  // with Object.prototype.hasOwnProperty.call), the same set of keys
  // (although not necessarily the same order), equivalent values for every
  // corresponding key, and an identical 'prototype' property. Note: this
  // accounts for both named and indexed properties on Arrays.
  } else {
    return objEquiv(actual, expected, opts);
  }
}

function isUndefinedOrNull(value) {
  return value === null || value === undefined;
}

function isBuffer (x) {
  if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;
  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {
    return false;
  }
  if (x.length > 0 && typeof x[0] !== 'number') return false;
  return true;
}

function objEquiv(a, b, opts) {
  var i, key;
  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))
    return false;
  // an identical 'prototype' property.
  if (a.prototype !== b.prototype) return false;
  //~~~I've managed to break Object.keys through screwy arguments passing.
  //   Converting to array solves the problem.
  if (isArguments(a)) {
    if (!isArguments(b)) {
      return false;
    }
    a = pSlice.call(a);
    b = pSlice.call(b);
    return deepEqual(a, b, opts);
  }
  if (isBuffer(a)) {
    if (!isBuffer(b)) {
      return false;
    }
    if (a.length !== b.length) return false;
    for (i = 0; i < a.length; i++) {
      if (a[i] !== b[i]) return false;
    }
    return true;
  }
  try {
    var ka = objectKeys(a),
        kb = objectKeys(b);
  } catch (e) {//happens when one is a string literal and the other isn't
    return false;
  }
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length != kb.length)
    return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] != kb[i])
      return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!deepEqual(a[key], b[key], opts)) return false;
  }
  return typeof a === typeof b;
}


/***/ }),
/* 4 */
/***/ (function(module, exports) {

module.exports = "<svg viewbox=\"0 0 18 18\"> <polyline class=\"ql-even ql-stroke\" points=\"5 7 3 9 5 11\"></polyline> <polyline class=\"ql-even ql-stroke\" points=\"13 7 15 9 13 11\"></polyline> <line class=ql-stroke x1=10 x2=8 y1=5 y2=13></line> </svg>";

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var Iterator_1 = __importDefault(__webpack_require__(40));
var Op;
(function (Op) {
    function iterator(ops) {
        return new Iterator_1.default(ops);
    }
    Op.iterator = iterator;
    function length(op) {
        if (typeof op.delete === 'number') {
            return op.delete;
        }
        else if (typeof op.retain === 'number') {
            return op.retain;
        }
        else {
            return typeof op.insert === 'string' ? op.insert.length : 1;
        }
    }
    Op.length = length;
})(Op || (Op = {}));
exports.default = Op;
//# sourceMappingURL=Op.js.map

/***/ }),
/* 6 */
/***/ (function(module, exports) {

'use strict';

var has = Object.prototype.hasOwnProperty
  , prefix = '~';

/**
 * Constructor to create a storage for our `EE` objects.
 * An `Events` instance is a plain object whose properties are event names.
 *
 * @constructor
 * @private
 */
function Events() {}

//
// We try to not inherit from `Object.prototype`. In some engines creating an
// instance in this way is faster than calling `Object.create(null)` directly.
// If `Object.create(null)` is not supported we prefix the event names with a
// character to make sure that the built-in object properties are not
// overridden or used as an attack vector.
//
if (Object.create) {
  Events.prototype = Object.create(null);

  //
  // This hack is needed because the `__proto__` property is still inherited in
  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
  //
  if (!new Events().__proto__) prefix = false;
}

/**
 * Representation of a single event listener.
 *
 * @param {Function} fn The listener function.
 * @param {*} context The context to invoke the listener with.
 * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
 * @constructor
 * @private
 */
function EE(fn, context, once) {
  this.fn = fn;
  this.context = context;
  this.once = once || false;
}

/**
 * Add a listener for a given event.
 *
 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} context The context to invoke the listener with.
 * @param {Boolean} once Specify if the listener is a one-time listener.
 * @returns {EventEmitter}
 * @private
 */
function addListener(emitter, event, fn, context, once) {
  if (typeof fn !== 'function') {
    throw new TypeError('The listener must be a function');
  }

  var listener = new EE(fn, context || emitter, once)
    , evt = prefix ? prefix + event : event;

  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
  else emitter._events[evt] = [emitter._events[evt], listener];

  return emitter;
}

/**
 * Clear event by name.
 *
 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
 * @param {(String|Symbol)} evt The Event name.
 * @private
 */
function clearEvent(emitter, evt) {
  if (--emitter._eventsCount === 0) emitter._events = new Events();
  else delete emitter._events[evt];
}

/**
 * Minimal `EventEmitter` interface that is molded against the Node.js
 * `EventEmitter` interface.
 *
 * @constructor
 * @public
 */
function EventEmitter() {
  this._events = new Events();
  this._eventsCount = 0;
}

/**
 * Return an array listing the events for which the emitter has registered
 * listeners.
 *
 * @returns {Array}
 * @public
 */
EventEmitter.prototype.eventNames = function eventNames() {
  var names = []
    , events
    , name;

  if (this._eventsCount === 0) return names;

  for (name in (events = this._events)) {
    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
  }

  if (Object.getOwnPropertySymbols) {
    return names.concat(Object.getOwnPropertySymbols(events));
  }

  return names;
};

/**
 * Return the listeners registered for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Array} The registered listeners.
 * @public
 */
EventEmitter.prototype.listeners = function listeners(event) {
  var evt = prefix ? prefix + event : event
    , handlers = this._events[evt];

  if (!handlers) return [];
  if (handlers.fn) return [handlers.fn];

  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
    ee[i] = handlers[i].fn;
  }

  return ee;
};

/**
 * Return the number of listeners listening to a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Number} The number of listeners.
 * @public
 */
EventEmitter.prototype.listenerCount = function listenerCount(event) {
  var evt = prefix ? prefix + event : event
    , listeners = this._events[evt];

  if (!listeners) return 0;
  if (listeners.fn) return 1;
  return listeners.length;
};

/**
 * Calls each of the listeners registered for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Boolean} `true` if the event had listeners, else `false`.
 * @public
 */
EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
  var evt = prefix ? prefix + event : event;

  if (!this._events[evt]) return false;

  var listeners = this._events[evt]
    , len = arguments.length
    , args
    , i;

  if (listeners.fn) {
    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

    switch (len) {
      case 1: return listeners.fn.call(listeners.context), true;
      case 2: return listeners.fn.call(listeners.context, a1), true;
      case 3: return listeners.fn.call(listeners.context, a1, a2), true;
      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
    }

    for (i = 1, args = new Array(len -1); i < len; i++) {
      args[i - 1] = arguments[i];
    }

    listeners.fn.apply(listeners.context, args);
  } else {
    var length = listeners.length
      , j;

    for (i = 0; i < length; i++) {
      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

      switch (len) {
        case 1: listeners[i].fn.call(listeners[i].context); break;
        case 2: listeners[i].fn.call(listeners[i].context, a1); break;
        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;
        default:
          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
            args[j - 1] = arguments[j];
          }

          listeners[i].fn.apply(listeners[i].context, args);
      }
    }
  }

  return true;
};

/**
 * Add a listener for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.on = function on(event, fn, context) {
  return addListener(this, event, fn, context, false);
};

/**
 * Add a one-time listener for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.once = function once(event, fn, context) {
  return addListener(this, event, fn, context, true);
};

/**
 * Remove the listeners of a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn Only remove the listeners that match this function.
 * @param {*} context Only remove the listeners that have this context.
 * @param {Boolean} once Only remove one-time listeners.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
  var evt = prefix ? prefix + event : event;

  if (!this._events[evt]) return this;
  if (!fn) {
    clearEvent(this, evt);
    return this;
  }

  var listeners = this._events[evt];

  if (listeners.fn) {
    if (
      listeners.fn === fn &&
      (!once || listeners.once) &&
      (!context || listeners.context === context)
    ) {
      clearEvent(this, evt);
    }
  } else {
    for (var i = 0, events = [], length = listeners.length; i < length; i++) {
      if (
        listeners[i].fn !== fn ||
        (once && !listeners[i].once) ||
        (context && listeners[i].context !== context)
      ) {
        events.push(listeners[i]);
      }
    }

    //
    // Reset the array, or remove it completely if we have no more listeners.
    //
    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
    else clearEvent(this, evt);
  }

  return this;
};

/**
 * Remove all listeners, or those of the specified event.
 *
 * @param {(String|Symbol)} [event] The event name.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
  var evt;

  if (event) {
    evt = prefix ? prefix + event : event;
    if (this._events[evt]) clearEvent(this, evt);
  } else {
    this._events = new Events();
    this._eventsCount = 0;
  }

  return this;
};

//
// Alias methods names because people roll like that.
//
EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
EventEmitter.prototype.addListener = EventEmitter.prototype.on;

//
// Expose the prefix.
//
EventEmitter.prefixed = prefix;

//
// Allow `EventEmitter` to be imported as module namespace.
//
EventEmitter.EventEmitter = EventEmitter;

//
// Expose the module.
//
if ('undefined' !== typeof module) {
  module.exports = EventEmitter;
}


/***/ }),
/* 7 */
/***/ (function(module, exports) {

module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=3 x2=15 y1=9 y2=9></line> <line class=ql-stroke x1=3 x2=13 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=9 y1=4 y2=4></line> </svg>";

/***/ }),
/* 8 */
/***/ (function(module, exports) {

module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=15 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=14 x2=4 y1=14 y2=14></line> <line class=ql-stroke x1=12 x2=6 y1=4 y2=4></line> </svg>";

/***/ }),
/* 9 */
/***/ (function(module, exports) {

module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=15 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=15 x2=5 y1=14 y2=14></line> <line class=ql-stroke x1=15 x2=9 y1=4 y2=4></line> </svg>";

/***/ }),
/* 10 */
/***/ (function(module, exports) {

module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=15 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=15 x2=3 y1=14 y2=14></line> <line class=ql-stroke x1=15 x2=3 y1=4 y2=4></line> </svg>";

/***/ }),
/* 11 */
/***/ (function(module, exports) {

module.exports = "<svg viewbox=\"0 0 18 18\"> <g class=\"ql-fill ql-color-label\"> <polygon points=\"6 6.868 6 6 5 6 5 7 5.942 7 6 6.868\"></polygon> <rect height=1 width=1 x=4 y=4></rect> <polygon points=\"6.817 5 6 5 6 6 6.38 6 6.817 5\"></polygon> <rect height=1 width=1 x=2 y=6></rect> <rect height=1 width=1 x=3 y=5></rect> <rect height=1 width=1 x=4 y=7></rect> <polygon points=\"4 11.439 4 11 3 11 3 12 3.755 12 4 11.439\"></polygon> <rect height=1 width=1 x=2 y=12></rect> <rect height=1 width=1 x=2 y=9></rect> <rect height=1 width=1 x=2 y=15></rect> <polygon points=\"4.63 10 4 10 4 11 4.192 11 4.63 10\"></polygon> <rect height=1 width=1 x=3 y=8></rect> <path d=M10.832,4.2L11,4.582V4H10.708A1.948,1.948,0,0,1,10.832,4.2Z></path> <path d=M7,4.582L7.168,4.2A1.929,1.929,0,0,1,7.292,4H7V4.582Z></path> <path d=M8,13H7.683l-0.351.8a1.933,1.933,0,0,1-.124.2H8V13Z></path> <rect height=1 width=1 x=12 y=2></rect> <rect height=1 width=1 x=11 y=3></rect> <path d=M9,3H8V3.282A1.985,1.985,0,0,1,9,3Z></path> <rect height=1 width=1 x=2 y=3></rect> <rect height=1 width=1 x=6 y=2></rect> <rect height=1 width=1 x=3 y=2></rect> <rect height=1 width=1 x=5 y=3></rect> <rect height=1 width=1 x=9 y=2></rect> <rect height=1 width=1 x=15 y=14></rect> <polygon points=\"13.447 10.174 13.469 10.225 13.472 10.232 13.808 11 14 11 14 10 13.37 10 13.447 10.174\"></polygon> <rect height=1 width=1 x=13 y=7></rect> <rect height=1 width=1 x=15 y=5></rect> <rect height=1 width=1 x=14 y=6></rect> <rect height=1 width=1 x=15 y=8></rect> <rect height=1 width=1 x=14 y=9></rect> <path d=M3.775,14H3v1H4V14.314A1.97,1.97,0,0,1,3.775,14Z></path> <rect height=1 width=1 x=14 y=3></rect> <polygon points=\"12 6.868 12 6 11.62 6 12 6.868\"></polygon> <rect height=1 width=1 x=15 y=2></rect> <rect height=1 width=1 x=12 y=5></rect> <rect height=1 width=1 x=13 y=4></rect> <polygon points=\"12.933 9 13 9 13 8 12.495 8 12.933 9\"></polygon> <rect height=1 width=1 x=9 y=14></rect> <rect height=1 width=1 x=8 y=15></rect> <path d=M6,14.926V15H7V14.316A1.993,1.993,0,0,1,6,14.926Z></path> <rect height=1 width=1 x=5 y=15></rect> <path d=M10.668,13.8L10.317,13H10v1h0.792A1.947,1.947,0,0,1,10.668,13.8Z></path> <rect height=1 width=1 x=11 y=15></rect> <path d=M14.332,12.2a1.99,1.99,0,0,1,.166.8H15V12H14.245Z></path> <rect height=1 width=1 x=14 y=15></rect> <rect height=1 width=1 x=15 y=11></rect> </g> <polyline class=ql-stroke points=\"5.5 13 9 5 12.5 13\"></polyline> <line class=ql-stroke x1=11.63 x2=6.38 y1=11 y2=11></line> </svg>";

/***/ }),
/* 12 */
/***/ (function(module, exports) {

module.exports = "<svg viewbox=\"0 0 18 18\"> <rect class=\"ql-fill ql-stroke\" height=3 width=3 x=4 y=5></rect> <rect class=\"ql-fill ql-stroke\" height=3 width=3 x=11 y=5></rect> <path class=\"ql-even ql-fill ql-stroke\" d=M7,8c0,4.031-3,5-3,5></path> <path class=\"ql-even ql-fill ql-stroke\" d=M14,8c0,4.031-3,5-3,5></path> </svg>";

/***/ }),
/* 13 */
/***/ (function(module, exports) {

module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-stroke d=M5,4H9.5A2.5,2.5,0,0,1,12,6.5v0A2.5,2.5,0,0,1,9.5,9H5A0,0,0,0,1,5,9V4A0,0,0,0,1,5,4Z></path> <path class=ql-stroke d=M5,9h5.5A2.5,2.5,0,0,1,13,11.5v0A2.5,2.5,0,0,1,10.5,14H5a0,0,0,0,1,0,0V9A0,0,0,0,1,5,9Z></path> </svg>";

/***/ }),
/* 14 */
/***/ (function(module, exports) {

module.exports = "<svg class=\"\" viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=5 x2=13 y1=3 y2=3></line> <line class=ql-stroke x1=6 x2=9.35 y1=12 y2=3></line> <line class=ql-stroke x1=11 x2=15 y1=11 y2=15></line> <line class=ql-stroke x1=15 x2=11 y1=11 y2=15></line> <rect class=ql-fill height=1 rx=0.5 ry=0.5 width=7 x=2 y=14></rect> </svg>";

/***/ }),
/* 15 */
/***/ (function(module, exports) {

module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=\"ql-color-label ql-stroke ql-transparent\" x1=3 x2=15 y1=15 y2=15></line> <polyline class=ql-stroke points=\"5.5 11 9 3 12.5 11\"></polyline> <line class=ql-stroke x1=11.63 x2=6.38 y1=9 y2=9></line> </svg>";

/***/ }),
/* 16 */
/***/ (function(module, exports) {

module.exports = "<svg viewbox=\"0 0 18 18\"> <polygon class=\"ql-stroke ql-fill\" points=\"3 11 5 9 3 7 3 11\"></polygon> <line class=\"ql-stroke ql-fill\" x1=15 x2=11 y1=4 y2=4></line> <path class=ql-fill d=M11,3a3,3,0,0,0,0,6h1V3H11Z></path> <rect class=ql-fill height=11 width=1 x=11 y=4></rect> <rect class=ql-fill height=11 width=1 x=13 y=4></rect> </svg>";

/***/ }),
/* 17 */
/***/ (function(module, exports) {

module.exports = "<svg viewbox=\"0 0 18 18\"> <polygon class=\"ql-stroke ql-fill\" points=\"15 12 13 10 15 8 15 12\"></polygon> <line class=\"ql-stroke ql-fill\" x1=9 x2=5 y1=4 y2=4></line> <path class=ql-fill d=M5,3A3,3,0,0,0,5,9H6V3H5Z></path> <rect class=ql-fill height=11 width=1 x=5 y=4></rect> <rect class=ql-fill height=11 width=1 x=7 y=4></rect> </svg>";

/***/ }),
/* 18 */
/***/ (function(module, exports) {

module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M11.759,2.482a2.561,2.561,0,0,0-3.53.607A7.656,7.656,0,0,0,6.8,6.2C6.109,9.188,5.275,14.677,4.15,14.927a1.545,1.545,0,0,0-1.3-.933A0.922,0.922,0,0,0,2,15.036S1.954,16,4.119,16s3.091-2.691,3.7-5.553c0.177-.826.36-1.726,0.554-2.6L8.775,6.2c0.381-1.421.807-2.521,1.306-2.676a1.014,1.014,0,0,0,1.02.56A0.966,0.966,0,0,0,11.759,2.482Z></path> <rect class=ql-fill height=1.6 rx=0.8 ry=0.8 width=5 x=5.15 y=6.2></rect> <path class=ql-fill d=M13.663,12.027a1.662,1.662,0,0,1,.266-0.276q0.193,0.069.456,0.138a2.1,2.1,0,0,0,.535.069,1.075,1.075,0,0,0,.767-0.3,1.044,1.044,0,0,0,.314-0.8,0.84,0.84,0,0,0-.238-0.619,0.8,0.8,0,0,0-.594-0.239,1.154,1.154,0,0,0-.781.3,4.607,4.607,0,0,0-.781,1q-0.091.15-.218,0.346l-0.246.38c-0.068-.288-0.137-0.582-0.212-0.885-0.459-1.847-2.494-.984-2.941-0.8-0.482.2-.353,0.647-0.094,0.529a0.869,0.869,0,0,1,1.281.585c0.217,0.751.377,1.436,0.527,2.038a5.688,5.688,0,0,1-.362.467,2.69,2.69,0,0,1-.264.271q-0.221-.08-0.471-0.147a2.029,2.029,0,0,0-.522-0.066,1.079,1.079,0,0,0-.768.3A1.058,1.058,0,0,0,9,15.131a0.82,0.82,0,0,0,.832.852,1.134,1.134,0,0,0,.787-0.3,5.11,5.11,0,0,0,.776-0.993q0.141-.219.215-0.34c0.046-.076.122-0.194,0.223-0.346a2.786,2.786,0,0,0,.918,1.726,2.582,2.582,0,0,0,2.376-.185c0.317-.181.212-0.565,0-0.494A0.807,0.807,0,0,1,14.176,15a5.159,5.159,0,0,1-.913-2.446l0,0Q13.487,12.24,13.663,12.027Z></path> </svg>";

/***/ }),
/* 19 */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 18 18\"> <path class=ql-fill d=M10,4V14a1,1,0,0,1-2,0V10H3v4a1,1,0,0,1-2,0V4A1,1,0,0,1,3,4V8H8V4a1,1,0,0,1,2,0Zm6.06787,9.209H14.98975V7.59863a.54085.54085,0,0,0-.605-.60547h-.62744a1.01119,1.01119,0,0,0-.748.29688L11.645,8.56641a.5435.5435,0,0,0-.022.8584l.28613.30762a.53861.53861,0,0,0,.84717.0332l.09912-.08789a1.2137,1.2137,0,0,0,.2417-.35254h.02246s-.01123.30859-.01123.60547V13.209H12.041a.54085.54085,0,0,0-.605.60547v.43945a.54085.54085,0,0,0,.605.60547h4.02686a.54085.54085,0,0,0,.605-.60547v-.43945A.54085.54085,0,0,0,16.06787,13.209Z /> </svg>";

/***/ }),
/* 20 */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 18 18\"> <path class=ql-fill d=M16.73975,13.81445v.43945a.54085.54085,0,0,1-.605.60547H11.855a.58392.58392,0,0,1-.64893-.60547V14.0127c0-2.90527,3.39941-3.42187,3.39941-4.55469a.77675.77675,0,0,0-.84717-.78125,1.17684,1.17684,0,0,0-.83594.38477c-.2749.26367-.561.374-.85791.13184l-.4292-.34082c-.30811-.24219-.38525-.51758-.1543-.81445a2.97155,2.97155,0,0,1,2.45361-1.17676,2.45393,2.45393,0,0,1,2.68408,2.40918c0,2.45312-3.1792,2.92676-3.27832,3.93848h2.79443A.54085.54085,0,0,1,16.73975,13.81445ZM9,3A.99974.99974,0,0,0,8,4V8H3V4A1,1,0,0,0,1,4V14a1,1,0,0,0,2,0V10H8v4a1,1,0,0,0,2,0V4A.99974.99974,0,0,0,9,3Z /> </svg>";

/***/ }),
/* 21 */
/***/ (function(module, exports) {

module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=7 x2=13 y1=4 y2=4></line> <line class=ql-stroke x1=5 x2=11 y1=14 y2=14></line> <line class=ql-stroke x1=8 x2=10 y1=14 y2=4></line> </svg>";

/***/ }),
/* 22 */
/***/ (function(module, exports) {

module.exports = "<svg viewbox=\"0 0 18 18\"> <rect class=ql-stroke height=10 width=12 x=3 y=4></rect> <circle class=ql-fill cx=6 cy=7 r=1></circle> <polyline class=\"ql-even ql-fill\" points=\"5 12 5 11 7 9 8 10 11 7 13 9 13 12 5 12\"></polyline> </svg>";

/***/ }),
/* 23 */
/***/ (function(module, exports) {

module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=3 x2=15 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=9 x2=15 y1=9 y2=9></line> <polyline class=\"ql-fill ql-stroke\" points=\"3 7 3 11 5 9 3 7\"></polyline> </svg>";

/***/ }),
/* 24 */
/***/ (function(module, exports) {

module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=3 x2=15 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=9 x2=15 y1=9 y2=9></line> <polyline class=ql-stroke points=\"5 7 5 11 3 9 5 7\"></polyline> </svg>";

/***/ }),
/* 25 */
/***/ (function(module, exports) {

module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=7 x2=11 y1=7 y2=11></line> <path class=\"ql-even ql-stroke\" d=M8.9,4.577a3.476,3.476,0,0,1,.36,4.679A3.476,3.476,0,0,1,4.577,8.9C3.185,7.5,2.035,6.4,4.217,4.217S7.5,3.185,8.9,4.577Z></path> <path class=\"ql-even ql-stroke\" d=M13.423,9.1a3.476,3.476,0,0,0-4.679-.36,3.476,3.476,0,0,0,.36,4.679c1.392,1.392,2.5,2.542,4.679.36S14.815,10.5,13.423,9.1Z></path> </svg>";

/***/ }),
/* 26 */
/***/ (function(module, exports) {

module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=6 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=6 x2=15 y1=9 y2=9></line> <line class=ql-stroke x1=6 x2=15 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=3 y1=4 y2=4></line> <line class=ql-stroke x1=3 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=3 x2=3 y1=14 y2=14></line> </svg>";

/***/ }),
/* 27 */
/***/ (function(module, exports) {

module.exports = "<svg class=\"\" viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=9 x2=15 y1=4 y2=4></line> <polyline class=ql-stroke points=\"3 4 4 5 6 3\"></polyline> <line class=ql-stroke x1=9 x2=15 y1=14 y2=14></line> <polyline class=ql-stroke points=\"3 14 4 15 6 13\"></polyline> <line class=ql-stroke x1=9 x2=15 y1=9 y2=9></line> <polyline class=ql-stroke points=\"3 9 4 10 6 8\"></polyline> </svg>";

/***/ }),
/* 28 */
/***/ (function(module, exports) {

module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=7 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=7 x2=15 y1=9 y2=9></line> <line class=ql-stroke x1=7 x2=15 y1=14 y2=14></line> <line class=\"ql-stroke ql-thin\" x1=2.5 x2=4.5 y1=5.5 y2=5.5></line> <path class=ql-fill d=M3.5,6A0.5,0.5,0,0,1,3,5.5V3.085l-0.276.138A0.5,0.5,0,0,1,2.053,3c-0.124-.247-0.023-0.324.224-0.447l1-.5A0.5,0.5,0,0,1,4,2.5v3A0.5,0.5,0,0,1,3.5,6Z></path> <path class=\"ql-stroke ql-thin\" d=M4.5,10.5h-2c0-.234,1.85-1.076,1.85-2.234A0.959,0.959,0,0,0,2.5,8.156></path> <path class=\"ql-stroke ql-thin\" d=M2.5,14.846a0.959,0.959,0,0,0,1.85-.109A0.7,0.7,0,0,0,3.75,14a0.688,0.688,0,0,0,.6-0.736,0.959,0.959,0,0,0-1.85-.109></path> </svg>";

/***/ }),
/* 29 */
/***/ (function(module, exports) {

module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M15.5,15H13.861a3.858,3.858,0,0,0,1.914-2.975,1.8,1.8,0,0,0-1.6-1.751A1.921,1.921,0,0,0,12.021,11.7a0.50013,0.50013,0,1,0,.957.291h0a0.914,0.914,0,0,1,1.053-.725,0.81,0.81,0,0,1,.744.762c0,1.076-1.16971,1.86982-1.93971,2.43082A1.45639,1.45639,0,0,0,12,15.5a0.5,0.5,0,0,0,.5.5h3A0.5,0.5,0,0,0,15.5,15Z /> <path class=ql-fill d=M9.65,5.241a1,1,0,0,0-1.409.108L6,7.964,3.759,5.349A1,1,0,0,0,2.192,6.59178Q2.21541,6.6213,2.241,6.649L4.684,9.5,2.241,12.35A1,1,0,0,0,3.71,13.70722q0.02557-.02768.049-0.05722L6,11.036,8.241,13.65a1,1,0,1,0,1.567-1.24277Q9.78459,12.3777,9.759,12.35L7.316,9.5,9.759,6.651A1,1,0,0,0,9.65,5.241Z /> </svg>";

/***/ }),
/* 30 */
/***/ (function(module, exports) {

module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M15.5,7H13.861a4.015,4.015,0,0,0,1.914-2.975,1.8,1.8,0,0,0-1.6-1.751A1.922,1.922,0,0,0,12.021,3.7a0.5,0.5,0,1,0,.957.291,0.917,0.917,0,0,1,1.053-.725,0.81,0.81,0,0,1,.744.762c0,1.077-1.164,1.925-1.934,2.486A1.423,1.423,0,0,0,12,7.5a0.5,0.5,0,0,0,.5.5h3A0.5,0.5,0,0,0,15.5,7Z /> <path class=ql-fill d=M9.651,5.241a1,1,0,0,0-1.41.108L6,7.964,3.759,5.349a1,1,0,1,0-1.519,1.3L4.683,9.5,2.241,12.35a1,1,0,1,0,1.519,1.3L6,11.036,8.241,13.65a1,1,0,0,0,1.519-1.3L7.317,9.5,9.759,6.651A1,1,0,0,0,9.651,5.241Z /> </svg>";

/***/ }),
/* 31 */
/***/ (function(module, exports) {

module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=\"ql-stroke ql-thin\" x1=15.5 x2=2.5 y1=8.5 y2=9.5></line> <path class=ql-fill d=M9.007,8C6.542,7.791,6,7.519,6,6.5,6,5.792,7.283,5,9,5c1.571,0,2.765.679,2.969,1.309a1,1,0,0,0,1.9-.617C13.356,4.106,11.354,3,9,3,6.2,3,4,4.538,4,6.5a3.2,3.2,0,0,0,.5,1.843Z></path> <path class=ql-fill d=M8.984,10C11.457,10.208,12,10.479,12,11.5c0,0.708-1.283,1.5-3,1.5-1.571,0-2.765-.679-2.969-1.309a1,1,0,1,0-1.9.617C4.644,13.894,6.646,15,9,15c2.8,0,5-1.538,5-3.5a3.2,3.2,0,0,0-.5-1.843Z></path> </svg>";

/***/ }),
/* 32 */
/***/ (function(module, exports) {

module.exports = "<svg viewbox=\"0 0 18 18\"> <rect class=ql-stroke height=12 width=12 x=3 y=3></rect> <rect class=ql-fill height=2 width=3 x=5 y=5></rect> <rect class=ql-fill height=2 width=4 x=9 y=5></rect> <g class=\"ql-fill ql-transparent\"> <rect height=2 width=3 x=5 y=8></rect> <rect height=2 width=4 x=9 y=8></rect> <rect height=2 width=3 x=5 y=11></rect> <rect height=2 width=4 x=9 y=11></rect> </g> </svg>";

/***/ }),
/* 33 */
/***/ (function(module, exports) {

module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-stroke d=M5,3V9a4.012,4.012,0,0,0,4,4H9a4.012,4.012,0,0,0,4-4V3></path> <rect class=ql-fill height=1 rx=0.5 ry=0.5 width=12 x=3 y=15></rect> </svg>";

/***/ }),
/* 34 */
/***/ (function(module, exports) {

module.exports = "<svg viewbox=\"0 0 18 18\"> <rect class=ql-stroke height=12 width=12 x=3 y=3></rect> <rect class=ql-fill height=12 width=1 x=5 y=3></rect> <rect class=ql-fill height=12 width=1 x=12 y=3></rect> <rect class=ql-fill height=2 width=8 x=5 y=8></rect> <rect class=ql-fill height=1 width=3 x=3 y=5></rect> <rect class=ql-fill height=1 width=3 x=3 y=7></rect> <rect class=ql-fill height=1 width=3 x=3 y=10></rect> <rect class=ql-fill height=1 width=3 x=3 y=12></rect> <rect class=ql-fill height=1 width=3 x=12 y=5></rect> <rect class=ql-fill height=1 width=3 x=12 y=7></rect> <rect class=ql-fill height=1 width=3 x=12 y=10></rect> <rect class=ql-fill height=1 width=3 x=12 y=12></rect> </svg>";

/***/ }),
/* 35 */
/***/ (function(module, exports) {

module.exports = "<svg viewbox=\"0 0 18 18\"> <polygon class=ql-stroke points=\"7 11 9 13 11 11 7 11\"></polygon> <polygon class=ql-stroke points=\"7 7 9 5 11 7 7 7\"></polygon> </svg>";

/***/ }),
/* 36 */
/***/ (function(module, exports) {

exports = module.exports = typeof Object.keys === 'function'
  ? Object.keys : shim;

exports.shim = shim;
function shim (obj) {
  var keys = [];
  for (var key in obj) keys.push(key);
  return keys;
}


/***/ }),
/* 37 */
/***/ (function(module, exports) {

var supportsArgumentsClass = (function(){
  return Object.prototype.toString.call(arguments)
})() == '[object Arguments]';

exports = module.exports = supportsArgumentsClass ? supported : unsupported;

exports.supported = supported;
function supported(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
};

exports.unsupported = unsupported;
function unsupported(object){
  return object &&
    typeof object == 'object' &&
    typeof object.length == 'number' &&
    Object.prototype.hasOwnProperty.call(object, 'callee') &&
    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||
    false;
};


/***/ }),
/* 38 */
/***/ (function(module, exports) {

/**
 * This library modifies the diff-patch-match library by Neil Fraser
 * by removing the patch and match functionality and certain advanced
 * options in the diff function. The original license is as follows:
 *
 * ===
 *
 * Diff Match and Patch
 *
 * Copyright 2006 Google Inc.
 * http://code.google.com/p/google-diff-match-patch/
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * The data structure representing a diff is an array of tuples:
 * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]
 * which means: delete 'Hello', add 'Goodbye' and keep ' world.'
 */
var DIFF_DELETE = -1;
var DIFF_INSERT = 1;
var DIFF_EQUAL = 0;


/**
 * Find the differences between two texts.  Simplifies the problem by stripping
 * any common prefix or suffix off the texts before diffing.
 * @param {string} text1 Old string to be diffed.
 * @param {string} text2 New string to be diffed.
 * @param {Int|Object} [cursor_pos] Edit position in text1 or object with more info
 * @return {Array} Array of diff tuples.
 */
function diff_main(text1, text2, cursor_pos, _fix_unicode) {
  // Check for equality
  if (text1 === text2) {
    if (text1) {
      return [[DIFF_EQUAL, text1]];
    }
    return [];
  }

  if (cursor_pos != null) {
    var editdiff = find_cursor_edit_diff(text1, text2, cursor_pos);
    if (editdiff) {
      return editdiff;
    }
  }

  // Trim off common prefix (speedup).
  var commonlength = diff_commonPrefix(text1, text2);
  var commonprefix = text1.substring(0, commonlength);
  text1 = text1.substring(commonlength);
  text2 = text2.substring(commonlength);

  // Trim off common suffix (speedup).
  commonlength = diff_commonSuffix(text1, text2);
  var commonsuffix = text1.substring(text1.length - commonlength);
  text1 = text1.substring(0, text1.length - commonlength);
  text2 = text2.substring(0, text2.length - commonlength);

  // Compute the diff on the middle block.
  var diffs = diff_compute_(text1, text2);

  // Restore the prefix and suffix.
  if (commonprefix) {
    diffs.unshift([DIFF_EQUAL, commonprefix]);
  }
  if (commonsuffix) {
    diffs.push([DIFF_EQUAL, commonsuffix]);
  }
  diff_cleanupMerge(diffs, _fix_unicode);
  return diffs;
};


/**
 * Find the differences between two texts.  Assumes that the texts do not
 * have any common prefix or suffix.
 * @param {string} text1 Old string to be diffed.
 * @param {string} text2 New string to be diffed.
 * @return {Array} Array of diff tuples.
 */
function diff_compute_(text1, text2) {
  var diffs;

  if (!text1) {
    // Just add some text (speedup).
    return [[DIFF_INSERT, text2]];
  }

  if (!text2) {
    // Just delete some text (speedup).
    return [[DIFF_DELETE, text1]];
  }

  var longtext = text1.length > text2.length ? text1 : text2;
  var shorttext = text1.length > text2.length ? text2 : text1;
  var i = longtext.indexOf(shorttext);
  if (i !== -1) {
    // Shorter text is inside the longer text (speedup).
    diffs = [
      [DIFF_INSERT, longtext.substring(0, i)],
      [DIFF_EQUAL, shorttext],
      [DIFF_INSERT, longtext.substring(i + shorttext.length)]
    ];
    // Swap insertions for deletions if diff is reversed.
    if (text1.length > text2.length) {
      diffs[0][0] = diffs[2][0] = DIFF_DELETE;
    }
    return diffs;
  }

  if (shorttext.length === 1) {
    // Single character string.
    // After the previous speedup, the character can't be an equality.
    return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];
  }

  // Check to see if the problem can be split in two.
  var hm = diff_halfMatch_(text1, text2);
  if (hm) {
    // A half-match was found, sort out the return data.
    var text1_a = hm[0];
    var text1_b = hm[1];
    var text2_a = hm[2];
    var text2_b = hm[3];
    var mid_common = hm[4];
    // Send both pairs off for separate processing.
    var diffs_a = diff_main(text1_a, text2_a);
    var diffs_b = diff_main(text1_b, text2_b);
    // Merge the results.
    return diffs_a.concat([[DIFF_EQUAL, mid_common]], diffs_b);
  }

  return diff_bisect_(text1, text2);
};


/**
 * Find the 'middle snake' of a diff, split the problem in two
 * and return the recursively constructed diff.
 * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.
 * @param {string} text1 Old string to be diffed.
 * @param {string} text2 New string to be diffed.
 * @return {Array} Array of diff tuples.
 * @private
 */
function diff_bisect_(text1, text2) {
  // Cache the text lengths to prevent multiple calls.
  var text1_length = text1.length;
  var text2_length = text2.length;
  var max_d = Math.ceil((text1_length + text2_length) / 2);
  var v_offset = max_d;
  var v_length = 2 * max_d;
  var v1 = new Array(v_length);
  var v2 = new Array(v_length);
  // Setting all elements to -1 is faster in Chrome & Firefox than mixing
  // integers and undefined.
  for (var x = 0; x < v_length; x++) {
    v1[x] = -1;
    v2[x] = -1;
  }
  v1[v_offset + 1] = 0;
  v2[v_offset + 1] = 0;
  var delta = text1_length - text2_length;
  // If the total number of characters is odd, then the front path will collide
  // with the reverse path.
  var front = (delta % 2 !== 0);
  // Offsets for start and end of k loop.
  // Prevents mapping of space beyond the grid.
  var k1start = 0;
  var k1end = 0;
  var k2start = 0;
  var k2end = 0;
  for (var d = 0; d < max_d; d++) {
    // Walk the front path one step.
    for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {
      var k1_offset = v_offset + k1;
      var x1;
      if (k1 === -d || (k1 !== d && v1[k1_offset - 1] < v1[k1_offset + 1])) {
        x1 = v1[k1_offset + 1];
      } else {
        x1 = v1[k1_offset - 1] + 1;
      }
      var y1 = x1 - k1;
      while (
        x1 < text1_length && y1 < text2_length &&
        text1.charAt(x1) === text2.charAt(y1)
      ) {
        x1++;
        y1++;
      }
      v1[k1_offset] = x1;
      if (x1 > text1_length) {
        // Ran off the right of the graph.
        k1end += 2;
      } else if (y1 > text2_length) {
        // Ran off the bottom of the graph.
        k1start += 2;
      } else if (front) {
        var k2_offset = v_offset + delta - k1;
        if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] !== -1) {
          // Mirror x2 onto top-left coordinate system.
          var x2 = text1_length - v2[k2_offset];
          if (x1 >= x2) {
            // Overlap detected.
            return diff_bisectSplit_(text1, text2, x1, y1);
          }
        }
      }
    }

    // Walk the reverse path one step.
    for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {
      var k2_offset = v_offset + k2;
      var x2;
      if (k2 === -d || (k2 !== d && v2[k2_offset - 1] < v2[k2_offset + 1])) {
        x2 = v2[k2_offset + 1];
      } else {
        x2 = v2[k2_offset - 1] + 1;
      }
      var y2 = x2 - k2;
      while (
        x2 < text1_length && y2 < text2_length &&
        text1.charAt(text1_length - x2 - 1) === text2.charAt(text2_length - y2 - 1)
      ) {
        x2++;
        y2++;
      }
      v2[k2_offset] = x2;
      if (x2 > text1_length) {
        // Ran off the left of the graph.
        k2end += 2;
      } else if (y2 > text2_length) {
        // Ran off the top of the graph.
        k2start += 2;
      } else if (!front) {
        var k1_offset = v_offset + delta - k2;
        if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] !== -1) {
          var x1 = v1[k1_offset];
          var y1 = v_offset + x1 - k1_offset;
          // Mirror x2 onto top-left coordinate system.
          x2 = text1_length - x2;
          if (x1 >= x2) {
            // Overlap detected.
            return diff_bisectSplit_(text1, text2, x1, y1);
          }
        }
      }
    }
  }
  // Diff took too long and hit the deadline or
  // number of diffs equals number of characters, no commonality at all.
  return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];
};


/**
 * Given the location of the 'middle snake', split the diff in two parts
 * and recurse.
 * @param {string} text1 Old string to be diffed.
 * @param {string} text2 New string to be diffed.
 * @param {number} x Index of split point in text1.
 * @param {number} y Index of split point in text2.
 * @return {Array} Array of diff tuples.
 */
function diff_bisectSplit_(text1, text2, x, y) {
  var text1a = text1.substring(0, x);
  var text2a = text2.substring(0, y);
  var text1b = text1.substring(x);
  var text2b = text2.substring(y);

  // Compute both diffs serially.
  var diffs = diff_main(text1a, text2a);
  var diffsb = diff_main(text1b, text2b);

  return diffs.concat(diffsb);
};


/**
 * Determine the common prefix of two strings.
 * @param {string} text1 First string.
 * @param {string} text2 Second string.
 * @return {number} The number of characters common to the start of each
 *     string.
 */
function diff_commonPrefix(text1, text2) {
  // Quick check for common null cases.
  if (!text1 || !text2 || text1.charAt(0) !== text2.charAt(0)) {
    return 0;
  }
  // Binary search.
  // Performance analysis: http://neil.fraser.name/news/2007/10/09/
  var pointermin = 0;
  var pointermax = Math.min(text1.length, text2.length);
  var pointermid = pointermax;
  var pointerstart = 0;
  while (pointermin < pointermid) {
    if (
      text1.substring(pointerstart, pointermid) ==
      text2.substring(pointerstart, pointermid)
    ) {
      pointermin = pointermid;
      pointerstart = pointermin;
    } else {
      pointermax = pointermid;
    }
    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);
  }

  if (is_surrogate_pair_start(text1.charCodeAt(pointermid - 1))) {
    pointermid--;
  }

  return pointermid;
};


/**
 * Determine the common suffix of two strings.
 * @param {string} text1 First string.
 * @param {string} text2 Second string.
 * @return {number} The number of characters common to the end of each string.
 */
function diff_commonSuffix(text1, text2) {
  // Quick check for common null cases.
  if (!text1 || !text2 || text1.slice(-1) !== text2.slice(-1)) {
    return 0;
  }
  // Binary search.
  // Performance analysis: http://neil.fraser.name/news/2007/10/09/
  var pointermin = 0;
  var pointermax = Math.min(text1.length, text2.length);
  var pointermid = pointermax;
  var pointerend = 0;
  while (pointermin < pointermid) {
    if (
      text1.substring(text1.length - pointermid, text1.length - pointerend) ==
      text2.substring(text2.length - pointermid, text2.length - pointerend)
    ) {
      pointermin = pointermid;
      pointerend = pointermin;
    } else {
      pointermax = pointermid;
    }
    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);
  }

  if (is_surrogate_pair_end(text1.charCodeAt(text1.length - pointermid))) {
    pointermid--;
  }

  return pointermid;
};


/**
 * Do the two texts share a substring which is at least half the length of the
 * longer text?
 * This speedup can produce non-minimal diffs.
 * @param {string} text1 First string.
 * @param {string} text2 Second string.
 * @return {Array.<string>} Five element Array, containing the prefix of
 *     text1, the suffix of text1, the prefix of text2, the suffix of
 *     text2 and the common middle.  Or null if there was no match.
 */
function diff_halfMatch_(text1, text2) {
  var longtext = text1.length > text2.length ? text1 : text2;
  var shorttext = text1.length > text2.length ? text2 : text1;
  if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {
    return null;  // Pointless.
  }

  /**
   * Does a substring of shorttext exist within longtext such that the substring
   * is at least half the length of longtext?
   * Closure, but does not reference any external variables.
   * @param {string} longtext Longer string.
   * @param {string} shorttext Shorter string.
   * @param {number} i Start index of quarter length substring within longtext.
   * @return {Array.<string>} Five element Array, containing the prefix of
   *     longtext, the suffix of longtext, the prefix of shorttext, the suffix
   *     of shorttext and the common middle.  Or null if there was no match.
   * @private
   */
  function diff_halfMatchI_(longtext, shorttext, i) {
    // Start with a 1/4 length substring at position i as a seed.
    var seed = longtext.substring(i, i + Math.floor(longtext.length / 4));
    var j = -1;
    var best_common = '';
    var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;
    while ((j = shorttext.indexOf(seed, j + 1)) !== -1) {
      var prefixLength = diff_commonPrefix(
        longtext.substring(i), shorttext.substring(j));
      var suffixLength = diff_commonSuffix(
        longtext.substring(0, i), shorttext.substring(0, j));
      if (best_common.length < suffixLength + prefixLength) {
        best_common = shorttext.substring(
          j - suffixLength, j) + shorttext.substring(j, j + prefixLength);
        best_longtext_a = longtext.substring(0, i - suffixLength);
        best_longtext_b = longtext.substring(i + prefixLength);
        best_shorttext_a = shorttext.substring(0, j - suffixLength);
        best_shorttext_b = shorttext.substring(j + prefixLength);
      }
    }
    if (best_common.length * 2 >= longtext.length) {
      return [
        best_longtext_a, best_longtext_b,
        best_shorttext_a, best_shorttext_b, best_common
      ];
    } else {
      return null;
    }
  }

  // First check if the second quarter is the seed for a half-match.
  var hm1 = diff_halfMatchI_(longtext, shorttext, Math.ceil(longtext.length / 4));
  // Check again based on the third quarter.
  var hm2 = diff_halfMatchI_(longtext, shorttext, Math.ceil(longtext.length / 2));
  var hm;
  if (!hm1 && !hm2) {
    return null;
  } else if (!hm2) {
    hm = hm1;
  } else if (!hm1) {
    hm = hm2;
  } else {
    // Both matched.  Select the longest.
    hm = hm1[4].length > hm2[4].length ? hm1 : hm2;
  }

  // A half-match was found, sort out the return data.
  var text1_a, text1_b, text2_a, text2_b;
  if (text1.length > text2.length) {
    text1_a = hm[0];
    text1_b = hm[1];
    text2_a = hm[2];
    text2_b = hm[3];
  } else {
    text2_a = hm[0];
    text2_b = hm[1];
    text1_a = hm[2];
    text1_b = hm[3];
  }
  var mid_common = hm[4];
  return [text1_a, text1_b, text2_a, text2_b, mid_common];
};


/**
 * Reorder and merge like edit sections.  Merge equalities.
 * Any edit section can move as long as it doesn't cross an equality.
 * @param {Array} diffs Array of diff tuples.
 * @param {boolean} fix_unicode Whether to normalize to a unicode-correct diff
 */
function diff_cleanupMerge(diffs, fix_unicode) {
  diffs.push([DIFF_EQUAL, '']);  // Add a dummy entry at the end.
  var pointer = 0;
  var count_delete = 0;
  var count_insert = 0;
  var text_delete = '';
  var text_insert = '';
  var commonlength;
  while (pointer < diffs.length) {
    if (pointer < diffs.length - 1 && !diffs[pointer][1]) {
      diffs.splice(pointer, 1);
      continue;
    }
    switch (diffs[pointer][0]) {
      case DIFF_INSERT:

        count_insert++;
        text_insert += diffs[pointer][1];
        pointer++;
        break;
      case DIFF_DELETE:
        count_delete++;
        text_delete += diffs[pointer][1];
        pointer++;
        break;
      case DIFF_EQUAL:
        var previous_equality = pointer - count_insert - count_delete - 1;
        if (fix_unicode) {
          // prevent splitting of unicode surrogate pairs.  when fix_unicode is true,
          // we assume that the old and new text in the diff are complete and correct
          // unicode-encoded JS strings, but the tuple boundaries may fall between
          // surrogate pairs.  we fix this by shaving off stray surrogates from the end
          // of the previous equality and the beginning of this equality.  this may create
          // empty equalities or a common prefix or suffix.  for example, if AB and AC are
          // emojis, `[[0, 'A'], [-1, 'BA'], [0, 'C']]` would turn into deleting 'ABAC' and
          // inserting 'AC', and then the common suffix 'AC' will be eliminated.  in this
          // particular case, both equalities go away, we absorb any previous inequalities,
          // and we keep scanning for the next equality before rewriting the tuples.
          if (previous_equality >= 0 && ends_with_pair_start(diffs[previous_equality][1])) {
            var stray = diffs[previous_equality][1].slice(-1);
            diffs[previous_equality][1] = diffs[previous_equality][1].slice(0, -1);
            text_delete = stray + text_delete;
            text_insert = stray + text_insert;
            if (!diffs[previous_equality][1]) {
              // emptied out previous equality, so delete it and include previous delete/insert
              diffs.splice(previous_equality, 1);
              pointer--;
              var k = previous_equality - 1;
              if (diffs[k] && diffs[k][0] === DIFF_INSERT) {
                count_insert++;
                text_insert = diffs[k][1] + text_insert;
                k--;
              }
              if (diffs[k] && diffs[k][0] === DIFF_DELETE) {
                count_delete++;
                text_delete = diffs[k][1] + text_delete;
                k--;
              }
              previous_equality = k;
            }
          }
          if (starts_with_pair_end(diffs[pointer][1])) {
            var stray = diffs[pointer][1].charAt(0);
            diffs[pointer][1] = diffs[pointer][1].slice(1);
            text_delete += stray;
            text_insert += stray;
          }
        }
        if (pointer < diffs.length - 1 && !diffs[pointer][1]) {
          // for empty equality not at end, wait for next equality
          diffs.splice(pointer, 1);
          break;
        }
        if (text_delete.length > 0 || text_insert.length > 0) {
          // note that diff_commonPrefix and diff_commonSuffix are unicode-aware
          if (text_delete.length > 0 && text_insert.length > 0) {
            // Factor out any common prefixes.
            commonlength = diff_commonPrefix(text_insert, text_delete);
            if (commonlength !== 0) {
              if (previous_equality >= 0) {
                diffs[previous_equality][1] += text_insert.substring(0, commonlength);
              } else {
                diffs.splice(0, 0, [DIFF_EQUAL, text_insert.substring(0, commonlength)]);
                pointer++;
              }
              text_insert = text_insert.substring(commonlength);
              text_delete = text_delete.substring(commonlength);
            }
            // Factor out any common suffixes.
            commonlength = diff_commonSuffix(text_insert, text_delete);
            if (commonlength !== 0) {
              diffs[pointer][1] =
                text_insert.substring(text_insert.length - commonlength) + diffs[pointer][1];
              text_insert = text_insert.substring(0, text_insert.length - commonlength);
              text_delete = text_delete.substring(0, text_delete.length - commonlength);
            }
          }
          // Delete the offending records and add the merged ones.
          var n = count_insert + count_delete;
          if (text_delete.length === 0 && text_insert.length === 0) {
            diffs.splice(pointer - n, n);
            pointer = pointer - n;
          } else if (text_delete.length === 0) {
            diffs.splice(pointer - n, n, [DIFF_INSERT, text_insert]);
            pointer = pointer - n + 1;
          } else if (text_insert.length === 0) {
            diffs.splice(pointer - n, n, [DIFF_DELETE, text_delete]);
            pointer = pointer - n + 1;
          } else {
            diffs.splice(pointer - n, n, [DIFF_DELETE, text_delete], [DIFF_INSERT, text_insert]);
            pointer = pointer - n + 2;
          }
        }
        if (pointer !== 0 && diffs[pointer - 1][0] === DIFF_EQUAL) {
          // Merge this equality with the previous one.
          diffs[pointer - 1][1] += diffs[pointer][1];
          diffs.splice(pointer, 1);
        } else {
          pointer++;
        }
        count_insert = 0;
        count_delete = 0;
        text_delete = '';
        text_insert = '';
        break;
    }
  }
  if (diffs[diffs.length - 1][1] === '') {
    diffs.pop();  // Remove the dummy entry at the end.
  }

  // Second pass: look for single edits surrounded on both sides by equalities
  // which can be shifted sideways to eliminate an equality.
  // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC
  var changes = false;
  pointer = 1;
  // Intentionally ignore the first and last element (don't need checking).
  while (pointer < diffs.length - 1) {
    if (diffs[pointer - 1][0] === DIFF_EQUAL &&
      diffs[pointer + 1][0] === DIFF_EQUAL) {
      // This is a single edit surrounded by equalities.
      if (diffs[pointer][1].substring(diffs[pointer][1].length -
        diffs[pointer - 1][1].length) === diffs[pointer - 1][1]) {
        // Shift the edit over the previous equality.
        diffs[pointer][1] = diffs[pointer - 1][1] +
          diffs[pointer][1].substring(0, diffs[pointer][1].length -
            diffs[pointer - 1][1].length);
        diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];
        diffs.splice(pointer - 1, 1);
        changes = true;
      } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) ==
        diffs[pointer + 1][1]) {
        // Shift the edit over the next equality.
        diffs[pointer - 1][1] += diffs[pointer + 1][1];
        diffs[pointer][1] =
          diffs[pointer][1].substring(diffs[pointer + 1][1].length) +
          diffs[pointer + 1][1];
        diffs.splice(pointer + 1, 1);
        changes = true;
      }
    }
    pointer++;
  }
  // If shifts were made, the diff needs reordering and another shift sweep.
  if (changes) {
    diff_cleanupMerge(diffs, fix_unicode);
  }
};

function is_surrogate_pair_start(charCode) {
  return charCode >= 0xD800 && charCode <= 0xDBFF;
}

function is_surrogate_pair_end(charCode) {
  return charCode >= 0xDC00 && charCode <= 0xDFFF;
}

function starts_with_pair_end(str) {
  return is_surrogate_pair_end(str.charCodeAt(0));
}

function ends_with_pair_start(str) {
  return is_surrogate_pair_start(str.charCodeAt(str.length - 1));
}

function remove_empty_tuples(tuples) {
  var ret = [];
  for (var i = 0; i < tuples.length; i++) {
    if (tuples[i][1].length > 0) {
      ret.push(tuples[i]);
    }
  }
  return ret;
}

function make_edit_splice(before, oldMiddle, newMiddle, after) {
  if (ends_with_pair_start(before) || starts_with_pair_end(after)) {
    return null;
  }
  return remove_empty_tuples([
    [DIFF_EQUAL, before],
    [DIFF_DELETE, oldMiddle],
    [DIFF_INSERT, newMiddle],
    [DIFF_EQUAL, after]
  ]);
}

function find_cursor_edit_diff(oldText, newText, cursor_pos) {
  // note: this runs after equality check has ruled out exact equality
  var oldRange = typeof cursor_pos === 'number' ?
    { index: cursor_pos, length: 0 } : cursor_pos.oldRange;
  var newRange = typeof cursor_pos === 'number' ?
    null : cursor_pos.newRange;
  // take into account the old and new selection to generate the best diff
  // possible for a text edit.  for example, a text change from "xxx" to "xx"
  // could be a delete or forwards-delete of any one of the x's, or the
  // result of selecting two of the x's and typing "x".
  var oldLength = oldText.length;
  var newLength = newText.length;
  if (oldRange.length === 0 && (newRange === null || newRange.length === 0)) {
    // see if we have an insert or delete before or after cursor
    var oldCursor = oldRange.index;
    var oldBefore = oldText.slice(0, oldCursor);
    var oldAfter = oldText.slice(oldCursor);
    var maybeNewCursor = newRange ? newRange.index : null;
    editBefore: {
      // is this an insert or delete right before oldCursor?
      var newCursor = oldCursor + newLength - oldLength;
      if (maybeNewCursor !== null && maybeNewCursor !== newCursor) {
        break editBefore;
      }
      if (newCursor < 0 || newCursor > newLength) {
        break editBefore;
      }
      var newBefore = newText.slice(0, newCursor);
      var newAfter = newText.slice(newCursor);
      if (newAfter !== oldAfter) {
        break editBefore;
      }
      var prefixLength = Math.min(oldCursor, newCursor);
      var oldPrefix = oldBefore.slice(0, prefixLength);
      var newPrefix = newBefore.slice(0, prefixLength);
      if (oldPrefix !== newPrefix) {
        break editBefore;
      }
      var oldMiddle = oldBefore.slice(prefixLength);
      var newMiddle = newBefore.slice(prefixLength);
      return make_edit_splice(oldPrefix, oldMiddle, newMiddle, oldAfter);
    }
    editAfter: {
      // is this an insert or delete right after oldCursor?
      if (maybeNewCursor !== null && maybeNewCursor !== oldCursor) {
        break editAfter;
      }
      var cursor = oldCursor;
      var newBefore = newText.slice(0, cursor);
      var newAfter = newText.slice(cursor);
      if (newBefore !== oldBefore) {
        break editAfter;
      }
      var suffixLength = Math.min(oldLength - cursor, newLength - cursor);
      var oldSuffix = oldAfter.slice(oldAfter.length - suffixLength);
      var newSuffix = newAfter.slice(newAfter.length - suffixLength);
      if (oldSuffix !== newSuffix) {
        break editAfter;
      }
      var oldMiddle = oldAfter.slice(0, oldAfter.length - suffixLength);
      var newMiddle = newAfter.slice(0, newAfter.length - suffixLength);
      return make_edit_splice(oldBefore, oldMiddle, newMiddle, oldSuffix);
    }
  }
  if (oldRange.length > 0 && newRange && newRange.length === 0) {
    replaceRange: {
      // see if diff could be a splice of the old selection range
      var oldPrefix = oldText.slice(0, oldRange.index);
      var oldSuffix = oldText.slice(oldRange.index + oldRange.length);
      var prefixLength = oldPrefix.length;
      var suffixLength = oldSuffix.length;
      if (newLength < prefixLength + suffixLength) {
        break replaceRange;
      }
      var newPrefix = newText.slice(0, prefixLength);
      var newSuffix = newText.slice(newLength - suffixLength);
      if (oldPrefix !== newPrefix || oldSuffix !== newSuffix) {
        break replaceRange;
      }
      var oldMiddle = oldText.slice(prefixLength, oldLength - suffixLength);
      var newMiddle = newText.slice(prefixLength, newLength - suffixLength);
      return make_edit_splice(oldPrefix, oldMiddle, newMiddle, oldSuffix);
    }
  }

  return null;
}

function diff(text1, text2, cursor_pos) {
  // only pass fix_unicode=true at the top level, not when diff_main is
  // recursively invoked
  return diff_main(text1, text2, cursor_pos, true);
}

diff.INSERT = DIFF_INSERT;
diff.DELETE = DIFF_DELETE;
diff.EQUAL = DIFF_EQUAL;

module.exports = diff;


/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var deep_equal_1 = __importDefault(__webpack_require__(3));
var extend_1 = __importDefault(__webpack_require__(1));
var AttributeMap;
(function (AttributeMap) {
    function compose(a, b, keepNull) {
        if (a === void 0) { a = {}; }
        if (b === void 0) { b = {}; }
        if (typeof a !== 'object') {
            a = {};
        }
        if (typeof b !== 'object') {
            b = {};
        }
        var attributes = extend_1.default(true, {}, b);
        if (!keepNull) {
            attributes = Object.keys(attributes).reduce(function (copy, key) {
                if (attributes[key] != null) {
                    copy[key] = attributes[key];
                }
                return copy;
            }, {});
        }
        for (var key in a) {
            if (a[key] !== undefined && b[key] === undefined) {
                attributes[key] = a[key];
            }
        }
        return Object.keys(attributes).length > 0 ? attributes : undefined;
    }
    AttributeMap.compose = compose;
    function diff(a, b) {
        if (a === void 0) { a = {}; }
        if (b === void 0) { b = {}; }
        if (typeof a !== 'object') {
            a = {};
        }
        if (typeof b !== 'object') {
            b = {};
        }
        var attributes = Object.keys(a)
            .concat(Object.keys(b))
            .reduce(function (attrs, key) {
            if (!deep_equal_1.default(a[key], b[key])) {
                attrs[key] = b[key] === undefined ? null : b[key];
            }
            return attrs;
        }, {});
        return Object.keys(attributes).length > 0 ? attributes : undefined;
    }
    AttributeMap.diff = diff;
    function transform(a, b, priority) {
        if (priority === void 0) { priority = false; }
        if (typeof a !== 'object') {
            return b;
        }
        if (typeof b !== 'object') {
            return undefined;
        }
        if (!priority) {
            return b; // b simply overwrites us without priority
        }
        var attributes = Object.keys(b).reduce(function (attrs, key) {
            if (a[key] === undefined) {
                attrs[key] = b[key]; // null is a valid value
            }
            return attrs;
        }, {});
        return Object.keys(attributes).length > 0 ? attributes : undefined;
    }
    AttributeMap.transform = transform;
})(AttributeMap || (AttributeMap = {}));
exports.default = AttributeMap;
//# sourceMappingURL=AttributeMap.js.map

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var Op_1 = __importDefault(__webpack_require__(5));
var Iterator = /** @class */ (function () {
    function Iterator(ops) {
        this.ops = ops;
        this.index = 0;
        this.offset = 0;
    }
    Iterator.prototype.hasNext = function () {
        return this.peekLength() < Infinity;
    };
    Iterator.prototype.next = function (length) {
        if (!length) {
            length = Infinity;
        }
        var nextOp = this.ops[this.index];
        if (nextOp) {
            var offset = this.offset;
            var opLength = Op_1.default.length(nextOp);
            if (length >= opLength - offset) {
                length = opLength - offset;
                this.index += 1;
                this.offset = 0;
            }
            else {
                this.offset += length;
            }
            if (typeof nextOp.delete === 'number') {
                return { delete: length };
            }
            else {
                var retOp = {};
                if (nextOp.attributes) {
                    retOp.attributes = nextOp.attributes;
                }
                if (typeof nextOp.retain === 'number') {
                    retOp.retain = length;
                }
                else if (typeof nextOp.insert === 'string') {
                    retOp.insert = nextOp.insert.substr(offset, length);
                }
                else {
                    // offset should === 0, length should === 1
                    retOp.insert = nextOp.insert;
                }
                return retOp;
            }
        }
        else {
            return { retain: Infinity };
        }
    };
    Iterator.prototype.peek = function () {
        return this.ops[this.index];
    };
    Iterator.prototype.peekLength = function () {
        if (this.ops[this.index]) {
            // Should never return 0 if our index is being managed correctly
            return Op_1.default.length(this.ops[this.index]) - this.offset;
        }
        else {
            return Infinity;
        }
    };
    Iterator.prototype.peekType = function () {
        if (this.ops[this.index]) {
            if (typeof this.ops[this.index].delete === 'number') {
                return 'delete';
            }
            else if (typeof this.ops[this.index].retain === 'number') {
                return 'retain';
            }
            else {
                return 'insert';
            }
        }
        return 'retain';
    };
    Iterator.prototype.rest = function () {
        if (!this.hasNext()) {
            return [];
        }
        else if (this.offset === 0) {
            return this.ops.slice(this.index);
        }
        else {
            var offset = this.offset;
            var index = this.index;
            var next = this.next();
            var rest = this.ops.slice(this.index);
            this.offset = offset;
            this.index = index;
            return [next].concat(rest);
        }
    };
    return Iterator;
}());
exports.default = Iterator;
//# sourceMappingURL=Iterator.js.map

/***/ }),
/* 41 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var parchment_namespaceObject = {};
__webpack_require__.r(parchment_namespaceObject);
__webpack_require__.d(parchment_namespaceObject, "ParentBlot", function() { return abstract_parent; });
__webpack_require__.d(parchment_namespaceObject, "ContainerBlot", function() { return abstract_container; });
__webpack_require__.d(parchment_namespaceObject, "LeafBlot", function() { return abstract_leaf; });
__webpack_require__.d(parchment_namespaceObject, "EmbedBlot", function() { return blot_embed; });
__webpack_require__.d(parchment_namespaceObject, "ScrollBlot", function() { return blot_scroll; });
__webpack_require__.d(parchment_namespaceObject, "BlockBlot", function() { return blot_block; });
__webpack_require__.d(parchment_namespaceObject, "InlineBlot", function() { return inline; });
__webpack_require__.d(parchment_namespaceObject, "TextBlot", function() { return blot_text; });
__webpack_require__.d(parchment_namespaceObject, "Attributor", function() { return attributor_Attributor; });
__webpack_require__.d(parchment_namespaceObject, "ClassAttributor", function() { return attributor_class; });
__webpack_require__.d(parchment_namespaceObject, "StyleAttributor", function() { return attributor_style; });
__webpack_require__.d(parchment_namespaceObject, "AttributorStore", function() { return store; });
__webpack_require__.d(parchment_namespaceObject, "Registry", function() { return registry_Registry; });
__webpack_require__.d(parchment_namespaceObject, "Scope", function() { return src_scope; });

// EXTERNAL MODULE: ./node_modules/quill-delta/dist/Delta.js
var Delta = __webpack_require__(0);
var Delta_default = /*#__PURE__*/__webpack_require__.n(Delta);

// CONCATENATED MODULE: ./node_modules/parchment/src/scope.ts
var Scope;
(function (Scope) {
    Scope[Scope["TYPE"] = 3] = "TYPE";
    Scope[Scope["LEVEL"] = 12] = "LEVEL";
    Scope[Scope["ATTRIBUTE"] = 13] = "ATTRIBUTE";
    Scope[Scope["BLOT"] = 14] = "BLOT";
    Scope[Scope["INLINE"] = 7] = "INLINE";
    Scope[Scope["BLOCK"] = 11] = "BLOCK";
    Scope[Scope["BLOCK_BLOT"] = 10] = "BLOCK_BLOT";
    Scope[Scope["INLINE_BLOT"] = 6] = "INLINE_BLOT";
    Scope[Scope["BLOCK_ATTRIBUTE"] = 9] = "BLOCK_ATTRIBUTE";
    Scope[Scope["INLINE_ATTRIBUTE"] = 5] = "INLINE_ATTRIBUTE";
    Scope[Scope["ANY"] = 15] = "ANY";
})(Scope || (Scope = {}));
/* harmony default export */ var src_scope = (Scope);

// CONCATENATED MODULE: ./node_modules/parchment/src/collection/linked-list.ts
class LinkedList {
    constructor() {
        this.head = null;
        this.tail = null;
        this.length = 0;
    }
    append(...nodes) {
        this.insertBefore(nodes[0], null);
        if (nodes.length > 1) {
            this.append.apply(this, nodes.slice(1));
        }
    }
    at(index) {
        const next = this.iterator();
        let cur = next();
        while (cur && index > 0) {
            index -= 1;
            cur = next();
        }
        return cur;
    }
    contains(node) {
        const next = this.iterator();
        let cur = next();
        while (cur) {
            if (cur === node) {
                return true;
            }
            cur = next();
        }
        return false;
    }
    indexOf(node) {
        const next = this.iterator();
        let cur = next();
        let index = 0;
        while (cur) {
            if (cur === node) {
                return index;
            }
            index += 1;
            cur = next();
        }
        return -1;
    }
    insertBefore(node, refNode) {
        if (node == null) {
            return;
        }
        this.remove(node);
        node.next = refNode;
        if (refNode != null) {
            node.prev = refNode.prev;
            if (refNode.prev != null) {
                refNode.prev.next = node;
            }
            refNode.prev = node;
            if (refNode === this.head) {
                this.head = node;
            }
        }
        else if (this.tail != null) {
            this.tail.next = node;
            node.prev = this.tail;
            this.tail = node;
        }
        else {
            node.prev = null;
            this.head = this.tail = node;
        }
        this.length += 1;
    }
    offset(target) {
        let index = 0;
        let cur = this.head;
        while (cur != null) {
            if (cur === target) {
                return index;
            }
            index += cur.length();
            cur = cur.next;
        }
        return -1;
    }
    remove(node) {
        if (!this.contains(node)) {
            return;
        }
        if (node.prev != null) {
            node.prev.next = node.next;
        }
        if (node.next != null) {
            node.next.prev = node.prev;
        }
        if (node === this.head) {
            this.head = node.next;
        }
        if (node === this.tail) {
            this.tail = node.prev;
        }
        this.length -= 1;
    }
    iterator(curNode = this.head) {
        // TODO use yield when we can
        return () => {
            const ret = curNode;
            if (curNode != null) {
                curNode = curNode.next;
            }
            return ret;
        };
    }
    find(index, inclusive = false) {
        const next = this.iterator();
        let cur = next();
        while (cur) {
            const length = cur.length();
            if (index < length ||
                (inclusive &&
                    index === length &&
                    (cur.next == null || cur.next.length() !== 0))) {
                return [cur, index];
            }
            index -= length;
            cur = next();
        }
        return [null, 0];
    }
    forEach(callback) {
        const next = this.iterator();
        let cur = next();
        while (cur) {
            callback(cur);
            cur = next();
        }
    }
    forEachAt(index, length, callback) {
        if (length <= 0) {
            return;
        }
        const [startNode, offset] = this.find(index);
        let curIndex = index - offset;
        const next = this.iterator(startNode);
        let cur = next();
        while (cur && curIndex < index + length) {
            const curLength = cur.length();
            if (index > curIndex) {
                callback(cur, index - curIndex, Math.min(length, curIndex + curLength - index));
            }
            else {
                callback(cur, 0, Math.min(curLength, index + length - curIndex));
            }
            curIndex += curLength;
            cur = next();
        }
    }
    map(callback) {
        return this.reduce((memo, cur) => {
            memo.push(callback(cur));
            return memo;
        }, []);
    }
    reduce(callback, memo) {
        const next = this.iterator();
        let cur = next();
        while (cur) {
            memo = callback(memo, cur);
            cur = next();
        }
        return memo;
    }
}
/* harmony default export */ var linked_list = (LinkedList);

// CONCATENATED MODULE: ./node_modules/parchment/src/error.ts
class ParchmentError extends Error {
    constructor(message) {
        message = '[Parchment] ' + message;
        super(message);
        this.message = message;
        this.name = this.constructor.name;
    }
}

// CONCATENATED MODULE: ./node_modules/parchment/src/registry.ts


class registry_Registry {
    constructor() {
        this.attributes = {};
        this.classes = {};
        this.tags = {};
        this.types = {};
    }
    static find(node, bubble = false) {
        if (node == null) {
            return null;
        }
        if (this.blots.has(node)) {
            return this.blots.get(node) || null;
        }
        if (bubble) {
            return this.find(node.parentNode, bubble);
        }
        return null;
    }
    create(scroll, input, value) {
        const match = this.query(input);
        if (match == null) {
            throw new ParchmentError(`Unable to create ${input} blot`);
        }
        const blotClass = match;
        const node = 
        // @ts-ignore
        input instanceof Node || input.nodeType === Node.TEXT_NODE
            ? input
            : blotClass.create(value);
        const blot = new blotClass(scroll, node, value);
        registry_Registry.blots.set(blot.domNode, blot);
        return blot;
    }
    find(node, bubble = false) {
        return registry_Registry.find(node, bubble);
    }
    query(query, scope = src_scope.ANY) {
        let match;
        if (typeof query === 'string') {
            match = this.types[query] || this.attributes[query];
            // @ts-ignore
        }
        else if (query instanceof Text || query.nodeType === Node.TEXT_NODE) {
            match = this.types.text;
        }
        else if (typeof query === 'number') {
            if (query & src_scope.LEVEL & src_scope.BLOCK) {
                match = this.types.block;
            }
            else if (query & src_scope.LEVEL & src_scope.INLINE) {
                match = this.types.inline;
            }
        }
        else if (query instanceof HTMLElement) {
            const names = (query.getAttribute('class') || '').split(/\s+/);
            names.some(name => {
                match = this.classes[name];
                if (match) {
                    return true;
                }
                return false;
            });
            match = match || this.tags[query.tagName];
        }
        if (match == null) {
            return null;
        }
        // @ts-ignore
        if (scope & src_scope.LEVEL & match.scope && scope & src_scope.TYPE & match.scope) {
            return match;
        }
        return null;
    }
    register(...definitions) {
        if (definitions.length > 1) {
            return definitions.map(d => {
                return this.register(d);
            });
        }
        const definition = definitions[0];
        if (typeof definition.blotName !== 'string' &&
            typeof definition.attrName !== 'string') {
            throw new ParchmentError('Invalid definition');
        }
        else if (definition.blotName === 'abstract') {
            throw new ParchmentError('Cannot register abstract class');
        }
        this.types[definition.blotName || definition.attrName] = definition;
        if (typeof definition.keyName === 'string') {
            this.attributes[definition.keyName] = definition;
        }
        else {
            if (definition.className != null) {
                this.classes[definition.className] = definition;
            }
            if (definition.tagName != null) {
                if (Array.isArray(definition.tagName)) {
                    definition.tagName = definition.tagName.map((tagName) => {
                        return tagName.toUpperCase();
                    });
                }
                else {
                    definition.tagName = definition.tagName.toUpperCase();
                }
                const tagNames = Array.isArray(definition.tagName)
                    ? definition.tagName
                    : [definition.tagName];
                tagNames.forEach((tag) => {
                    if (this.tags[tag] == null || definition.className == null) {
                        this.tags[tag] = definition;
                    }
                });
            }
        }
        return definition;
    }
}
registry_Registry.blots = new WeakMap();

// CONCATENATED MODULE: ./node_modules/parchment/src/blot/abstract/shadow.ts



class shadow_ShadowBlot {
    constructor(scroll, domNode) {
        this.scroll = scroll;
        this.domNode = domNode;
        registry_Registry.blots.set(domNode, this);
        this.prev = null;
        this.next = null;
    }
    static create(value) {
        if (this.tagName == null) {
            throw new ParchmentError('Blot definition missing tagName');
        }
        let node;
        if (Array.isArray(this.tagName)) {
            if (typeof value === 'string') {
                value = value.toUpperCase();
                if (parseInt(value, 10).toString() === value) {
                    value = parseInt(value, 10);
                }
            }
            if (typeof value === 'number') {
                node = document.createElement(this.tagName[value - 1]);
            }
            else if (this.tagName.indexOf(value) > -1) {
                node = document.createElement(value);
            }
            else {
                node = document.createElement(this.tagName[0]);
            }
        }
        else {
            node = document.createElement(this.tagName);
        }
        if (this.className) {
            node.classList.add(this.className);
        }
        return node;
    }
    // Hack for accessing inherited static methods
    get statics() {
        return this.constructor;
    }
    attach() {
        // Nothing to do
    }
    clone() {
        const domNode = this.domNode.cloneNode(false);
        return this.scroll.create(domNode);
    }
    detach() {
        if (this.parent != null) {
            this.parent.removeChild(this);
        }
        registry_Registry.blots.delete(this.domNode);
    }
    deleteAt(index, length) {
        const blot = this.isolate(index, length);
        blot.remove();
    }
    formatAt(index, length, name, value) {
        const blot = this.isolate(index, length);
        if (this.scroll.query(name, src_scope.BLOT) != null && value) {
            blot.wrap(name, value);
        }
        else if (this.scroll.query(name, src_scope.ATTRIBUTE) != null) {
            const parent = this.scroll.create(this.statics.scope);
            blot.wrap(parent);
            parent.format(name, value);
        }
    }
    insertAt(index, value, def) {
        const blot = def == null
            ? this.scroll.create('text', value)
            : this.scroll.create(value, def);
        const ref = this.split(index);
        this.parent.insertBefore(blot, ref || undefined);
    }
    isolate(index, length) {
        const target = this.split(index);
        if (target == null) {
            throw new Error('Attempt to isolate at end');
        }
        target.split(length);
        return target;
    }
    length() {
        return 1;
    }
    offset(root = this.parent) {
        if (this.parent == null || this === root) {
            return 0;
        }
        return this.parent.children.offset(this) + this.parent.offset(root);
    }
    optimize(_context) {
        if (this.statics.requiredContainer &&
            !(this.parent instanceof this.statics.requiredContainer)) {
            this.wrap(this.statics.requiredContainer.blotName);
        }
    }
    remove() {
        if (this.domNode.parentNode != null) {
            this.domNode.parentNode.removeChild(this.domNode);
        }
        this.detach();
    }
    replaceWith(name, value) {
        const replacement = typeof name === 'string' ? this.scroll.create(name, value) : name;
        if (this.parent != null) {
            this.parent.insertBefore(replacement, this.next || undefined);
            this.remove();
        }
        return replacement;
    }
    split(index, _force) {
        return index === 0 ? this : this.next;
    }
    update(_mutations, _context) {
        // Nothing to do by default
    }
    wrap(name, value) {
        const wrapper = typeof name === 'string'
            ? this.scroll.create(name, value)
            : name;
        if (this.parent != null) {
            this.parent.insertBefore(wrapper, this.next || undefined);
        }
        if (typeof wrapper.appendChild !== 'function') {
            throw new ParchmentError(`Cannot wrap ${name}`);
        }
        wrapper.appendChild(this);
        return wrapper;
    }
}
shadow_ShadowBlot.blotName = 'abstract';
/* harmony default export */ var shadow = (shadow_ShadowBlot);

// CONCATENATED MODULE: ./node_modules/parchment/src/blot/abstract/parent.ts




class parent_ParentBlot extends shadow {
    constructor(scroll, domNode) {
        super(scroll, domNode);
        this.uiNode = null;
        this.build();
    }
    appendChild(other) {
        this.insertBefore(other);
    }
    attach() {
        super.attach();
        this.children.forEach(child => {
            child.attach();
        });
    }
    attachUI(node) {
        if (this.uiNode != null) {
            this.uiNode.remove();
        }
        this.uiNode = node;
        if (parent_ParentBlot.uiClass) {
            this.uiNode.classList.add(parent_ParentBlot.uiClass);
        }
        this.uiNode.setAttribute('contenteditable', 'false');
        this.domNode.insertBefore(this.uiNode, this.domNode.firstChild);
    }
    build() {
        this.children = new linked_list();
        // Need to be reversed for if DOM nodes already in order
        Array.from(this.domNode.childNodes)
            .filter((node) => node !== this.uiNode)
            .reverse()
            .forEach((node) => {
            try {
                const child = makeAttachedBlot(node, this.scroll);
                this.insertBefore(child, this.children.head || undefined);
            }
            catch (err) {
                if (err instanceof ParchmentError) {
                    return;
                }
                else {
                    throw err;
                }
            }
        });
    }
    deleteAt(index, length) {
        if (index === 0 && length === this.length()) {
            return this.remove();
        }
        this.children.forEachAt(index, length, (child, offset, childLength) => {
            child.deleteAt(offset, childLength);
        });
    }
    descendant(criteria, index = 0) {
        const [child, offset] = this.children.find(index);
        if ((criteria.blotName == null && criteria(child)) ||
            (criteria.blotName != null && child instanceof criteria)) {
            return [child, offset];
        }
        else if (child instanceof parent_ParentBlot) {
            return child.descendant(criteria, offset);
        }
        else {
            return [null, -1];
        }
    }
    descendants(criteria, index = 0, length = Number.MAX_VALUE) {
        let descendants = [];
        let lengthLeft = length;
        this.children.forEachAt(index, length, (child, childIndex, childLength) => {
            if ((criteria.blotName == null && criteria(child)) ||
                (criteria.blotName != null && child instanceof criteria)) {
                descendants.push(child);
            }
            if (child instanceof parent_ParentBlot) {
                descendants = descendants.concat(child.descendants(criteria, childIndex, lengthLeft));
            }
            lengthLeft -= childLength;
        });
        return descendants;
    }
    detach() {
        this.children.forEach(child => {
            child.detach();
        });
        super.detach();
    }
    enforceAllowedChildren() {
        let done = false;
        this.children.forEach((child) => {
            if (done) {
                return;
            }
            const allowed = this.statics.allowedChildren.some((def) => child instanceof def);
            if (allowed) {
                return;
            }
            if (child.statics.scope === src_scope.BLOCK_BLOT) {
                if (child.next != null) {
                    this.splitAfter(child);
                }
                if (child.prev != null) {
                    this.splitAfter(child.prev);
                }
                child.parent.unwrap();
                done = true;
            }
            else if (child instanceof parent_ParentBlot) {
                child.unwrap();
            }
            else {
                child.remove();
            }
        });
    }
    formatAt(index, length, name, value) {
        this.children.forEachAt(index, length, (child, offset, childLength) => {
            child.formatAt(offset, childLength, name, value);
        });
    }
    insertAt(index, value, def) {
        const [child, offset] = this.children.find(index);
        if (child) {
            child.insertAt(offset, value, def);
        }
        else {
            const blot = def == null
                ? this.scroll.create('text', value)
                : this.scroll.create(value, def);
            this.appendChild(blot);
        }
    }
    insertBefore(childBlot, refBlot) {
        if (childBlot.parent != null) {
            childBlot.parent.children.remove(childBlot);
        }
        let refDomNode = null;
        this.children.insertBefore(childBlot, refBlot || null);
        if (refBlot != null) {
            refDomNode = refBlot.domNode;
        }
        if (this.domNode.parentNode !== childBlot.domNode ||
            this.domNode.nextSibling !== refDomNode) {
            this.domNode.insertBefore(childBlot.domNode, refDomNode);
        }
        childBlot.parent = this;
        childBlot.attach();
    }
    length() {
        return this.children.reduce((memo, child) => {
            return memo + child.length();
        }, 0);
    }
    moveChildren(targetParent, refNode) {
        this.children.forEach(child => {
            targetParent.insertBefore(child, refNode);
        });
    }
    optimize(context) {
        super.optimize(context);
        this.enforceAllowedChildren();
        if (this.uiNode != null && this.uiNode !== this.domNode.firstChild) {
            this.domNode.insertBefore(this.uiNode, this.domNode.firstChild);
        }
        if (this.children.length === 0) {
            if (this.statics.defaultChild != null) {
                const child = this.scroll.create(this.statics.defaultChild.blotName);
                this.appendChild(child);
                // TODO double check if necessary
                // child.optimize(context);
            }
            else {
                this.remove();
            }
        }
    }
    path(index, inclusive = false) {
        const [child, offset] = this.children.find(index, inclusive);
        const position = [[this, index]];
        if (child instanceof parent_ParentBlot) {
            return position.concat(child.path(offset, inclusive));
        }
        else if (child != null) {
            position.push([child, offset]);
        }
        return position;
    }
    removeChild(child) {
        this.children.remove(child);
    }
    replaceWith(name, value) {
        const replacement = typeof name === 'string' ? this.scroll.create(name, value) : name;
        if (replacement instanceof parent_ParentBlot) {
            this.moveChildren(replacement);
        }
        return super.replaceWith(replacement);
    }
    split(index, force = false) {
        if (!force) {
            if (index === 0) {
                return this;
            }
            if (index === this.length()) {
                return this.next;
            }
        }
        const after = this.clone();
        if (this.parent) {
            this.parent.insertBefore(after, this.next || undefined);
        }
        this.children.forEachAt(index, this.length(), (child, offset, _length) => {
            const split = child.split(offset, force);
            if (split != null) {
                after.appendChild(split);
            }
        });
        return after;
    }
    splitAfter(child) {
        const after = this.clone();
        while (child.next != null) {
            after.appendChild(child.next);
        }
        if (this.parent) {
            this.parent.insertBefore(after, this.next || undefined);
        }
        return after;
    }
    unwrap() {
        if (this.parent) {
            this.moveChildren(this.parent, this.next || undefined);
        }
        this.remove();
    }
    update(mutations, _context) {
        const addedNodes = [];
        const removedNodes = [];
        mutations.forEach(mutation => {
            if (mutation.target === this.domNode && mutation.type === 'childList') {
                addedNodes.push.apply(addedNodes, mutation.addedNodes);
                removedNodes.push.apply(removedNodes, mutation.removedNodes);
            }
        });
        removedNodes.forEach((node) => {
            // Check node has actually been removed
            // One exception is Chrome does not immediately remove IFRAMEs
            // from DOM but MutationRecord is correct in its reported removal
            if (node.parentNode != null &&
                // @ts-ignore
                node.tagName !== 'IFRAME' &&
                document.body.compareDocumentPosition(node) &
                    Node.DOCUMENT_POSITION_CONTAINED_BY) {
                return;
            }
            const blot = this.scroll.find(node);
            if (blot == null) {
                return;
            }
            if (blot.domNode.parentNode == null ||
                blot.domNode.parentNode === this.domNode) {
                blot.detach();
            }
        });
        addedNodes
            .filter(node => {
            return node.parentNode === this.domNode || node === this.uiNode;
        })
            .sort((a, b) => {
            if (a === b) {
                return 0;
            }
            if (a.compareDocumentPosition(b) & Node.DOCUMENT_POSITION_FOLLOWING) {
                return 1;
            }
            return -1;
        })
            .forEach(node => {
            let refBlot = null;
            if (node.nextSibling != null) {
                refBlot = this.scroll.find(node.nextSibling);
            }
            const blot = makeAttachedBlot(node, this.scroll);
            if (blot.next !== refBlot || blot.next == null) {
                if (blot.parent != null) {
                    blot.parent.removeChild(this);
                }
                this.insertBefore(blot, refBlot || undefined);
            }
        });
        this.enforceAllowedChildren();
    }
}
parent_ParentBlot.uiClass = '';
function makeAttachedBlot(node, scroll) {
    let blot = scroll.find(node);
    if (blot == null) {
        try {
            blot = scroll.create(node);
        }
        catch (e) {
            blot = scroll.create(src_scope.INLINE);
            Array.from(node.childNodes).forEach((child) => {
                // @ts-ignore
                blot.domNode.appendChild(child);
            });
            if (node.parentNode) {
                node.parentNode.replaceChild(blot.domNode, node);
            }
            blot.attach();
        }
    }
    return blot;
}
/* harmony default export */ var abstract_parent = (parent_ParentBlot);

// CONCATENATED MODULE: ./node_modules/parchment/src/blot/abstract/container.ts


class container_ContainerBlot extends abstract_parent {
    checkMerge() {
        return (this.next !== null && this.next.statics.blotName === this.statics.blotName);
    }
    deleteAt(index, length) {
        super.deleteAt(index, length);
        this.enforceAllowedChildren();
    }
    formatAt(index, length, name, value) {
        super.formatAt(index, length, name, value);
        this.enforceAllowedChildren();
    }
    insertAt(index, value, def) {
        super.insertAt(index, value, def);
        this.enforceAllowedChildren();
    }
    optimize(context) {
        super.optimize(context);
        if (this.children.length > 0 && this.next != null && this.checkMerge()) {
            this.next.moveChildren(this);
            this.next.remove();
        }
    }
}
container_ContainerBlot.blotName = 'container';
container_ContainerBlot.scope = src_scope.BLOCK_BLOT;
/* harmony default export */ var abstract_container = (container_ContainerBlot);

// CONCATENATED MODULE: ./node_modules/parchment/src/blot/abstract/leaf.ts


class leaf_LeafBlot extends shadow {
    static value(_domNode) {
        return true;
    }
    index(node, offset) {
        if (this.domNode === node ||
            this.domNode.compareDocumentPosition(node) &
                Node.DOCUMENT_POSITION_CONTAINED_BY) {
            return Math.min(offset, 1);
        }
        return -1;
    }
    position(index, _inclusive) {
        const childNodes = Array.from(this.parent.domNode.childNodes);
        let offset = childNodes.indexOf(this.domNode);
        if (index > 0) {
            offset += 1;
        }
        return [this.parent.domNode, offset];
    }
    value() {
        return {
            [this.statics.blotName]: this.statics.value(this.domNode) || true,
        };
    }
}
leaf_LeafBlot.scope = src_scope.INLINE_BLOT;
/* harmony default export */ var abstract_leaf = (leaf_LeafBlot);

// CONCATENATED MODULE: ./node_modules/parchment/src/attributor/attributor.ts

class attributor_Attributor {
    static keys(node) {
        return Array.from(node.attributes).map((item) => item.name);
    }
    constructor(attrName, keyName, options = {}) {
        this.attrName = attrName;
        this.keyName = keyName;
        const attributeBit = src_scope.TYPE & src_scope.ATTRIBUTE;
        this.scope =
            options.scope != null
                ? // Ignore type bits, force attribute bit
                    (options.scope & src_scope.LEVEL) | attributeBit
                : src_scope.ATTRIBUTE;
        if (options.whitelist != null) {
            this.whitelist = options.whitelist;
        }
    }
    add(node, value) {
        if (!this.canAdd(node, value)) {
            return false;
        }
        node.setAttribute(this.keyName, value);
        return true;
    }
    canAdd(_node, value) {
        if (this.whitelist == null) {
            return true;
        }
        if (typeof value === 'string') {
            return this.whitelist.indexOf(value.replace(/["']/g, '')) > -1;
        }
        else {
            return this.whitelist.indexOf(value) > -1;
        }
    }
    remove(node) {
        node.removeAttribute(this.keyName);
    }
    value(node) {
        const value = node.getAttribute(this.keyName);
        if (this.canAdd(node, value) && value) {
            return value;
        }
        return '';
    }
}

// CONCATENATED MODULE: ./node_modules/parchment/src/attributor/class.ts

function class_match(node, prefix) {
    const className = node.getAttribute('class') || '';
    return className
        .split(/\s+/)
        .filter(name => name.indexOf(`${prefix}-`) === 0);
}
class class_ClassAttributor extends attributor_Attributor {
    static keys(node) {
        return (node.getAttribute('class') || '').split(/\s+/).map(name => name
            .split('-')
            .slice(0, -1)
            .join('-'));
    }
    add(node, value) {
        if (!this.canAdd(node, value)) {
            return false;
        }
        this.remove(node);
        node.classList.add(`${this.keyName}-${value}`);
        return true;
    }
    remove(node) {
        const matches = class_match(node, this.keyName);
        matches.forEach(name => {
            node.classList.remove(name);
        });
        if (node.classList.length === 0) {
            node.removeAttribute('class');
        }
    }
    value(node) {
        const result = class_match(node, this.keyName)[0] || '';
        const value = result.slice(this.keyName.length + 1); // +1 for hyphen
        return this.canAdd(node, value) ? value : '';
    }
}
/* harmony default export */ var attributor_class = (class_ClassAttributor);

// CONCATENATED MODULE: ./node_modules/parchment/src/attributor/style.ts

function camelize(name) {
    const parts = name.split('-');
    const rest = parts
        .slice(1)
        .map((part) => part[0].toUpperCase() + part.slice(1))
        .join('');
    return parts[0] + rest;
}
class style_StyleAttributor extends attributor_Attributor {
    static keys(node) {
        return (node.getAttribute('style') || '').split(';').map(value => {
            const arr = value.split(':');
            return arr[0].trim();
        });
    }
    add(node, value) {
        if (!this.canAdd(node, value)) {
            return false;
        }
        // @ts-ignore
        node.style[camelize(this.keyName)] = value;
        return true;
    }
    remove(node) {
        // @ts-ignore
        node.style[camelize(this.keyName)] = '';
        if (!node.getAttribute('style')) {
            node.removeAttribute('style');
        }
    }
    value(node) {
        // @ts-ignore
        const value = node.style[camelize(this.keyName)];
        return this.canAdd(node, value) ? value : '';
    }
}
/* harmony default export */ var attributor_style = (style_StyleAttributor);

// CONCATENATED MODULE: ./node_modules/parchment/src/attributor/store.ts





class store_AttributorStore {
    constructor(domNode) {
        this.attributes = {};
        this.domNode = domNode;
        this.build();
    }
    attribute(attribute, value) {
        // verb
        if (value) {
            if (attribute.add(this.domNode, value)) {
                if (attribute.value(this.domNode) != null) {
                    this.attributes[attribute.attrName] = attribute;
                }
                else {
                    delete this.attributes[attribute.attrName];
                }
            }
        }
        else {
            attribute.remove(this.domNode);
            delete this.attributes[attribute.attrName];
        }
    }
    build() {
        this.attributes = {};
        const blot = registry_Registry.find(this.domNode);
        if (blot == null) {
            return;
        }
        const attributes = attributor_Attributor.keys(this.domNode);
        const classes = attributor_class.keys(this.domNode);
        const styles = attributor_style.keys(this.domNode);
        attributes
            .concat(classes)
            .concat(styles)
            .forEach(name => {
            const attr = blot.scroll.query(name, src_scope.ATTRIBUTE);
            if (attr instanceof attributor_Attributor) {
                this.attributes[attr.attrName] = attr;
            }
        });
    }
    copy(target) {
        Object.keys(this.attributes).forEach(key => {
            const value = this.attributes[key].value(this.domNode);
            target.format(key, value);
        });
    }
    move(target) {
        this.copy(target);
        Object.keys(this.attributes).forEach(key => {
            this.attributes[key].remove(this.domNode);
        });
        this.attributes = {};
    }
    values() {
        return Object.keys(this.attributes).reduce((attributes, name) => {
            attributes[name] = this.attributes[name].value(this.domNode);
            return attributes;
        }, {});
    }
}
/* harmony default export */ var store = (store_AttributorStore);

// CONCATENATED MODULE: ./node_modules/parchment/src/blot/inline.ts





// Shallow object comparison
function isEqual(obj1, obj2) {
    if (Object.keys(obj1).length !== Object.keys(obj2).length) {
        return false;
    }
    // @ts-ignore
    for (const prop in obj1) {
        // @ts-ignore
        if (obj1[prop] !== obj2[prop]) {
            return false;
        }
    }
    return true;
}
class inline_InlineBlot extends abstract_parent {
    constructor(scroll, domNode) {
        super(scroll, domNode);
        this.attributes = new store(this.domNode);
    }
    static formats(domNode, scroll) {
        const match = scroll.query(inline_InlineBlot.blotName);
        if (match != null &&
            domNode.tagName === match.tagName) {
            return undefined;
        }
        else if (typeof this.tagName === 'string') {
            return true;
        }
        else if (Array.isArray(this.tagName)) {
            return domNode.tagName.toLowerCase();
        }
        return undefined;
    }
    format(name, value) {
        if (name === this.statics.blotName && !value) {
            this.children.forEach(child => {
                if (!(child instanceof inline_InlineBlot)) {
                    child = child.wrap(inline_InlineBlot.blotName, true);
                }
                this.attributes.copy(child);
            });
            this.unwrap();
        }
        else {
            const format = this.scroll.query(name, src_scope.INLINE);
            if (format == null) {
                return;
            }
            if (format instanceof attributor_Attributor) {
                this.attributes.attribute(format, value);
            }
            else if (value &&
                (name !== this.statics.blotName || this.formats()[name] !== value)) {
                this.replaceWith(name, value);
            }
        }
    }
    formats() {
        const formats = this.attributes.values();
        const format = this.statics.formats(this.domNode, this.scroll);
        if (format != null) {
            formats[this.statics.blotName] = format;
        }
        return formats;
    }
    formatAt(index, length, name, value) {
        if (this.formats()[name] != null ||
            this.scroll.query(name, src_scope.ATTRIBUTE)) {
            const blot = this.isolate(index, length);
            blot.format(name, value);
        }
        else {
            super.formatAt(index, length, name, value);
        }
    }
    optimize(context) {
        super.optimize(context);
        const formats = this.formats();
        if (Object.keys(formats).length === 0) {
            return this.unwrap(); // unformatted span
        }
        const next = this.next;
        if (next instanceof inline_InlineBlot &&
            next.prev === this &&
            isEqual(formats, next.formats())) {
            next.moveChildren(this);
            next.remove();
        }
    }
    replaceWith(name, value) {
        const replacement = super.replaceWith(name, value);
        this.attributes.copy(replacement);
        return replacement;
    }
    update(mutations, context) {
        super.update(mutations, context);
        const attributeChanged = mutations.some(mutation => mutation.target === this.domNode && mutation.type === 'attributes');
        if (attributeChanged) {
            this.attributes.build();
        }
    }
    wrap(name, value) {
        const wrapper = super.wrap(name, value);
        if (wrapper instanceof inline_InlineBlot) {
            this.attributes.move(wrapper);
        }
        return wrapper;
    }
}
inline_InlineBlot.allowedChildren = [inline_InlineBlot, abstract_leaf];
inline_InlineBlot.blotName = 'inline';
inline_InlineBlot.scope = src_scope.INLINE_BLOT;
inline_InlineBlot.tagName = 'SPAN';
/* harmony default export */ var inline = (inline_InlineBlot);

// CONCATENATED MODULE: ./node_modules/parchment/src/blot/block.ts






class block_BlockBlot extends abstract_parent {
    constructor(scroll, domNode) {
        super(scroll, domNode);
        this.attributes = new store(this.domNode);
    }
    static formats(domNode, scroll) {
        const match = scroll.query(block_BlockBlot.blotName);
        if (match != null &&
            domNode.tagName === match.tagName) {
            return undefined;
        }
        else if (typeof this.tagName === 'string') {
            return true;
        }
        else if (Array.isArray(this.tagName)) {
            return domNode.tagName.toLowerCase();
        }
    }
    format(name, value) {
        const format = this.scroll.query(name, src_scope.BLOCK);
        if (format == null) {
            return;
        }
        else if (format instanceof attributor_Attributor) {
            this.attributes.attribute(format, value);
        }
        else if (name === this.statics.blotName && !value) {
            this.replaceWith(block_BlockBlot.blotName);
        }
        else if (value &&
            (name !== this.statics.blotName || this.formats()[name] !== value)) {
            this.replaceWith(name, value);
        }
    }
    formats() {
        const formats = this.attributes.values();
        const format = this.statics.formats(this.domNode, this.scroll);
        if (format != null) {
            formats[this.statics.blotName] = format;
        }
        return formats;
    }
    formatAt(index, length, name, value) {
        if (this.scroll.query(name, src_scope.BLOCK) != null) {
            this.format(name, value);
        }
        else {
            super.formatAt(index, length, name, value);
        }
    }
    insertAt(index, value, def) {
        if (def == null || this.scroll.query(value, src_scope.INLINE) != null) {
            // Insert text or inline
            super.insertAt(index, value, def);
        }
        else {
            const after = this.split(index);
            if (after != null) {
                const blot = this.scroll.create(value, def);
                after.parent.insertBefore(blot, after);
            }
            else {
                throw new Error('Attempt to insertAt after block boundaries');
            }
        }
    }
    replaceWith(name, value) {
        const replacement = super.replaceWith(name, value);
        this.attributes.copy(replacement);
        return replacement;
    }
    update(mutations, context) {
        super.update(mutations, context);
        const attributeChanged = mutations.some(mutation => mutation.target === this.domNode && mutation.type === 'attributes');
        if (attributeChanged) {
            this.attributes.build();
        }
    }
}
block_BlockBlot.blotName = 'block';
block_BlockBlot.scope = src_scope.BLOCK_BLOT;
block_BlockBlot.tagName = 'P';
block_BlockBlot.allowedChildren = [
    inline,
    block_BlockBlot,
    abstract_leaf,
];
/* harmony default export */ var blot_block = (block_BlockBlot);

// CONCATENATED MODULE: ./node_modules/parchment/src/blot/embed.ts

class embed_EmbedBlot extends abstract_leaf {
    static formats(_domNode, _scroll) {
        return undefined;
    }
    format(name, value) {
        // super.formatAt wraps, which is what we want in general,
        // but this allows subclasses to overwrite for formats
        // that just apply to particular embeds
        super.formatAt(0, this.length(), name, value);
    }
    formatAt(index, length, name, value) {
        if (index === 0 && length === this.length()) {
            this.format(name, value);
        }
        else {
            super.formatAt(index, length, name, value);
        }
    }
    formats() {
        return this.statics.formats(this.domNode, this.scroll);
    }
}
/* harmony default export */ var blot_embed = (embed_EmbedBlot);

// CONCATENATED MODULE: ./node_modules/parchment/src/blot/scroll.ts





const OBSERVER_CONFIG = {
    attributes: true,
    characterData: true,
    characterDataOldValue: true,
    childList: true,
    subtree: true,
};
const MAX_OPTIMIZE_ITERATIONS = 100;
class scroll_ScrollBlot extends abstract_parent {
    constructor(registry, node) {
        // @ts-ignore
        super(null, node);
        this.registry = registry;
        this.scroll = this;
        this.build();
        this.observer = new MutationObserver((mutations) => {
            this.update(mutations);
        });
        this.observer.observe(this.domNode, OBSERVER_CONFIG);
        this.attach();
    }
    create(input, value) {
        return this.registry.create(this, input, value);
    }
    find(node, bubble = false) {
        return this.registry.find(node, bubble);
    }
    query(query, scope = src_scope.ANY) {
        return this.registry.query(query, scope);
    }
    register(...definitions) {
        return this.registry.register(...definitions);
    }
    build() {
        if (this.scroll == null) {
            return;
        }
        super.build();
    }
    detach() {
        super.detach();
        this.observer.disconnect();
    }
    deleteAt(index, length) {
        this.update();
        if (index === 0 && length === this.length()) {
            this.children.forEach(child => {
                child.remove();
            });
        }
        else {
            super.deleteAt(index, length);
        }
    }
    formatAt(index, length, name, value) {
        this.update();
        super.formatAt(index, length, name, value);
    }
    insertAt(index, value, def) {
        this.update();
        super.insertAt(index, value, def);
    }
    optimize(mutations = [], context = {}) {
        super.optimize(context);
        const mutationsMap = context.mutationsMap || new WeakMap();
        // We must modify mutations directly, cannot make copy and then modify
        let records = Array.from(this.observer.takeRecords());
        // Array.push currently seems to be implemented by a non-tail recursive function
        // so we cannot just mutations.push.apply(mutations, this.observer.takeRecords());
        while (records.length > 0) {
            mutations.push(records.pop());
        }
        const mark = (blot, markParent = true) => {
            if (blot == null || blot === this) {
                return;
            }
            if (blot.domNode.parentNode == null) {
                return;
            }
            if (!mutationsMap.has(blot.domNode)) {
                mutationsMap.set(blot.domNode, []);
            }
            if (markParent) {
                mark(blot.parent);
            }
        };
        const optimize = (blot) => {
            // Post-order traversal
            if (!mutationsMap.has(blot.domNode)) {
                return;
            }
            if (blot instanceof abstract_parent) {
                blot.children.forEach(optimize);
            }
            mutationsMap.delete(blot.domNode);
            blot.optimize(context);
        };
        let remaining = mutations;
        for (let i = 0; remaining.length > 0; i += 1) {
            if (i >= MAX_OPTIMIZE_ITERATIONS) {
                throw new Error('[Parchment] Maximum optimize iterations reached');
            }
            remaining.forEach((mutation) => {
                const blot = this.find(mutation.target, true);
                if (blot == null) {
                    return;
                }
                if (blot.domNode === mutation.target) {
                    if (mutation.type === 'childList') {
                        mark(this.find(mutation.previousSibling, false));
                        Array.from(mutation.addedNodes).forEach((node) => {
                            const child = this.find(node, false);
                            mark(child, false);
                            if (child instanceof abstract_parent) {
                                child.children.forEach((grandChild) => {
                                    mark(grandChild, false);
                                });
                            }
                        });
                    }
                    else if (mutation.type === 'attributes') {
                        mark(blot.prev);
                    }
                }
                mark(blot);
            });
            this.children.forEach(optimize);
            remaining = Array.from(this.observer.takeRecords());
            records = remaining.slice();
            while (records.length > 0) {
                mutations.push(records.pop());
            }
        }
    }
    update(mutations, context = {}) {
        mutations = mutations || this.observer.takeRecords();
        const mutationsMap = new WeakMap();
        mutations
            .map((mutation) => {
            const blot = registry_Registry.find(mutation.target, true);
            if (blot == null) {
                return null;
            }
            if (mutationsMap.has(blot.domNode)) {
                mutationsMap.get(blot.domNode).push(mutation);
                return null;
            }
            else {
                mutationsMap.set(blot.domNode, [mutation]);
                return blot;
            }
        })
            .forEach((blot) => {
            if (blot != null && blot !== this && mutationsMap.has(blot.domNode)) {
                blot.update(mutationsMap.get(blot.domNode) || [], context);
            }
        });
        context.mutationsMap = mutationsMap;
        if (mutationsMap.has(this.domNode)) {
            super.update(mutationsMap.get(this.domNode), context);
        }
        this.optimize(mutations, context);
    }
}
scroll_ScrollBlot.blotName = 'scroll';
scroll_ScrollBlot.defaultChild = blot_block;
scroll_ScrollBlot.allowedChildren = [blot_block, abstract_container];
scroll_ScrollBlot.scope = src_scope.BLOCK_BLOT;
scroll_ScrollBlot.tagName = 'DIV';
/* harmony default export */ var blot_scroll = (scroll_ScrollBlot);

// CONCATENATED MODULE: ./node_modules/parchment/src/blot/text.ts


class text_TextBlot extends abstract_leaf {
    constructor(scroll, node) {
        super(scroll, node);
        this.text = this.statics.value(this.domNode);
    }
    static create(value) {
        return document.createTextNode(value);
    }
    static value(domNode) {
        return domNode.data;
    }
    deleteAt(index, length) {
        this.domNode.data = this.text =
            this.text.slice(0, index) + this.text.slice(index + length);
    }
    index(node, offset) {
        if (this.domNode === node) {
            return offset;
        }
        return -1;
    }
    insertAt(index, value, def) {
        if (def == null) {
            this.text = this.text.slice(0, index) + value + this.text.slice(index);
            this.domNode.data = this.text;
        }
        else {
            super.insertAt(index, value, def);
        }
    }
    length() {
        return this.text.length;
    }
    optimize(context) {
        super.optimize(context);
        this.text = this.statics.value(this.domNode);
        if (this.text.length === 0) {
            this.remove();
        }
        else if (this.next instanceof text_TextBlot && this.next.prev === this) {
            this.insertAt(this.length(), this.next.value());
            this.next.remove();
        }
    }
    position(index, _inclusive = false) {
        return [this.domNode, index];
    }
    split(index, force = false) {
        if (!force) {
            if (index === 0) {
                return this;
            }
            if (index === this.length()) {
                return this.next;
            }
        }
        const after = this.scroll.create(this.domNode.splitText(index));
        this.parent.insertBefore(after, this.next || undefined);
        this.text = this.statics.value(this.domNode);
        return after;
    }
    update(mutations, _context) {
        if (mutations.some(mutation => {
            return (mutation.type === 'characterData' && mutation.target === this.domNode);
        })) {
            this.text = this.statics.value(this.domNode);
        }
    }
    value() {
        return this.text;
    }
}
text_TextBlot.blotName = 'text';
text_TextBlot.scope = src_scope.INLINE_BLOT;
/* harmony default export */ var blot_text = (text_TextBlot);

// CONCATENATED MODULE: ./node_modules/parchment/src/parchment.ts
















// EXTERNAL MODULE: ./node_modules/extend/index.js
var extend = __webpack_require__(1);
var extend_default = /*#__PURE__*/__webpack_require__.n(extend);

// EXTERNAL MODULE: ./node_modules/clone/clone.js
var clone = __webpack_require__(2);
var clone_default = /*#__PURE__*/__webpack_require__.n(clone);

// EXTERNAL MODULE: ./node_modules/deep-equal/index.js
var deep_equal = __webpack_require__(3);
var deep_equal_default = /*#__PURE__*/__webpack_require__.n(deep_equal);

// EXTERNAL MODULE: ./node_modules/eventemitter3/index.js
var eventemitter3 = __webpack_require__(6);
var eventemitter3_default = /*#__PURE__*/__webpack_require__.n(eventemitter3);

// CONCATENATED MODULE: ./core/instances.js
/* harmony default export */ var instances = (new WeakMap());
// CONCATENATED MODULE: ./core/logger.js
var levels = ['error', 'warn', 'log', 'info'];
var level = 'warn';

function debug(method) {
  if (levels.indexOf(method) <= levels.indexOf(level)) {
    var _console;

    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    (_console = console)[method].apply(_console, args); // eslint-disable-line no-console

  }
}

function namespace(ns) {
  return levels.reduce(function (logger, method) {
    logger[method] = debug.bind(console, method, ns);
    return logger;
  }, {});
}

namespace.level = function (newLevel) {
  level = newLevel;
};

debug.level = namespace.level;
/* harmony default export */ var logger = (namespace);
// CONCATENATED MODULE: ./core/emitter.js



var emitter_debug = logger('quill:events');
var EVENTS = ['selectionchange', 'mousedown', 'mouseup', 'click'];
EVENTS.forEach(function (eventName) {
  document.addEventListener(eventName, function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    Array.from(document.querySelectorAll('.ql-container')).forEach(function (node) {
      var quill = instances.get(node);

      if (quill && quill.emitter) {
        var _quill$emitter;

        (_quill$emitter = quill.emitter).handleDOM.apply(_quill$emitter, args);
      }
    });
  });
});

class emitter_Emitter extends eventemitter3_default.a {
  constructor() {
    super();
    this.listeners = {};
    this.on('error', emitter_debug.error);
  }

  emit() {
    var _debug$log;

    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    (_debug$log = emitter_debug.log).call.apply(_debug$log, [emitter_debug].concat(args));

    super.emit.apply(this, args);
  }

  handleDOM(event) {
    for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
      args[_key3 - 1] = arguments[_key3];
    }

    (this.listeners[event.type] || []).forEach(function (_ref) {
      var node = _ref.node,
          handler = _ref.handler;

      if (event.target === node || node.contains(event.target)) {
        handler.apply(void 0, [event].concat(args));
      }
    });
  }

  listenDOM(eventName, node, handler) {
    if (!this.listeners[eventName]) {
      this.listeners[eventName] = [];
    }

    this.listeners[eventName].push({
      node: node,
      handler: handler
    });
  }

}

emitter_Emitter.events = {
  EDITOR_CHANGE: 'editor-change',
  SCROLL_BEFORE_UPDATE: 'scroll-before-update',
  SCROLL_BLOT_MOUNT: 'scroll-blot-mount',
  SCROLL_BLOT_UNMOUNT: 'scroll-blot-unmount',
  SCROLL_OPTIMIZE: 'scroll-optimize',
  SCROLL_UPDATE: 'scroll-update',
  SELECTION_CHANGE: 'selection-change',
  TEXT_CHANGE: 'text-change'
};
emitter_Emitter.sources = {
  API: 'api',
  SILENT: 'silent',
  USER: 'user'
};
/* harmony default export */ var core_emitter = (emitter_Emitter);
// CONCATENATED MODULE: ./core/selection.js
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }






var selection_debug = logger('quill:selection');

class Range {
  constructor(index) {
    var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    this.index = index;
    this.length = length;
  }

}

class selection_Selection {
  constructor(scroll, emitter) {
    var _this = this;

    this.emitter = emitter;
    this.scroll = scroll;
    this.composing = false;
    this.mouseDown = false;
    this.root = this.scroll.domNode;
    this.cursor = this.scroll.create('cursor', this); // savedRange is last non-null range

    this.savedRange = new Range(0, 0);
    this.lastRange = this.savedRange;
    this.handleComposition();
    this.handleDragging();
    this.emitter.listenDOM('selectionchange', document, function () {
      if (!_this.mouseDown && !_this.composing) {
        setTimeout(_this.update.bind(_this, core_emitter.sources.USER), 1);
      }
    });
    this.emitter.on(core_emitter.events.SCROLL_BEFORE_UPDATE, function () {
      if (!_this.hasFocus()) return;

      var native = _this.getNativeRange();

      if (native == null) return;
      if (native.start.node === _this.cursor.textNode) return; // cursor.restore() will handle

      _this.emitter.once(core_emitter.events.SCROLL_UPDATE, function () {
        try {
          if (_this.root.contains(native.start.node) && _this.root.contains(native.end.node)) {
            _this.setNativeRange(native.start.node, native.start.offset, native.end.node, native.end.offset);
          }

          _this.update(core_emitter.sources.SILENT);
        } catch (ignored) {// ignore
        }
      });
    });
    this.emitter.on(core_emitter.events.SCROLL_OPTIMIZE, function (mutations, context) {
      if (context.range) {
        var _context$range = context.range,
            startNode = _context$range.startNode,
            startOffset = _context$range.startOffset,
            endNode = _context$range.endNode,
            endOffset = _context$range.endOffset;

        _this.setNativeRange(startNode, startOffset, endNode, endOffset);

        _this.update(core_emitter.sources.SILENT);
      }
    });
    this.update(core_emitter.sources.SILENT);
  }

  handleComposition() {
    var _this2 = this;

    this.root.addEventListener('compositionstart', function () {
      _this2.composing = true;

      _this2.scroll.batchStart();
    });
    this.root.addEventListener('compositionend', function () {
      _this2.scroll.batchEnd();

      _this2.composing = false;

      if (_this2.cursor.parent) {
        var range = _this2.cursor.restore();

        if (!range) return;
        setTimeout(function () {
          _this2.setNativeRange(range.startNode, range.startOffset, range.endNode, range.endOffset);
        }, 1);
      }
    });
  }

  handleDragging() {
    var _this3 = this;

    this.emitter.listenDOM('mousedown', document.body, function () {
      _this3.mouseDown = true;
    });
    this.emitter.listenDOM('mouseup', document.body, function () {
      _this3.mouseDown = false;

      _this3.update(core_emitter.sources.USER);
    });
  }

  focus() {
    if (this.hasFocus()) return;
    this.root.focus();
    this.setRange(this.savedRange);
  }

  format(format, value) {
    this.scroll.update();
    var nativeRange = this.getNativeRange();
    if (nativeRange == null || !nativeRange.native.collapsed || this.scroll.query(format, src_scope.BLOCK)) return;

    if (nativeRange.start.node !== this.cursor.textNode) {
      var blot = this.scroll.find(nativeRange.start.node, false);
      if (blot == null) return; // TODO Give blot ability to not split

      if (blot instanceof abstract_leaf) {
        var after = blot.split(nativeRange.start.offset);
        blot.parent.insertBefore(this.cursor, after);
      } else {
        blot.insertBefore(this.cursor, nativeRange.start.node); // Should never happen
      }

      this.cursor.attach();
    }

    this.cursor.format(format, value);
    this.scroll.optimize();
    this.setNativeRange(this.cursor.textNode, this.cursor.textNode.data.length);
    this.update();
  }

  getBounds(index) {
    var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var scrollLength = this.scroll.length();
    index = Math.min(index, scrollLength - 1);
    length = Math.min(index + length, scrollLength - 1) - index;
    var node;

    var _this$scroll$leaf = this.scroll.leaf(index),
        _this$scroll$leaf2 = _slicedToArray(_this$scroll$leaf, 2),
        leaf = _this$scroll$leaf2[0],
        offset = _this$scroll$leaf2[1];

    if (leaf == null) return null;

    var _leaf$position = leaf.position(offset, true);

    var _leaf$position2 = _slicedToArray(_leaf$position, 2);

    node = _leaf$position2[0];
    offset = _leaf$position2[1];
    var range = document.createRange();

    if (length > 0) {
      range.setStart(node, offset);

      var _this$scroll$leaf3 = this.scroll.leaf(index + length);

      var _this$scroll$leaf4 = _slicedToArray(_this$scroll$leaf3, 2);

      leaf = _this$scroll$leaf4[0];
      offset = _this$scroll$leaf4[1];
      if (leaf == null) return null;

      var _leaf$position3 = leaf.position(offset, true);

      var _leaf$position4 = _slicedToArray(_leaf$position3, 2);

      node = _leaf$position4[0];
      offset = _leaf$position4[1];
      range.setEnd(node, offset);
      return range.getBoundingClientRect();
    }

    var side = 'left';
    var rect;

    if (node instanceof Text) {
      if (offset < node.data.length) {
        range.setStart(node, offset);
        range.setEnd(node, offset + 1);
      } else {
        range.setStart(node, offset - 1);
        range.setEnd(node, offset);
        side = 'right';
      }

      rect = range.getBoundingClientRect();
    } else {
      rect = leaf.domNode.getBoundingClientRect();
      if (offset > 0) side = 'right';
    }

    return {
      bottom: rect.top + rect.height,
      height: rect.height,
      left: rect[side],
      right: rect[side],
      top: rect.top,
      width: 0
    };
  }

  getNativeRange() {
    var selection = document.getSelection();
    if (selection == null || selection.rangeCount <= 0) return null;
    var nativeRange = selection.getRangeAt(0);
    if (nativeRange == null) return null;
    var range = this.normalizeNative(nativeRange);
    selection_debug.info('getNativeRange', range);
    return range;
  }

  getRange() {
    var normalized = this.getNativeRange();
    if (normalized == null) return [null, null];
    var range = this.normalizedToRange(normalized);
    return [range, normalized];
  }

  hasFocus() {
    return document.activeElement === this.root || contains(this.root, document.activeElement);
  }

  normalizedToRange(range) {
    var _this4 = this;

    var positions = [[range.start.node, range.start.offset]];

    if (!range.native.collapsed) {
      positions.push([range.end.node, range.end.offset]);
    }

    var indexes = positions.map(function (position) {
      var _position = _slicedToArray(position, 2),
          node = _position[0],
          offset = _position[1];

      var blot = _this4.scroll.find(node, true);

      var index = blot.offset(_this4.scroll);

      if (offset === 0) {
        return index;
      }

      if (blot instanceof abstract_leaf) {
        return index + blot.index(node, offset);
      }

      return index + blot.length();
    });
    var end = Math.min(Math.max.apply(Math, _toConsumableArray(indexes)), this.scroll.length() - 1);
    var start = Math.min.apply(Math, [end].concat(_toConsumableArray(indexes)));
    return new Range(start, end - start);
  }

  normalizeNative(nativeRange) {
    if (!contains(this.root, nativeRange.startContainer) || !nativeRange.collapsed && !contains(this.root, nativeRange.endContainer)) {
      return null;
    }

    var range = {
      start: {
        node: nativeRange.startContainer,
        offset: nativeRange.startOffset
      },
      end: {
        node: nativeRange.endContainer,
        offset: nativeRange.endOffset
      },
      native: nativeRange
    };
    [range.start, range.end].forEach(function (position) {
      var node = position.node,
          offset = position.offset;

      while (!(node instanceof Text) && node.childNodes.length > 0) {
        if (node.childNodes.length > offset) {
          node = node.childNodes[offset];
          offset = 0;
        } else if (node.childNodes.length === offset) {
          node = node.lastChild;

          if (node instanceof Text) {
            offset = node.data.length;
          } else if (node.childNodes.length > 0) {
            // Container case
            offset = node.childNodes.length;
          } else {
            // Embed case
            offset = node.childNodes.length + 1;
          }
        } else {
          break;
        }
      }

      position.node = node;
      position.offset = offset;
    });
    return range;
  }

  rangeToNative(range) {
    var _this5 = this;

    var indexes = range.collapsed ? [range.index] : [range.index, range.index + range.length];
    var args = [];
    var scrollLength = this.scroll.length();
    indexes.forEach(function (index, i) {
      index = Math.min(scrollLength - 1, index);

      var _this5$scroll$leaf = _this5.scroll.leaf(index),
          _this5$scroll$leaf2 = _slicedToArray(_this5$scroll$leaf, 2),
          leaf = _this5$scroll$leaf2[0],
          leafOffset = _this5$scroll$leaf2[1];

      var _leaf$position5 = leaf.position(leafOffset, i !== 0),
          _leaf$position6 = _slicedToArray(_leaf$position5, 2),
          node = _leaf$position6[0],
          offset = _leaf$position6[1];

      args.push(node, offset);
    });

    if (args.length < 2) {
      return args.concat(args);
    }

    return args;
  }

  scrollIntoView(scrollingContainer) {
    var range = this.lastRange;
    if (range == null) return;
    var bounds = this.getBounds(range.index, range.length);
    if (bounds == null) return;
    var limit = this.scroll.length() - 1;

    var _this$scroll$line = this.scroll.line(Math.min(range.index, limit)),
        _this$scroll$line2 = _slicedToArray(_this$scroll$line, 1),
        first = _this$scroll$line2[0];

    var last = first;

    if (range.length > 0) {
      var _this$scroll$line3 = this.scroll.line(Math.min(range.index + range.length, limit));

      var _this$scroll$line4 = _slicedToArray(_this$scroll$line3, 1);

      last = _this$scroll$line4[0];
    }

    if (first == null || last == null) return;
    var scrollBounds = scrollingContainer.getBoundingClientRect();

    if (bounds.top < scrollBounds.top) {
      scrollingContainer.scrollTop -= scrollBounds.top - bounds.top;
    } else if (bounds.bottom > scrollBounds.bottom) {
      scrollingContainer.scrollTop += bounds.bottom - scrollBounds.bottom;
    }
  }

  setNativeRange(startNode, startOffset) {
    var endNode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : startNode;
    var endOffset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : startOffset;
    var force = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
    selection_debug.info('setNativeRange', startNode, startOffset, endNode, endOffset);

    if (startNode != null && (this.root.parentNode == null || startNode.parentNode == null || endNode.parentNode == null)) {
      return;
    }

    var selection = document.getSelection();
    if (selection == null) return;

    if (startNode != null) {
      if (!this.hasFocus()) this.root.focus();

      var _ref = this.getNativeRange() || {},
          native = _ref.native;

      if (native == null || force || startNode !== native.startContainer || startOffset !== native.startOffset || endNode !== native.endContainer || endOffset !== native.endOffset) {
        if (startNode.tagName === 'BR') {
          startOffset = Array.from(startNode.parentNode.childNodes).indexOf(startNode);
          startNode = startNode.parentNode;
        }

        if (endNode.tagName === 'BR') {
          endOffset = Array.from(endNode.parentNode.childNodes).indexOf(endNode);
          endNode = endNode.parentNode;
        }

        var range = document.createRange();
        range.setStart(startNode, startOffset);
        range.setEnd(endNode, endOffset);
        selection.removeAllRanges();
        selection.addRange(range);
      }
    } else {
      selection.removeAllRanges();
      this.root.blur();
    }
  }

  setRange(range) {
    var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    var source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : core_emitter.sources.API;

    if (typeof force === 'string') {
      source = force;
      force = false;
    }

    selection_debug.info('setRange', range);

    if (range != null) {
      var args = this.rangeToNative(range);
      this.setNativeRange.apply(this, _toConsumableArray(args).concat([force]));
    } else {
      this.setNativeRange(null);
    }

    this.update(source);
  }

  update() {
    var source = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : core_emitter.sources.USER;
    var oldRange = this.lastRange;

    var _this$getRange = this.getRange(),
        _this$getRange2 = _slicedToArray(_this$getRange, 2),
        lastRange = _this$getRange2[0],
        nativeRange = _this$getRange2[1];

    this.lastRange = lastRange;

    if (this.lastRange != null) {
      this.savedRange = this.lastRange;
    }

    if (!deep_equal_default()(oldRange, this.lastRange)) {
      var _this$emitter;

      if (!this.composing && nativeRange != null && nativeRange.native.collapsed && nativeRange.start.node !== this.cursor.textNode) {
        var range = this.cursor.restore();

        if (range) {
          this.setNativeRange(range.startNode, range.startOffset, range.endNode, range.endOffset);
        }
      }

      var args = [core_emitter.events.SELECTION_CHANGE, clone_default()(this.lastRange), clone_default()(oldRange), source];

      (_this$emitter = this.emitter).emit.apply(_this$emitter, [core_emitter.events.EDITOR_CHANGE].concat(args));

      if (source !== core_emitter.sources.SILENT) {
        var _this$emitter2;

        (_this$emitter2 = this.emitter).emit.apply(_this$emitter2, args);
      }
    }
  }

}

function contains(parent, descendant) {
  try {
    // Firefox inserts inaccessible nodes around video elements
    descendant.parentNode; // eslint-disable-line no-unused-expressions
  } catch (e) {
    return false;
  }

  return parent.contains(descendant);
}


// CONCATENATED MODULE: ./blots/text.js


class text_Text extends blot_text {}

function escapeText(text) {
  return text.replace(/[&<>"']/g, function (s) {
    // https://lodash.com/docs#escape
    var entityMap = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#39;'
    };
    return entityMap[s];
  });
}


// CONCATENATED MODULE: ./blots/cursor.js



class cursor_Cursor extends blot_embed {
  static value() {
    return undefined;
  }

  constructor(scroll, domNode, selection) {
    super(scroll, domNode);
    this.selection = selection;
    this.textNode = document.createTextNode(cursor_Cursor.CONTENTS);
    this.domNode.appendChild(this.textNode);
    this.savedLength = 0;
  }

  detach() {
    // super.detach() will also clear domNode.__blot
    if (this.parent != null) this.parent.removeChild(this);
  }

  format(name, value) {
    if (this.savedLength !== 0) {
      super.format(name, value);
      return;
    }

    var target = this;
    var index = 0;

    while (target != null && target.statics.scope !== src_scope.BLOCK_BLOT) {
      index += target.offset(target.parent);
      target = target.parent;
    }

    if (target != null) {
      this.savedLength = cursor_Cursor.CONTENTS.length;
      target.optimize();
      target.formatAt(index, cursor_Cursor.CONTENTS.length, name, value);
      this.savedLength = 0;
    }
  }

  index(node, offset) {
    if (node === this.textNode) return 0;
    return super.index(node, offset);
  }

  length() {
    return this.savedLength;
  }

  position() {
    return [this.textNode, this.textNode.data.length];
  }

  remove() {
    super.remove();
    this.parent = null;
  }

  restore() {
    if (this.selection.composing || this.parent == null) return null;
    var range = this.selection.getNativeRange(); // Link format will insert text outside of anchor tag

    while (this.domNode.lastChild != null && this.domNode.lastChild !== this.textNode) {
      this.domNode.parentNode.insertBefore(this.domNode.lastChild, this.domNode);
    }

    var prevTextBlot = this.prev instanceof text_Text ? this.prev : null;
    var prevTextLength = prevTextBlot ? prevTextBlot.length() : 0;
    var nextTextBlot = this.next instanceof text_Text ? this.next : null;
    var nextText = nextTextBlot ? nextTextBlot.text : '';
    var textNode = this.textNode; // take text from inside this blot and reset it

    var newText = textNode.data.split(cursor_Cursor.CONTENTS).join('');
    textNode.data = cursor_Cursor.CONTENTS; // proactively merge TextBlots around cursor so that optimization
    // doesn't lose the cursor.  the reason we are here in cursor.restore
    // could be that the user clicked in prevTextBlot or nextTextBlot, or
    // the user typed something.

    var mergedTextBlot;

    if (prevTextBlot) {
      mergedTextBlot = prevTextBlot;

      if (newText || nextTextBlot) {
        prevTextBlot.insertAt(prevTextBlot.length(), newText + nextText);

        if (nextTextBlot) {
          nextTextBlot.remove();
        }
      }
    } else if (nextTextBlot) {
      mergedTextBlot = nextTextBlot;
      nextTextBlot.insertAt(0, newText);
    } else {
      var newTextNode = document.createTextNode(newText);
      mergedTextBlot = this.scroll.create(newTextNode);
      this.parent.insertBefore(mergedTextBlot, this);
    }

    this.remove();

    if (range) {
      // calculate selection to restore
      var remapOffset = function remapOffset(node, offset) {
        if (prevTextBlot && node === prevTextBlot.domNode) {
          return offset;
        }

        if (node === textNode) {
          return prevTextLength + offset - 1;
        }

        if (nextTextBlot && node === nextTextBlot.domNode) {
          return prevTextLength + newText.length + offset;
        }

        return null;
      };

      var start = remapOffset(range.start.node, range.start.offset);
      var end = remapOffset(range.end.node, range.end.offset);

      if (start !== null && end !== null) {
        return {
          startNode: mergedTextBlot.domNode,
          startOffset: start,
          endNode: mergedTextBlot.domNode,
          endOffset: end
        };
      }
    }

    return null;
  }

  update(mutations, context) {
    var _this = this;

    if (mutations.some(function (mutation) {
      return mutation.type === 'characterData' && mutation.target === _this.textNode;
    })) {
      var range = this.restore();
      if (range) context.range = range;
    }
  }

  value() {
    return '';
  }

}

cursor_Cursor.blotName = 'cursor';
cursor_Cursor.className = 'ql-cursor';
cursor_Cursor.tagName = 'span';
cursor_Cursor.CONTENTS = "\uFEFF"; // Zero width no break space

/* harmony default export */ var cursor = (cursor_Cursor);
// CONCATENATED MODULE: ./blots/break.js


class break_Break extends blot_embed {
  static value() {
    return undefined;
  }

  optimize() {
    if (this.prev || this.next) {
      this.remove();
    }
  }

  length() {
    return 0;
  }

  value() {
    return '';
  }

}

break_Break.blotName = 'break';
break_Break.tagName = 'BR';
/* harmony default export */ var blots_break = (break_Break);
// CONCATENATED MODULE: ./blots/inline.js




class inline_Inline extends inline {
  static compare(self, other) {
    var selfIndex = inline_Inline.order.indexOf(self);
    var otherIndex = inline_Inline.order.indexOf(other);

    if (selfIndex >= 0 || otherIndex >= 0) {
      return selfIndex - otherIndex;
    }

    if (self === other) {
      return 0;
    }

    if (self < other) {
      return -1;
    }

    return 1;
  }

  formatAt(index, length, name, value) {
    if (inline_Inline.compare(this.statics.blotName, name) < 0 && this.scroll.query(name, src_scope.BLOT)) {
      var blot = this.isolate(index, length);

      if (value) {
        blot.wrap(name, value);
      }
    } else {
      super.formatAt(index, length, name, value);
    }
  }

  optimize(context) {
    super.optimize(context);

    if (this.parent instanceof inline_Inline && inline_Inline.compare(this.statics.blotName, this.parent.statics.blotName) > 0) {
      var parent = this.parent.isolate(this.offset(), this.length());
      this.moveChildren(parent);
      parent.wrap(this);
    }
  }

}

inline_Inline.allowedChildren = [inline_Inline, blots_break, blot_embed, text_Text]; // Lower index means deeper in the DOM tree, since not found (-1) is for embeds

inline_Inline.order = ['cursor', 'inline', // Must be lower
'underline', 'strike', 'italic', 'bold', 'script', 'link', 'code'];
/* harmony default export */ var blots_inline = (inline_Inline);
// CONCATENATED MODULE: ./blots/block.js






var NEWLINE_LENGTH = 1;

class block_Block extends blot_block {
  constructor(scroll, domNode) {
    super(scroll, domNode);
    this.cache = {};
  }

  delta() {
    if (this.cache.delta == null) {
      this.cache.delta = blockDelta(this);
    }

    return this.cache.delta;
  }

  deleteAt(index, length) {
    super.deleteAt(index, length);
    this.cache = {};
  }

  formatAt(index, length, name, value) {
    if (length <= 0) return;

    if (this.scroll.query(name, src_scope.BLOCK)) {
      if (index + length === this.length()) {
        this.format(name, value);
      }
    } else {
      super.formatAt(index, Math.min(length, this.length() - index - 1), name, value);
    }

    this.cache = {};
  }

  insertAt(index, value, def) {
    if (def != null) {
      super.insertAt(index, value, def);
      this.cache = {};
      return;
    }

    if (value.length === 0) return;
    var lines = value.split('\n');
    var text = lines.shift();

    if (text.length > 0) {
      if (index < this.length() - 1 || this.children.tail == null) {
        super.insertAt(Math.min(index, this.length() - 1), text);
      } else {
        this.children.tail.insertAt(this.children.tail.length(), text);
      }

      this.cache = {};
    }

    var block = this;
    lines.reduce(function (lineIndex, line) {
      block = block.split(lineIndex, true);
      block.insertAt(0, line);
      return line.length;
    }, index + text.length);
  }

  insertBefore(blot, ref) {
    var head = this.children.head;
    super.insertBefore(blot, ref);

    if (head instanceof blots_break) {
      head.remove();
    }

    this.cache = {};
  }

  length() {
    if (this.cache.length == null) {
      this.cache.length = super.length() + NEWLINE_LENGTH;
    }

    return this.cache.length;
  }

  moveChildren(target, ref) {
    super.moveChildren(target, ref);
    this.cache = {};
  }

  optimize(context) {
    super.optimize(context);
    this.cache = {};
  }

  path(index) {
    return super.path(index, true);
  }

  removeChild(child) {
    super.removeChild(child);
    this.cache = {};
  }

  split(index) {
    var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    if (force && (index === 0 || index >= this.length() - NEWLINE_LENGTH)) {
      var clone = this.clone();

      if (index === 0) {
        this.parent.insertBefore(clone, this);
        return this;
      }

      this.parent.insertBefore(clone, this.next);
      return clone;
    }

    var next = super.split(index, force);
    this.cache = {};
    return next;
  }

}

block_Block.blotName = 'block';
block_Block.tagName = 'P';
block_Block.defaultChild = blots_break;
block_Block.allowedChildren = [blots_break, blots_inline, blot_embed, text_Text];

class block_BlockEmbed extends blot_embed {
  attach() {
    super.attach();
    this.attributes = new store(this.domNode);
  }

  delta() {
    return new Delta_default.a().insert(this.value(), extend_default()(this.formats(), this.attributes.values()));
  }

  format(name, value) {
    var attribute = this.scroll.query(name, src_scope.BLOCK_ATTRIBUTE);

    if (attribute != null) {
      this.attributes.attribute(attribute, value);
    }
  }

  formatAt(index, length, name, value) {
    this.format(name, value);
  }

  insertAt(index, value, def) {
    if (typeof value === 'string' && value.endsWith('\n')) {
      var block = this.scroll.create(block_Block.blotName);
      this.parent.insertBefore(block, index === 0 ? this : this.next);
      block.insertAt(0, value.slice(0, -1));
    } else {
      super.insertAt(index, value, def);
    }
  }

}

block_BlockEmbed.scope = src_scope.BLOCK_BLOT; // It is important for cursor behavior BlockEmbeds use tags that are block level elements

function blockDelta(blot) {
  return blot.descendants(abstract_leaf).reduce(function (delta, leaf) {
    if (leaf.length() === 0) {
      return delta;
    }

    return delta.insert(leaf.value(), bubbleFormats(leaf));
  }, new Delta_default.a()).insert('\n', bubbleFormats(blot));
}

function bubbleFormats(blot) {
  var formats = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  if (blot == null) return formats;

  if (typeof blot.formats === 'function') {
    formats = extend_default()(formats, blot.formats()); // exclude syntax highlighting from deltas and getFormat()

    delete formats['code-token'];
  }

  if (blot.parent == null || blot.parent.statics.blotName === 'scroll' || blot.parent.statics.scope !== blot.statics.scope) {
    return formats;
  }

  return bubbleFormats(blot.parent, formats);
}


// CONCATENATED MODULE: ./core/editor.js
function _toArray(arr) { return editor_arrayWithHoles(arr) || editor_iterableToArray(arr) || editor_nonIterableRest(); }

function editor_iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function editor_slicedToArray(arr, i) { return editor_arrayWithHoles(arr) || editor_iterableToArrayLimit(arr, i) || editor_nonIterableRest(); }

function editor_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function editor_iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function editor_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }











var ASCII = /^[ -~]*$/;

class editor_Editor {
  constructor(scroll) {
    this.scroll = scroll;
    this.delta = this.getDelta();
  }

  applyDelta(delta) {
    var _this = this;

    var consumeNextNewline = false;
    this.scroll.update();
    var scrollLength = this.scroll.length();
    this.scroll.batchStart();
    var normalizedDelta = normalizeDelta(delta);
    normalizedDelta.reduce(function (index, op) {
      var length = op.retain || op.delete || op.insert.length || 1;
      var attributes = op.attributes || {};

      if (op.insert != null) {
        if (typeof op.insert === 'string') {
          var text = op.insert;

          if (text.endsWith('\n') && consumeNextNewline) {
            consumeNextNewline = false;
            text = text.slice(0, -1);
          }

          if ((index >= scrollLength || _this.scroll.descendant(block_BlockEmbed, index)[0]) && !text.endsWith('\n')) {
            consumeNextNewline = true;
          }

          _this.scroll.insertAt(index, text);

          var _this$scroll$line = _this.scroll.line(index),
              _this$scroll$line2 = editor_slicedToArray(_this$scroll$line, 2),
              line = _this$scroll$line2[0],
              offset = _this$scroll$line2[1];

          var formats = extend_default()({}, bubbleFormats(line));

          if (line instanceof block_Block) {
            var _line$descendant = line.descendant(abstract_leaf, offset),
                _line$descendant2 = editor_slicedToArray(_line$descendant, 1),
                leaf = _line$descendant2[0];

            formats = extend_default()(formats, bubbleFormats(leaf));
          }

          attributes = Delta["AttributeMap"].diff(formats, attributes) || {};
        } else if (_typeof(op.insert) === 'object') {
          var key = Object.keys(op.insert)[0]; // There should only be one key

          if (key == null) return index;

          _this.scroll.insertAt(index, key, op.insert[key]);
        }

        scrollLength += length;
      }

      Object.keys(attributes).forEach(function (name) {
        _this.scroll.formatAt(index, length, name, attributes[name]);
      });
      return index + length;
    }, 0);
    normalizedDelta.reduce(function (index, op) {
      if (typeof op.delete === 'number') {
        _this.scroll.deleteAt(index, op.delete);

        return index;
      }

      return index + (op.retain || op.insert.length || 1);
    }, 0);
    this.scroll.batchEnd();
    this.scroll.optimize();
    return this.update(normalizedDelta);
  }

  deleteText(index, length) {
    this.scroll.deleteAt(index, length);
    return this.update(new Delta_default.a().retain(index).delete(length));
  }

  formatLine(index, length) {
    var _this2 = this;

    var formats = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    this.scroll.update();
    Object.keys(formats).forEach(function (format) {
      _this2.scroll.lines(index, Math.max(length, 1)).forEach(function (line) {
        line.format(format, formats[format]);
      });
    });
    this.scroll.optimize();
    var delta = new Delta_default.a().retain(index).retain(length, clone_default()(formats));
    return this.update(delta);
  }

  formatText(index, length) {
    var _this3 = this;

    var formats = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.keys(formats).forEach(function (format) {
      _this3.scroll.formatAt(index, length, format, formats[format]);
    });
    var delta = new Delta_default.a().retain(index).retain(length, clone_default()(formats));
    return this.update(delta);
  }

  getContents(index, length) {
    return this.delta.slice(index, index + length);
  }

  getDelta() {
    return this.scroll.lines().reduce(function (delta, line) {
      return delta.concat(line.delta());
    }, new Delta_default.a());
  }

  getFormat(index) {
    var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var lines = [];
    var leaves = [];

    if (length === 0) {
      this.scroll.path(index).forEach(function (path) {
        var _path = editor_slicedToArray(path, 1),
            blot = _path[0];

        if (blot instanceof block_Block) {
          lines.push(blot);
        } else if (blot instanceof abstract_leaf) {
          leaves.push(blot);
        }
      });
    } else {
      lines = this.scroll.lines(index, length);
      leaves = this.scroll.descendants(abstract_leaf, index, length);
    }

    var formatsArr = [lines, leaves].map(function (blots) {
      if (blots.length === 0) return {};
      var formats = bubbleFormats(blots.shift());

      while (Object.keys(formats).length > 0) {
        var blot = blots.shift();
        if (blot == null) return formats;
        formats = combineFormats(bubbleFormats(blot), formats);
      }

      return formats;
    });
    return extend_default.a.apply(extend_default.a, formatsArr);
  }

  getHTML(index, length) {
    var _this$scroll$line3 = this.scroll.line(index),
        _this$scroll$line4 = editor_slicedToArray(_this$scroll$line3, 2),
        line = _this$scroll$line4[0],
        lineOffset = _this$scroll$line4[1];

    if (line.length() >= lineOffset + length) {
      return convertHTML(line, lineOffset, length, true);
    }

    return convertHTML(this.scroll, index, length, true);
  }

  getText(index, length) {
    return this.getContents(index, length).filter(function (op) {
      return typeof op.insert === 'string';
    }).map(function (op) {
      return op.insert;
    }).join('');
  }

  insertEmbed(index, embed, value) {
    this.scroll.insertAt(index, embed, value);
    return this.update(new Delta_default.a().retain(index).insert(_defineProperty({}, embed, value)));
  }

  insertText(index, text) {
    var _this4 = this;

    var formats = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    text = text.replace(/\r\n/g, '\n').replace(/\r/g, '\n');
    this.scroll.insertAt(index, text);
    Object.keys(formats).forEach(function (format) {
      _this4.scroll.formatAt(index, text.length, format, formats[format]);
    });
    return this.update(new Delta_default.a().retain(index).insert(text, clone_default()(formats)));
  }

  isBlank() {
    if (this.scroll.children.length === 0) return true;
    if (this.scroll.children.length > 1) return false;
    var block = this.scroll.children.head;
    if (block.statics.blotName !== block_Block.blotName) return false;
    if (block.children.length > 1) return false;
    return block.children.head instanceof blots_break;
  }

  removeFormat(index, length) {
    var text = this.getText(index, length);

    var _this$scroll$line5 = this.scroll.line(index + length),
        _this$scroll$line6 = editor_slicedToArray(_this$scroll$line5, 2),
        line = _this$scroll$line6[0],
        offset = _this$scroll$line6[1];

    var suffixLength = 0;
    var suffix = new Delta_default.a();

    if (line != null) {
      suffixLength = line.length() - offset;
      suffix = line.delta().slice(offset, offset + suffixLength - 1).insert('\n');
    }

    var contents = this.getContents(index, length + suffixLength);
    var diff = contents.diff(new Delta_default.a().insert(text).concat(suffix));
    var delta = new Delta_default.a().retain(index).concat(diff);
    return this.applyDelta(delta);
  }

  update(change) {
    var mutations = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    var selectionInfo = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
    var oldDelta = this.delta;

    if (mutations.length === 1 && mutations[0].type === 'characterData' && mutations[0].target.data.match(ASCII) && this.scroll.find(mutations[0].target)) {
      // Optimization for character changes
      var textBlot = this.scroll.find(mutations[0].target);
      var formats = bubbleFormats(textBlot);
      var index = textBlot.offset(this.scroll);
      var oldValue = mutations[0].oldValue.replace(cursor.CONTENTS, '');
      var oldText = new Delta_default.a().insert(oldValue);
      var newText = new Delta_default.a().insert(textBlot.value());
      var relativeSelectionInfo = selectionInfo && {
        oldRange: shiftRange(selectionInfo.oldRange, -index),
        newRange: shiftRange(selectionInfo.newRange, -index)
      };
      var diffDelta = new Delta_default.a().retain(index).concat(oldText.diff(newText, relativeSelectionInfo));
      change = diffDelta.reduce(function (delta, op) {
        if (op.insert) {
          return delta.insert(op.insert, formats);
        }

        return delta.push(op);
      }, new Delta_default.a());
      this.delta = oldDelta.compose(change);
    } else {
      this.delta = this.getDelta();

      if (!change || !deep_equal_default()(oldDelta.compose(change), this.delta)) {
        change = oldDelta.diff(this.delta, selectionInfo);
      }
    }

    return change;
  }

}

function convertListHTML(items, lastIndent, types) {
  if (items.length === 0) {
    var _getListType = getListType(types.pop()),
        _getListType2 = editor_slicedToArray(_getListType, 1),
        _endTag = _getListType2[0];

    if (lastIndent <= 0) {
      return "</li></".concat(_endTag, ">");
    }

    return "</li></".concat(_endTag, ">").concat(convertListHTML([], lastIndent - 1, types));
  }

  var _items = _toArray(items),
      _items$ = _items[0],
      child = _items$.child,
      offset = _items$.offset,
      length = _items$.length,
      indent = _items$.indent,
      type = _items$.type,
      rest = _items.slice(1);

  var _getListType3 = getListType(type),
      _getListType4 = editor_slicedToArray(_getListType3, 2),
      tag = _getListType4[0],
      attribute = _getListType4[1];

  if (indent > lastIndent) {
    types.push(type);
    return "<".concat(tag, "><li").concat(attribute, ">").concat(convertHTML(child, offset, length)).concat(convertListHTML(rest, indent, types));
  }

  if (indent === lastIndent) {
    return "</li><li".concat(attribute, ">").concat(convertHTML(child, offset, length)).concat(convertListHTML(rest, indent, types));
  }

  var _getListType5 = getListType(types.pop()),
      _getListType6 = editor_slicedToArray(_getListType5, 1),
      endTag = _getListType6[0];

  return "</li></".concat(endTag, ">").concat(convertListHTML(items, lastIndent - 1, types));
}

function convertHTML(blot, index, length) {
  var isRoot = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

  if (typeof blot.html === 'function') {
    return blot.html(index, length);
  }

  if (blot instanceof text_Text) {
    return escapeText(blot.value().slice(index, index + length));
  }

  if (blot.children) {
    // TODO fix API
    if (blot.statics.blotName === 'list-container') {
      var items = [];
      blot.children.forEachAt(index, length, function (child, offset, childLength) {
        var formats = child.formats();
        items.push({
          child: child,
          offset: offset,
          length: childLength,
          indent: formats.indent || 0,
          type: formats.list
        });
      });
      return convertListHTML(items, -1, []);
    }

    var parts = [];
    blot.children.forEachAt(index, length, function (child, offset, childLength) {
      parts.push(convertHTML(child, offset, childLength));
    });

    if (isRoot || blot.statics.blotName === 'list') {
      return parts.join('');
    }

    var _blot$domNode = blot.domNode,
        outerHTML = _blot$domNode.outerHTML,
        innerHTML = _blot$domNode.innerHTML;

    var _outerHTML$split = outerHTML.split(">".concat(innerHTML, "<")),
        _outerHTML$split2 = editor_slicedToArray(_outerHTML$split, 2),
        start = _outerHTML$split2[0],
        end = _outerHTML$split2[1]; // TODO cleanup


    if (start === '<table') {
      return "<table style=\"border: 1px solid #000;\">".concat(parts.join(''), "<").concat(end);
    }

    return "".concat(start, ">").concat(parts.join(''), "<").concat(end);
  }

  return blot.domNode.outerHTML;
}

function combineFormats(formats, combined) {
  return Object.keys(combined).reduce(function (merged, name) {
    if (formats[name] == null) return merged;

    if (combined[name] === formats[name]) {
      merged[name] = combined[name];
    } else if (Array.isArray(combined[name])) {
      if (combined[name].indexOf(formats[name]) < 0) {
        merged[name] = combined[name].concat([formats[name]]);
      }
    } else {
      merged[name] = [combined[name], formats[name]];
    }

    return merged;
  }, {});
}

function getListType(type) {
  var tag = type === 'ordered' ? 'ol' : 'ul';

  switch (type) {
    case 'checked':
      return [tag, ' data-list="checked"'];

    case 'unchecked':
      return [tag, ' data-list="unchecked"'];

    default:
      return [tag, ''];
  }
}

function normalizeDelta(delta) {
  return delta.reduce(function (normalizedDelta, op) {
    if (typeof op.insert === 'string') {
      var text = op.insert.replace(/\r\n/g, '\n').replace(/\r/g, '\n');
      return normalizedDelta.insert(text, op.attributes);
    }

    return normalizedDelta.push(op);
  }, new Delta_default.a());
}

function shiftRange(_ref, amount) {
  var index = _ref.index,
      length = _ref.length;
  return new Range(index + amount, length);
}

/* harmony default export */ var editor = (editor_Editor);
// CONCATENATED MODULE: ./core/module.js
class Module {
  constructor(quill) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    this.quill = quill;
    this.options = options;
  }

}

Module.DEFAULTS = {};
/* harmony default export */ var core_module = (Module);
// CONCATENATED MODULE: ./core/theme.js
class Theme {
  constructor(quill, options) {
    this.quill = quill;
    this.options = options;
    this.modules = {};
  }

  init() {
    var _this = this;

    Object.keys(this.options.modules).forEach(function (name) {
      if (_this.modules[name] == null) {
        _this.addModule(name);
      }
    });
  }

  addModule(name) {
    var ModuleClass = this.quill.constructor.import("modules/".concat(name));
    this.modules[name] = new ModuleClass(this.quill, this.options.modules[name] || {});
    return this.modules[name];
  }

}

Theme.DEFAULTS = {
  modules: {}
};
Theme.themes = {
  default: Theme
};
/* harmony default export */ var theme = (Theme);
// CONCATENATED MODULE: ./core/quill.js
function quill_typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { quill_typeof = function _typeof(obj) { return typeof obj; }; } else { quill_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return quill_typeof(obj); }

function quill_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function quill_slicedToArray(arr, i) { return quill_arrayWithHoles(arr) || quill_iterableToArrayLimit(arr, i) || quill_nonIterableRest(); }

function quill_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function quill_iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function quill_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }











var quill_debug = logger('quill');
var globalRegistry = new registry_Registry();
abstract_parent.uiClass = 'ql-ui';

class quill_QuillClass {
  static debug(limit) {
    if (limit === true) {
      limit = 'log';
    }

    logger.level(limit);
  }

  static find(node) {
    return instances.get(node) || globalRegistry.find(node);
  }

  static import(name) {
    if (this.imports[name] == null) {
      quill_debug.error("Cannot import ".concat(name, ". Are you sure it was registered?"));
    }

    return this.imports[name];
  }

  static register(path, target) {
    var _this = this;

    var overwrite = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

    if (typeof path !== 'string') {
      var name = path.attrName || path.blotName;

      if (typeof name === 'string') {
        // register(Blot | Attributor, overwrite)
        this.register("formats/".concat(name), path, target);
      } else {
        Object.keys(path).forEach(function (key) {
          _this.register(key, path[key], target);
        });
      }
    } else {
      if (this.imports[path] != null && !overwrite) {
        quill_debug.warn("Overwriting ".concat(path, " with"), target);
      }

      this.imports[path] = target;

      if ((path.startsWith('blots/') || path.startsWith('formats/')) && target.blotName !== 'abstract') {
        globalRegistry.register(target);
      }

      if (typeof target.register === 'function') {
        target.register(globalRegistry);
      }
    }
  }

  constructor(container) {
    var _this2 = this;

    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    this.options = expandConfig(container, options);
    this.container = this.options.container;

    if (this.container == null) {
      return quill_debug.error('Invalid Quill container', container);
    }

    if (this.options.debug) {
      Quill.debug(this.options.debug);
    }

    var html = this.container.innerHTML.trim();
    this.container.classList.add('ql-container');
    this.container.innerHTML = '';
    instances.set(this.container, this);
    this.root = this.addContainer('ql-editor');
    this.root.addEventListener('dragstart', function (e) {
      e.preventDefault();
    });
    this.root.classList.add('ql-blank');
    this.root.setAttribute('data-gramm', false);
    this.scrollingContainer = this.options.scrollingContainer || this.root;
    this.emitter = new core_emitter();
    var ScrollBlot = this.options.registry.query(blot_scroll.blotName);
    this.scroll = new ScrollBlot(this.options.registry, this.root, {
      emitter: this.emitter
    });
    this.editor = new editor(this.scroll);
    this.selection = new selection_Selection(this.scroll, this.emitter);
    this.theme = new this.options.theme(this, this.options); // eslint-disable-line new-cap

    this.keyboard = this.theme.addModule('keyboard');
    this.clipboard = this.theme.addModule('clipboard');
    this.history = this.theme.addModule('history');
    this.uploader = this.theme.addModule('uploader');
    this.theme.init();
    this.emitter.on(core_emitter.events.EDITOR_CHANGE, function (type) {
      if (type === core_emitter.events.TEXT_CHANGE) {
        _this2.root.classList.toggle('ql-blank', _this2.editor.isBlank());
      }
    });
    this.emitter.on(core_emitter.events.SCROLL_UPDATE, function (source, mutations) {
      var oldRange = _this2.selection.lastRange;

      var _this2$selection$getR = _this2.selection.getRange(),
          _this2$selection$getR2 = quill_slicedToArray(_this2$selection$getR, 1),
          newRange = _this2$selection$getR2[0];

      var selectionInfo = oldRange && newRange ? {
        oldRange: oldRange,
        newRange: newRange
      } : undefined;
      modify.call(_this2, function () {
        return _this2.editor.update(null, mutations, selectionInfo);
      }, source);
    });
    var contents = this.clipboard.convert({
      html: "".concat(html, "<p><br></p>"),
      text: '\n'
    });
    this.setContents(contents);
    this.history.clear();

    if (this.options.placeholder) {
      this.root.setAttribute('data-placeholder', this.options.placeholder);
    }

    if (this.options.readOnly) {
      this.disable();
    }

    this.allowReadOnlyEdits = false;
  }

  addContainer(container) {
    var refNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    if (typeof container === 'string') {
      var className = container;
      container = document.createElement('div');
      container.classList.add(className);
    }

    this.container.insertBefore(container, refNode);
    return container;
  }

  blur() {
    this.selection.setRange(null);
  }

  deleteText(index, length, source) {
    var _this3 = this;

    var _overload = overload(index, length, source);

    var _overload2 = quill_slicedToArray(_overload, 4);

    index = _overload2[0];
    length = _overload2[1];
    source = _overload2[3];
    return modify.call(this, function () {
      return _this3.editor.deleteText(index, length);
    }, source, index, -1 * length);
  }

  disable() {
    this.enable(false);
  }

  editReadOnly(modifier) {
    this.allowReadOnlyEdits = true;
    var value = modifier();
    this.allowReadOnlyEdits = false;
    return value;
  }

  enable() {
    var enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
    this.scroll.enable(enabled);
    this.container.classList.toggle('ql-disabled', !enabled);
  }

  focus() {
    var scrollTop = this.scrollingContainer.scrollTop;
    this.selection.focus();
    this.scrollingContainer.scrollTop = scrollTop;
    this.scrollIntoView();
  }

  format(name, value) {
    var _this4 = this;

    var source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : core_emitter.sources.API;
    return modify.call(this, function () {
      var range = _this4.getSelection(true);

      var change = new Delta_default.a();
      if (range == null) return change;

      if (_this4.scroll.query(name, src_scope.BLOCK)) {
        change = _this4.editor.formatLine(range.index, range.length, quill_defineProperty({}, name, value));
      } else if (range.length === 0) {
        _this4.selection.format(name, value);

        return change;
      } else {
        change = _this4.editor.formatText(range.index, range.length, quill_defineProperty({}, name, value));
      }

      _this4.setSelection(range, core_emitter.sources.SILENT);

      return change;
    }, source);
  }

  formatLine(index, length, name, value, source) {
    var _this5 = this;

    var formats; // eslint-disable-next-line prefer-const

    var _overload3 = overload(index, length, name, value, source);

    var _overload4 = quill_slicedToArray(_overload3, 4);

    index = _overload4[0];
    length = _overload4[1];
    formats = _overload4[2];
    source = _overload4[3];
    return modify.call(this, function () {
      return _this5.editor.formatLine(index, length, formats);
    }, source, index, 0);
  }

  formatText(index, length, name, value, source) {
    var _this6 = this;

    var formats; // eslint-disable-next-line prefer-const

    var _overload5 = overload(index, length, name, value, source);

    var _overload6 = quill_slicedToArray(_overload5, 4);

    index = _overload6[0];
    length = _overload6[1];
    formats = _overload6[2];
    source = _overload6[3];
    return modify.call(this, function () {
      return _this6.editor.formatText(index, length, formats);
    }, source, index, 0);
  }

  getBounds(index) {
    var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var bounds;

    if (typeof index === 'number') {
      bounds = this.selection.getBounds(index, length);
    } else {
      bounds = this.selection.getBounds(index.index, index.length);
    }

    var containerBounds = this.container.getBoundingClientRect();
    return {
      bottom: bounds.bottom - containerBounds.top,
      height: bounds.height,
      left: bounds.left - containerBounds.left,
      right: bounds.right - containerBounds.left,
      top: bounds.top - containerBounds.top,
      width: bounds.width
    };
  }

  getContents() {
    var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getLength() - index;

    var _overload7 = overload(index, length);

    var _overload8 = quill_slicedToArray(_overload7, 2);

    index = _overload8[0];
    length = _overload8[1];
    return this.editor.getContents(index, length);
  }

  getFormat() {
    var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getSelection(true);
    var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

    if (typeof index === 'number') {
      return this.editor.getFormat(index, length);
    }

    return this.editor.getFormat(index.index, index.length);
  }

  getIndex(blot) {
    return blot.offset(this.scroll);
  }

  getLength() {
    return this.scroll.length();
  }

  getLeaf(index) {
    return this.scroll.leaf(index);
  }

  getLine(index) {
    return this.scroll.line(index);
  }

  getLines() {
    var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Number.MAX_VALUE;

    if (typeof index !== 'number') {
      return this.scroll.lines(index.index, index.length);
    }

    return this.scroll.lines(index, length);
  }

  getModule(name) {
    return this.theme.modules[name];
  }

  getSelection() {
    var focus = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    if (focus) this.focus();
    this.update(); // Make sure we access getRange with editor in consistent state

    return this.selection.getRange()[0];
  }

  getSemanticHTML() {
    var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getLength() - index;

    var _overload9 = overload(index, length);

    var _overload10 = quill_slicedToArray(_overload9, 2);

    index = _overload10[0];
    length = _overload10[1];
    return this.editor.getHTML(index, length);
  }

  getText() {
    var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getLength() - index;

    var _overload11 = overload(index, length);

    var _overload12 = quill_slicedToArray(_overload11, 2);

    index = _overload12[0];
    length = _overload12[1];
    return this.editor.getText(index, length);
  }

  hasFocus() {
    return this.selection.hasFocus();
  }

  insertEmbed(index, embed, value) {
    var _this7 = this;

    var source = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Quill.sources.API;
    return modify.call(this, function () {
      return _this7.editor.insertEmbed(index, embed, value);
    }, source, index);
  }

  insertText(index, text, name, value, source) {
    var _this8 = this;

    var formats; // eslint-disable-next-line prefer-const

    var _overload13 = overload(index, 0, name, value, source);

    var _overload14 = quill_slicedToArray(_overload13, 4);

    index = _overload14[0];
    formats = _overload14[2];
    source = _overload14[3];
    return modify.call(this, function () {
      return _this8.editor.insertText(index, text, formats);
    }, source, index, text.length);
  }

  isEnabled() {
    return this.scroll.isEnabled();
  }

  off() {
    var _this$emitter;

    return (_this$emitter = this.emitter).off.apply(_this$emitter, arguments);
  }

  on() {
    var _this$emitter2;

    return (_this$emitter2 = this.emitter).on.apply(_this$emitter2, arguments);
  }

  once() {
    var _this$emitter3;

    return (_this$emitter3 = this.emitter).once.apply(_this$emitter3, arguments);
  }

  removeFormat(index, length, source) {
    var _this9 = this;

    var _overload15 = overload(index, length, source);

    var _overload16 = quill_slicedToArray(_overload15, 4);

    index = _overload16[0];
    length = _overload16[1];
    source = _overload16[3];
    return modify.call(this, function () {
      return _this9.editor.removeFormat(index, length);
    }, source, index);
  }

  scrollIntoView() {
    this.selection.scrollIntoView(this.scrollingContainer);
  }

  setContents(delta) {
    var _this10 = this;

    var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : core_emitter.sources.API;
    return modify.call(this, function () {
      delta = new Delta_default.a(delta);

      var length = _this10.getLength();

      var deleted = _this10.editor.deleteText(0, length);

      var applied = _this10.editor.applyDelta(delta);

      var lastOp = applied.ops[applied.ops.length - 1];

      if (lastOp != null && typeof lastOp.insert === 'string' && lastOp.insert[lastOp.insert.length - 1] === '\n') {
        _this10.editor.deleteText(_this10.getLength() - 1, 1);

        applied.delete(1);
      }

      return deleted.compose(applied);
    }, source);
  }

  setSelection(index, length, source) {
    if (index == null) {
      this.selection.setRange(null, length || Quill.sources.API);
    } else {
      var _overload17 = overload(index, length, source);

      var _overload18 = quill_slicedToArray(_overload17, 4);

      index = _overload18[0];
      length = _overload18[1];
      source = _overload18[3];
      this.selection.setRange(new Range(Math.max(0, index), length), source);

      if (source !== core_emitter.sources.SILENT) {
        this.selection.scrollIntoView(this.scrollingContainer);
      }
    }
  }

  setText(text) {
    var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : core_emitter.sources.API;
    var delta = new Delta_default.a().insert(text);
    return this.setContents(delta, source);
  }

  update() {
    var source = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : core_emitter.sources.USER;
    var change = this.scroll.update(source); // Will update selection before selection.update() does if text changes

    this.selection.update(source); // TODO this is usually undefined

    return change;
  }

  updateContents(delta) {
    var _this11 = this;

    var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : core_emitter.sources.API;
    return modify.call(this, function () {
      delta = new Delta_default.a(delta);
      return _this11.editor.applyDelta(delta, source);
    }, source, true);
  }

}

var Quill = quill_QuillClass;
var QUILL_DEFAULTS = {
  bounds: null,
  modules: {},
  placeholder: '',
  readOnly: false,
  registry: globalRegistry,
  scrollingContainer: null,
  theme: 'default'
};
Quill.DEFAULTS = QUILL_DEFAULTS;
Quill.events = core_emitter.events;
Quill.sources = core_emitter.sources; // eslint-disable-next-line no-undef

Quill.version =  false ? undefined : "2.0.0-dev.3";
Quill.imports = {
  delta: Delta_default.a,
  parchment: parchment_namespaceObject,
  'core/module': core_module,
  'core/theme': theme
};

function expandConfig(container, userConfig) {
  userConfig = extend_default()(true, {
    container: container,
    modules: {
      clipboard: true,
      keyboard: true,
      history: true,
      uploader: true
    }
  }, userConfig);

  if (!userConfig.theme || userConfig.theme === QUILL_DEFAULTS.theme) {
    userConfig.theme = theme;
  } else {
    userConfig.theme = Quill.import("themes/".concat(userConfig.theme));

    if (userConfig.theme == null) {
      throw new Error("Invalid theme ".concat(userConfig.theme, ". Did you register it?"));
    }
  }

  var themeConfig = extend_default()(true, {}, userConfig.theme.DEFAULTS);
  [themeConfig, userConfig].forEach(function (config) {
    config.modules = config.modules || {};
    Object.keys(config.modules).forEach(function (module) {
      if (config.modules[module] === true) {
        config.modules[module] = {};
      }
    });
  });
  var moduleNames = Object.keys(themeConfig.modules).concat(Object.keys(userConfig.modules));
  var moduleConfig = moduleNames.reduce(function (config, name) {
    var moduleClass = Quill.import("modules/".concat(name));

    if (moduleClass == null) {
      quill_debug.error("Cannot load ".concat(name, " module. Are you sure you registered it?"));
    } else {
      config[name] = moduleClass.DEFAULTS || {};
    }

    return config;
  }, {}); // Special case toolbar shorthand

  if (userConfig.modules != null && userConfig.modules.toolbar && userConfig.modules.toolbar.constructor !== Object) {
    userConfig.modules.toolbar = {
      container: userConfig.modules.toolbar
    };
  }

  userConfig = extend_default()(true, {}, QUILL_DEFAULTS, {
    modules: moduleConfig
  }, themeConfig, userConfig);
  ['bounds', 'container', 'scrollingContainer'].forEach(function (key) {
    if (typeof userConfig[key] === 'string') {
      userConfig[key] = document.querySelector(userConfig[key]);
    }
  });
  userConfig.modules = Object.keys(userConfig.modules).reduce(function (config, name) {
    if (userConfig.modules[name]) {
      config[name] = userConfig.modules[name];
    }

    return config;
  }, {});
  return userConfig;
} // Handle selection preservation and TEXT_CHANGE emission
// common to modification APIs


function modify(modifier, source, index, shift) {
  if (!this.isEnabled() && source === core_emitter.sources.USER && !this.allowReadOnlyEdits) {
    return new Delta_default.a();
  }

  var range = index == null ? null : this.getSelection();
  var oldDelta = this.editor.delta;
  var change = modifier();

  if (range != null) {
    if (index === true) {
      index = range.index; // eslint-disable-line prefer-destructuring
    }

    if (shift == null) {
      range = quill_shiftRange(range, change, source);
    } else if (shift !== 0) {
      range = quill_shiftRange(range, index, shift, source);
    }

    this.setSelection(range, core_emitter.sources.SILENT);
  }

  if (change.length() > 0) {
    var _this$emitter4;

    var args = [core_emitter.events.TEXT_CHANGE, change, oldDelta, source];

    (_this$emitter4 = this.emitter).emit.apply(_this$emitter4, [core_emitter.events.EDITOR_CHANGE].concat(args));

    if (source !== core_emitter.sources.SILENT) {
      var _this$emitter5;

      (_this$emitter5 = this.emitter).emit.apply(_this$emitter5, args);
    }
  }

  return change;
}

function overload(index, length, name, value, source) {
  var formats = {};

  if (typeof index.index === 'number' && typeof index.length === 'number') {
    // Allow for throwaway end (used by insertText/insertEmbed)
    if (typeof length !== 'number') {
      source = value;
      value = name;
      name = length;
      length = index.length; // eslint-disable-line prefer-destructuring

      index = index.index; // eslint-disable-line prefer-destructuring
    } else {
      length = index.length; // eslint-disable-line prefer-destructuring

      index = index.index; // eslint-disable-line prefer-destructuring
    }
  } else if (typeof length !== 'number') {
    source = value;
    value = name;
    name = length;
    length = 0;
  } // Handle format being object, two format name/value strings or excluded


  if (quill_typeof(name) === 'object') {
    formats = name;
    source = value;
  } else if (typeof name === 'string') {
    if (value != null) {
      formats[name] = value;
    } else {
      source = name;
    }
  } // Handle optional source


  source = source || core_emitter.sources.API;
  return [index, length, formats, source];
}

function quill_shiftRange(range, index, length, source) {
  if (range == null) return null;
  var start;
  var end;

  if (index instanceof Delta_default.a) {
    var _map = [range.index, range.index + range.length].map(function (pos) {
      return index.transformPosition(pos, source !== core_emitter.sources.USER);
    });

    var _map2 = quill_slicedToArray(_map, 2);

    start = _map2[0];
    end = _map2[1];
  } else {
    var _map3 = [range.index, range.index + range.length].map(function (pos) {
      if (pos < index || pos === index && source === core_emitter.sources.USER) return pos;

      if (length >= 0) {
        return pos + length;
      }

      return Math.max(index, pos + length);
    });

    var _map4 = quill_slicedToArray(_map3, 2);

    start = _map4[0];
    end = _map4[1];
  }

  return new Range(start, end - start);
}


// CONCATENATED MODULE: ./blots/container.js


class container_Container extends abstract_container {}

/* harmony default export */ var blots_container = (container_Container);
// CONCATENATED MODULE: ./blots/embed.js


var GUARD_TEXT = "\uFEFF";

class embed_Embed extends blot_embed {
  constructor(scroll, node) {
    var _this;

    super(scroll, node);
    _this = this;
    this.contentNode = document.createElement('span');
    this.contentNode.setAttribute('contenteditable', false);
    Array.from(this.domNode.childNodes).forEach(function (childNode) {
      _this.contentNode.appendChild(childNode);
    });
    this.leftGuard = document.createTextNode(GUARD_TEXT);
    this.rightGuard = document.createTextNode(GUARD_TEXT);
    this.domNode.appendChild(this.leftGuard);
    this.domNode.appendChild(this.contentNode);
    this.domNode.appendChild(this.rightGuard);
  }

  index(node, offset) {
    if (node === this.leftGuard) return 0;
    if (node === this.rightGuard) return 1;
    return super.index(node, offset);
  }

  restore(node) {
    var range;
    var textNode;
    var text = node.data.split(GUARD_TEXT).join('');

    if (node === this.leftGuard) {
      if (this.prev instanceof text_Text) {
        var prevLength = this.prev.length();
        this.prev.insertAt(prevLength, text);
        range = {
          startNode: this.prev.domNode,
          startOffset: prevLength + text.length
        };
      } else {
        textNode = document.createTextNode(text);
        this.parent.insertBefore(this.scroll.create(textNode), this);
        range = {
          startNode: textNode,
          startOffset: text.length
        };
      }
    } else if (node === this.rightGuard) {
      if (this.next instanceof text_Text) {
        this.next.insertAt(0, text);
        range = {
          startNode: this.next.domNode,
          startOffset: text.length
        };
      } else {
        textNode = document.createTextNode(text);
        this.parent.insertBefore(this.scroll.create(textNode), this.next);
        range = {
          startNode: textNode,
          startOffset: text.length
        };
      }
    }

    node.data = GUARD_TEXT;
    return range;
  }

  update(mutations, context) {
    var _this2 = this;

    mutations.forEach(function (mutation) {
      if (mutation.type === 'characterData' && (mutation.target === _this2.leftGuard || mutation.target === _this2.rightGuard)) {
        var range = _this2.restore(mutation.target);

        if (range) context.range = range;
      }
    });
  }

}

/* harmony default export */ var blots_embed = (embed_Embed);
// CONCATENATED MODULE: ./blots/scroll.js
function scroll_slicedToArray(arr, i) { return scroll_arrayWithHoles(arr) || scroll_iterableToArrayLimit(arr, i) || scroll_nonIterableRest(); }

function scroll_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function scroll_iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function scroll_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }







function isLine(blot) {
  return blot instanceof block_Block || blot instanceof block_BlockEmbed;
}

class scroll_Scroll extends blot_scroll {
  constructor(registry, domNode, _ref) {
    var emitter = _ref.emitter;
    super(registry, domNode);
    this.emitter = emitter;
    this.batch = false;
    this.optimize();
    this.enable();
  }

  batchStart() {
    if (!Array.isArray(this.batch)) {
      this.batch = [];
    }
  }

  batchEnd() {
    var mutations = this.batch;
    this.batch = false;
    this.update(mutations);
  }

  emitMount(blot) {
    this.emitter.emit(core_emitter.events.SCROLL_BLOT_MOUNT, blot);
  }

  emitUnmount(blot) {
    this.emitter.emit(core_emitter.events.SCROLL_BLOT_UNMOUNT, blot);
  }

  deleteAt(index, length) {
    var _this$line = this.line(index),
        _this$line2 = scroll_slicedToArray(_this$line, 2),
        first = _this$line2[0],
        offset = _this$line2[1];

    var _this$line3 = this.line(index + length),
        _this$line4 = scroll_slicedToArray(_this$line3, 1),
        last = _this$line4[0];

    super.deleteAt(index, length);

    if (last != null && first !== last && offset > 0) {
      if (first instanceof block_BlockEmbed || last instanceof block_BlockEmbed) {
        this.optimize();
        return;
      }

      var ref = last.children.head instanceof blots_break ? null : last.children.head;
      first.moveChildren(last, ref);
      first.remove();
    }

    this.optimize();
  }

  enable() {
    var enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
    this.domNode.setAttribute('contenteditable', enabled);
  }

  formatAt(index, length, format, value) {
    super.formatAt(index, length, format, value);
    this.optimize();
  }

  insertAt(index, value, def) {
    if (index >= this.length()) {
      if (def == null || this.scroll.query(value, src_scope.BLOCK) == null) {
        var blot = this.scroll.create(this.statics.defaultChild.blotName);
        this.appendChild(blot);

        if (def == null && value.endsWith('\n')) {
          blot.insertAt(0, value.slice(0, -1), def);
        } else {
          blot.insertAt(0, value, def);
        }
      } else {
        var embed = this.scroll.create(value, def);
        this.appendChild(embed);
      }
    } else {
      super.insertAt(index, value, def);
    }

    this.optimize();
  }

  insertBefore(blot, ref) {
    if (blot.statics.scope === src_scope.INLINE_BLOT) {
      var wrapper = this.scroll.create(this.statics.defaultChild.blotName);
      wrapper.appendChild(blot);
      super.insertBefore(wrapper, ref);
    } else {
      super.insertBefore(blot, ref);
    }
  }

  isEnabled() {
    return this.domNode.getAttribute('contenteditable') === 'true';
  }

  leaf(index) {
    return this.path(index).pop() || [null, -1];
  }

  line(index) {
    if (index === this.length()) {
      return this.line(index - 1);
    }

    return this.descendant(isLine, index);
  }

  lines() {
    var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Number.MAX_VALUE;

    var getLines = function getLines(blot, blotIndex, blotLength) {
      var lines = [];
      var lengthLeft = blotLength;
      blot.children.forEachAt(blotIndex, blotLength, function (child, childIndex, childLength) {
        if (isLine(child)) {
          lines.push(child);
        } else if (child instanceof abstract_container) {
          lines = lines.concat(getLines(child, childIndex, lengthLeft));
        }

        lengthLeft -= childLength;
      });
      return lines;
    };

    return getLines(this, index, length);
  }

  optimize() {
    var mutations = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    if (this.batch) return;
    super.optimize(mutations, context);

    if (mutations.length > 0) {
      this.emitter.emit(core_emitter.events.SCROLL_OPTIMIZE, mutations, context);
    }
  }

  path(index) {
    return super.path(index).slice(1); // Exclude self
  }

  remove() {// Never remove self
  }

  update(mutations) {
    if (this.batch) {
      if (Array.isArray(mutations)) {
        this.batch = this.batch.concat(mutations);
      }

      return;
    }

    var source = core_emitter.sources.USER;

    if (typeof mutations === 'string') {
      source = mutations;
    }

    if (!Array.isArray(mutations)) {
      mutations = this.observer.takeRecords();
    }

    if (mutations.length > 0) {
      this.emitter.emit(core_emitter.events.SCROLL_BEFORE_UPDATE, source, mutations);
    }

    super.update(mutations.concat([])); // pass copy

    if (mutations.length > 0) {
      this.emitter.emit(core_emitter.events.SCROLL_UPDATE, source, mutations);
    }
  }

}

scroll_Scroll.blotName = 'scroll';
scroll_Scroll.className = 'ql-editor';
scroll_Scroll.tagName = 'DIV';
scroll_Scroll.defaultChild = block_Block;
scroll_Scroll.allowedChildren = [block_Block, block_BlockEmbed, blots_container];
/* harmony default export */ var blots_scroll = (scroll_Scroll);
// CONCATENATED MODULE: ./formats/align.js

var config = {
  scope: src_scope.BLOCK,
  whitelist: ['right', 'center', 'justify']
};
var AlignAttribute = new attributor_Attributor('align', 'align', config);
var AlignClass = new attributor_class('align', 'ql-align', config);
var AlignStyle = new attributor_style('align', 'text-align', config);

// CONCATENATED MODULE: ./formats/color.js


class color_ColorAttributor extends attributor_style {
  value(domNode) {
    var value = super.value(domNode);
    if (!value.startsWith('rgb(')) return value;
    value = value.replace(/^[^\d]+/, '').replace(/[^\d]+$/, '');
    var hex = value.split(',').map(function (component) {
      return "00".concat(parseInt(component, 10).toString(16)).slice(-2);
    }).join('');
    return "#".concat(hex);
  }

}

var ColorClass = new attributor_class('color', 'ql-color', {
  scope: src_scope.INLINE
});
var ColorStyle = new color_ColorAttributor('color', 'color', {
  scope: src_scope.INLINE
});

// CONCATENATED MODULE: ./formats/background.js


var BackgroundClass = new attributor_class('background', 'ql-bg', {
  scope: src_scope.INLINE
});
var BackgroundStyle = new color_ColorAttributor('background', 'background-color', {
  scope: src_scope.INLINE
});

// CONCATENATED MODULE: ./formats/code.js








class code_CodeBlockContainer extends blots_container {
  static create(value) {
    var domNode = super.create(value);
    domNode.setAttribute('spellcheck', false);
    return domNode;
  }

  html(index, length) {
    var text = this.children.map(function (child) {
      return child.domNode.innerText;
    }).join('\n').slice(index, index + length);
    return "<pre>".concat(escapeText(text), "</pre>");
  }

}

class code_CodeBlock extends block_Block {
  static register() {
    Quill.register(code_CodeBlockContainer);
  }

}

class code_Code extends blots_inline {}

code_Code.blotName = 'code';
code_Code.tagName = 'CODE';
code_CodeBlock.blotName = 'code-block';
code_CodeBlock.className = 'ql-code-block';
code_CodeBlock.tagName = 'DIV';
code_CodeBlockContainer.blotName = 'code-block-container';
code_CodeBlockContainer.className = 'ql-code-block-container';
code_CodeBlockContainer.tagName = 'DIV';
code_CodeBlockContainer.allowedChildren = [code_CodeBlock];
code_CodeBlock.allowedChildren = [text_Text, blots_break, cursor];
code_CodeBlock.requiredContainer = code_CodeBlockContainer;
code_CodeBlock.TAB = '  ';

// CONCATENATED MODULE: ./formats/direction.js

var direction_config = {
  scope: src_scope.BLOCK,
  whitelist: ['rtl']
};
var DirectionAttribute = new attributor_Attributor('direction', 'dir', direction_config);
var DirectionClass = new attributor_class('direction', 'ql-direction', direction_config);
var DirectionStyle = new attributor_style('direction', 'direction', direction_config);

// CONCATENATED MODULE: ./formats/font.js

var font_config = {
  scope: src_scope.INLINE,
  whitelist: ['serif', 'monospace']
};
var FontClass = new attributor_class('font', 'ql-font', font_config);

class font_FontStyleAttributor extends attributor_style {
  value(node) {
    return super.value(node).replace(/["']/g, '');
  }

}

var FontStyle = new font_FontStyleAttributor('font', 'font-family', font_config);

// CONCATENATED MODULE: ./formats/size.js

var SizeClass = new attributor_class('size', 'ql-size', {
  scope: src_scope.INLINE,
  whitelist: ['small', 'large', 'huge']
});
var SizeStyle = new attributor_style('size', 'font-size', {
  scope: src_scope.INLINE,
  whitelist: ['10px', '18px', '32px']
});

// CONCATENATED MODULE: ./modules/clipboard.js
function clipboard_typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { clipboard_typeof = function _typeof(obj) { return typeof obj; }; } else { clipboard_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return clipboard_typeof(obj); }

function clipboard_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function clipboard_slicedToArray(arr, i) { return clipboard_arrayWithHoles(arr) || clipboard_iterableToArrayLimit(arr, i) || clipboard_nonIterableRest(); }

function clipboard_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function clipboard_iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function clipboard_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }














var clipboard_debug = logger('quill:clipboard');
var CLIPBOARD_CONFIG = [[Node.TEXT_NODE, matchText], [Node.TEXT_NODE, matchNewline], ['br', matchBreak], [Node.ELEMENT_NODE, matchNewline], [Node.ELEMENT_NODE, matchBlot], [Node.ELEMENT_NODE, matchAttributor], [Node.ELEMENT_NODE, matchStyles], ['li', matchIndent], ['ol, ul', matchList], ['pre', matchCodeBlock], ['tr', matchTable], ['b', matchAlias.bind(matchAlias, 'bold')], ['i', matchAlias.bind(matchAlias, 'italic')], ['style', matchIgnore]];
var ATTRIBUTE_ATTRIBUTORS = [AlignAttribute, DirectionAttribute].reduce(function (memo, attr) {
  memo[attr.keyName] = attr;
  return memo;
}, {});
var STYLE_ATTRIBUTORS = [AlignStyle, BackgroundStyle, ColorStyle, DirectionStyle, FontStyle, SizeStyle].reduce(function (memo, attr) {
  memo[attr.keyName] = attr;
  return memo;
}, {});

class clipboard_Clipboard extends core_module {
  constructor(quill, options) {
    var _this;

    super(quill, options);
    _this = this;
    this.quill.root.addEventListener('copy', function (e) {
      return _this.onCaptureCopy(e, false);
    });
    this.quill.root.addEventListener('cut', function (e) {
      return _this.onCaptureCopy(e, true);
    });
    this.quill.root.addEventListener('paste', this.onCapturePaste.bind(this));
    this.matchers = [];
    CLIPBOARD_CONFIG.concat(this.options.matchers).forEach(function (_ref) {
      var _ref2 = clipboard_slicedToArray(_ref, 2),
          selector = _ref2[0],
          matcher = _ref2[1];

      _this.addMatcher(selector, matcher);
    });
  }

  addMatcher(selector, matcher) {
    this.matchers.push([selector, matcher]);
  }

  convert(_ref3) {
    var html = _ref3.html,
        text = _ref3.text;
    var formats = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (formats[code_CodeBlock.blotName]) {
      return new Delta_default.a().insert(text, clipboard_defineProperty({}, code_CodeBlock.blotName, formats[code_CodeBlock.blotName]));
    }

    if (!html) {
      return new Delta_default.a().insert(text || '');
    }

    var doc = new DOMParser().parseFromString(html, 'text/html');
    var container = doc.body;
    var nodeMatches = new WeakMap();

    var _this$prepareMatching = this.prepareMatching(container, nodeMatches),
        _this$prepareMatching2 = clipboard_slicedToArray(_this$prepareMatching, 2),
        elementMatchers = _this$prepareMatching2[0],
        textMatchers = _this$prepareMatching2[1];

    var delta = traverse(this.quill.scroll, container, elementMatchers, textMatchers, nodeMatches); // Remove trailing newline

    if (deltaEndsWith(delta, '\n') && (delta.ops[delta.ops.length - 1].attributes == null || formats.table)) {
      return delta.compose(new Delta_default.a().retain(delta.length() - 1).delete(1));
    }

    return delta;
  }

  dangerouslyPasteHTML(index, html) {
    var source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Quill.sources.API;

    if (typeof index === 'string') {
      var delta = this.convert({
        html: index,
        text: ''
      });
      this.quill.setContents(delta, html);
      this.quill.setSelection(0, Quill.sources.SILENT);
    } else {
      var paste = this.convert({
        html: html,
        text: ''
      });
      this.quill.updateContents(new Delta_default.a().retain(index).concat(paste), source);
      this.quill.setSelection(index + paste.length(), Quill.sources.SILENT);
    }
  }

  onCaptureCopy(e) {
    var isCut = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    if (e.defaultPrevented) return;
    e.preventDefault();

    var _this$quill$selection = this.quill.selection.getRange(),
        _this$quill$selection2 = clipboard_slicedToArray(_this$quill$selection, 1),
        range = _this$quill$selection2[0];

    if (range == null) return;

    var _this$onCopy = this.onCopy(range, isCut),
        html = _this$onCopy.html,
        text = _this$onCopy.text;

    e.clipboardData.setData('text/plain', text);
    e.clipboardData.setData('text/html', html);

    if (isCut) {
      this.quill.deleteText(range, Quill.sources.USER);
    }
  }

  onCapturePaste(e) {
    if (e.defaultPrevented || !this.quill.isEnabled()) return;
    e.preventDefault();
    var range = this.quill.getSelection(true);
    if (range == null) return;
    var html = e.clipboardData.getData('text/html');
    var text = e.clipboardData.getData('text/plain');
    var files = Array.from(e.clipboardData.files || []);

    if (!html && files.length > 0) {
      this.quill.uploader.upload(range, files);
    } else {
      this.onPaste(range, {
        html: html,
        text: text
      });
    }
  }

  onCopy(range) {
    var text = this.quill.getText(range);
    var html = this.quill.getSemanticHTML(range);
    return {
      html: html,
      text: text
    };
  }

  onPaste(range, _ref4) {
    var text = _ref4.text,
        html = _ref4.html;
    var formats = this.quill.getFormat(range.index);
    var pastedDelta = this.convert({
      text: text,
      html: html
    }, formats);
    clipboard_debug.log('onPaste', pastedDelta, {
      text: text,
      html: html
    });
    var delta = new Delta_default.a().retain(range.index).delete(range.length).concat(pastedDelta);
    this.quill.updateContents(delta, Quill.sources.USER); // range.length contributes to delta.length()

    this.quill.setSelection(delta.length() - range.length, Quill.sources.SILENT);
    this.quill.scrollIntoView();
  }

  prepareMatching(container, nodeMatches) {
    var elementMatchers = [];
    var textMatchers = [];
    this.matchers.forEach(function (pair) {
      var _pair = clipboard_slicedToArray(pair, 2),
          selector = _pair[0],
          matcher = _pair[1];

      switch (selector) {
        case Node.TEXT_NODE:
          textMatchers.push(matcher);
          break;

        case Node.ELEMENT_NODE:
          elementMatchers.push(matcher);
          break;

        default:
          Array.from(container.querySelectorAll(selector)).forEach(function (node) {
            if (nodeMatches.has(node)) {
              var matches = nodeMatches.get(node);
              matches.push(matcher);
            } else {
              nodeMatches.set(node, [matcher]);
            }
          });
          break;
      }
    });
    return [elementMatchers, textMatchers];
  }

}

clipboard_Clipboard.DEFAULTS = {
  matchers: []
};

function applyFormat(delta, format, value) {
  if (clipboard_typeof(format) === 'object') {
    return Object.keys(format).reduce(function (newDelta, key) {
      return applyFormat(newDelta, key, format[key]);
    }, delta);
  }

  return delta.reduce(function (newDelta, op) {
    if (op.attributes && op.attributes[format]) {
      return newDelta.push(op);
    }

    return newDelta.insert(op.insert, extend_default()({}, clipboard_defineProperty({}, format, value), op.attributes));
  }, new Delta_default.a());
}

function deltaEndsWith(delta, text) {
  var endText = '';

  for (var i = delta.ops.length - 1; i >= 0 && endText.length < text.length; --i // eslint-disable-line no-plusplus
  ) {
    var op = delta.ops[i];
    if (typeof op.insert !== 'string') break;
    endText = op.insert + endText;
  }

  return endText.slice(-1 * text.length) === text;
}

function clipboard_isLine(node) {
  if (node.childNodes.length === 0) return false; // Exclude embed blocks

  return ['address', 'article', 'blockquote', 'canvas', 'dd', 'div', 'dl', 'dt', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'iframe', 'li', 'main', 'nav', 'ol', 'output', 'p', 'pre', 'section', 'table', 'td', 'tr', 'ul', 'video'].includes(node.tagName.toLowerCase());
}

var preNodes = new WeakMap();

function isPre(node) {
  if (node == null) return false;

  if (!preNodes.has(node)) {
    if (node.tagName === 'PRE') {
      preNodes.set(node, true);
    } else {
      preNodes.set(node, isPre(node.parentNode));
    }
  }

  return preNodes.get(node);
}

function traverse(scroll, node, elementMatchers, textMatchers, nodeMatches) {
  // Post-order
  if (node.nodeType === node.TEXT_NODE) {
    return textMatchers.reduce(function (delta, matcher) {
      return matcher(node, delta, scroll);
    }, new Delta_default.a());
  }

  if (node.nodeType === node.ELEMENT_NODE) {
    return Array.from(node.childNodes || []).reduce(function (delta, childNode) {
      var childrenDelta = traverse(scroll, childNode, elementMatchers, textMatchers, nodeMatches);

      if (childNode.nodeType === node.ELEMENT_NODE) {
        childrenDelta = elementMatchers.reduce(function (reducedDelta, matcher) {
          return matcher(childNode, reducedDelta, scroll);
        }, childrenDelta);
        childrenDelta = (nodeMatches.get(childNode) || []).reduce(function (reducedDelta, matcher) {
          return matcher(childNode, reducedDelta, scroll);
        }, childrenDelta);
      }

      return delta.concat(childrenDelta);
    }, new Delta_default.a());
  }

  return new Delta_default.a();
}

function matchAlias(format, node, delta) {
  return applyFormat(delta, format, true);
}

function matchAttributor(node, delta, scroll) {
  var attributes = attributor_Attributor.keys(node);
  var classes = attributor_class.keys(node);
  var styles = attributor_style.keys(node);
  var formats = {};
  attributes.concat(classes).concat(styles).forEach(function (name) {
    var attr = scroll.query(name, src_scope.ATTRIBUTE);

    if (attr != null) {
      formats[attr.attrName] = attr.value(node);
      if (formats[attr.attrName]) return;
    }

    attr = ATTRIBUTE_ATTRIBUTORS[name];

    if (attr != null && (attr.attrName === name || attr.keyName === name)) {
      formats[attr.attrName] = attr.value(node) || undefined;
    }

    attr = STYLE_ATTRIBUTORS[name];

    if (attr != null && (attr.attrName === name || attr.keyName === name)) {
      attr = STYLE_ATTRIBUTORS[name];
      formats[attr.attrName] = attr.value(node) || undefined;
    }
  });

  if (Object.keys(formats).length > 0) {
    return applyFormat(delta, formats);
  }

  return delta;
}

function matchBlot(node, delta, scroll) {
  var match = scroll.query(node);
  if (match == null) return delta;

  if (match.prototype instanceof blot_embed) {
    var embed = {};
    var value = match.value(node);

    if (value != null) {
      embed[match.blotName] = value;
      return new Delta_default.a().insert(embed, match.formats(node, scroll));
    }
  } else {
    if (match.prototype instanceof blot_block && !deltaEndsWith(delta, '\n')) {
      delta.insert('\n');
    }

    if (typeof match.formats === 'function') {
      return applyFormat(delta, match.blotName, match.formats(node, scroll));
    }
  }

  return delta;
}

function matchBreak(node, delta) {
  if (!deltaEndsWith(delta, '\n')) {
    delta.insert('\n');
  }

  return delta;
}

function matchCodeBlock(node, delta, scroll) {
  var match = scroll.query('code-block');
  var language = match ? match.formats(node, scroll) : true;
  return applyFormat(delta, 'code-block', language);
}

function matchIgnore() {
  return new Delta_default.a();
}

function matchIndent(node, delta, scroll) {
  var match = scroll.query(node);

  if (match == null || match.blotName !== 'list' || !deltaEndsWith(delta, '\n')) {
    return delta;
  }

  var indent = -1;
  var parent = node.parentNode;

  while (parent != null) {
    if (['OL', 'UL'].includes(parent.tagName)) {
      indent += 1;
    }

    parent = parent.parentNode;
  }

  if (indent <= 0) return delta;
  return delta.compose(new Delta_default.a().retain(delta.length() - 1).retain(1, {
    indent: indent
  }));
}

function matchList(node, delta) {
  var list = node.tagName === 'OL' ? 'ordered' : 'bullet';
  return applyFormat(delta, 'list', list);
}

function matchNewline(node, delta) {
  if (!deltaEndsWith(delta, '\n')) {
    if (clipboard_isLine(node) || delta.length() > 0 && node.nextSibling && clipboard_isLine(node.nextSibling)) {
      delta.insert('\n');
    }
  }

  return delta;
}

function matchStyles(node, delta) {
  var formats = {};
  var style = node.style || {};

  if (style.fontStyle === 'italic') {
    formats.italic = true;
  }

  if (style.fontWeight.startsWith('bold') || parseInt(style.fontWeight, 10) >= 700) {
    formats.bold = true;
  }

  if (Object.keys(formats).length > 0) {
    delta = applyFormat(delta, formats);
  }

  if (parseFloat(style.textIndent || 0) > 0) {
    // Could be 0.5in
    return new Delta_default.a().insert('\t').concat(delta);
  }

  return delta;
}

function matchTable(node, delta) {
  var table = node.parentNode.tagName === 'TABLE' ? node.parentNode : node.parentNode.parentNode;
  var rows = Array.from(table.querySelectorAll('tr'));
  var row = rows.indexOf(node) + 1;
  return applyFormat(delta, 'table', row);
}

function matchText(node, delta) {
  var text = node.data; // Word represents empty line with <o:p>&nbsp;</o:p>

  if (node.parentNode.tagName === 'O:P') {
    return delta.insert(text.trim());
  }

  if (text.trim().length === 0) {
    return delta;
  }

  if (!isPre(node)) {
    var replacer = function replacer(collapse, match) {
      var replaced = match.replace(/[^\u00a0]/g, ''); // \u00a0 is nbsp;

      return replaced.length < 1 && collapse ? ' ' : replaced;
    };

    text = text.replace(/\r\n/g, ' ').replace(/\n/g, ' ');
    text = text.replace(/\s\s+/g, replacer.bind(replacer, true)); // collapse whitespace

    if (node.previousSibling == null && clipboard_isLine(node.parentNode) || node.previousSibling != null && clipboard_isLine(node.previousSibling)) {
      text = text.replace(/^\s+/, replacer.bind(replacer, false));
    }

    if (node.nextSibling == null && clipboard_isLine(node.parentNode) || node.nextSibling != null && clipboard_isLine(node.nextSibling)) {
      text = text.replace(/\s+$/, replacer.bind(replacer, false));
    }
  }

  return delta.insert(text);
}


// CONCATENATED MODULE: ./modules/history.js





class history_History extends core_module {
  constructor(quill, options) {
    var _this;

    super(quill, options);
    _this = this;
    this.lastRecorded = 0;
    this.ignoreChange = false;
    this.clear();
    this.quill.on(Quill.events.EDITOR_CHANGE, function (eventName, delta, oldDelta, source) {
      if (eventName !== Quill.events.TEXT_CHANGE || _this.ignoreChange) return;

      if (!_this.options.userOnly || source === Quill.sources.USER) {
        _this.record(delta, oldDelta);
      } else {
        _this.transform(delta);
      }
    });
    this.quill.keyboard.addBinding({
      key: 'z',
      shortKey: true
    }, this.undo.bind(this));
    this.quill.keyboard.addBinding({
      key: 'z',
      shortKey: true,
      shiftKey: true
    }, this.redo.bind(this));

    if (/Win/i.test(navigator.platform)) {
      this.quill.keyboard.addBinding({
        key: 'y',
        shortKey: true
      }, this.redo.bind(this));
    }
  }

  change(source, dest) {
    if (this.stack[source].length === 0) return;
    var delta = this.stack[source].pop();
    this.stack[dest].push(delta);
    this.lastRecorded = 0;
    this.ignoreChange = true;
    this.quill.updateContents(delta[source], Quill.sources.USER);
    this.ignoreChange = false;
    var index = getLastChangeIndex(this.quill.scroll, delta[source]);
    this.quill.setSelection(index);
  }

  clear() {
    this.stack = {
      undo: [],
      redo: []
    };
  }

  cutoff() {
    this.lastRecorded = 0;
  }

  record(changeDelta, oldDelta) {
    if (changeDelta.ops.length === 0) return;
    this.stack.redo = [];
    var undoDelta = guessUndoDelta(changeDelta);

    if (undoDelta == null) {
      undoDelta = this.quill.getContents().diff(oldDelta);
    }

    var timestamp = Date.now();

    if (this.lastRecorded + this.options.delay > timestamp && this.stack.undo.length > 0) {
      var delta = this.stack.undo.pop();
      undoDelta = undoDelta.compose(delta.undo);
      changeDelta = delta.redo.compose(changeDelta);
    } else {
      this.lastRecorded = timestamp;
    }

    this.stack.undo.push({
      redo: changeDelta,
      undo: undoDelta
    });

    if (this.stack.undo.length > this.options.maxStack) {
      this.stack.undo.shift();
    }
  }

  redo() {
    this.change('redo', 'undo');
  }

  transform(delta) {
    this.stack.undo.forEach(function (change) {
      change.undo = delta.transform(change.undo, true);
      change.redo = delta.transform(change.redo, true);
    });
    this.stack.redo.forEach(function (change) {
      change.undo = delta.transform(change.undo, true);
      change.redo = delta.transform(change.redo, true);
    });
  }

  undo() {
    this.change('undo', 'redo');
  }

}

history_History.DEFAULTS = {
  delay: 1000,
  maxStack: 100,
  userOnly: false
};

function endsWithNewlineChange(scroll, delta) {
  var lastOp = delta.ops[delta.ops.length - 1];
  if (lastOp == null) return false;

  if (lastOp.insert != null) {
    return typeof lastOp.insert === 'string' && lastOp.insert.endsWith('\n');
  }

  if (lastOp.attributes != null) {
    return Object.keys(lastOp.attributes).some(function (attr) {
      return scroll.query(attr, src_scope.BLOCK) != null;
    });
  }

  return false;
}

function getLastChangeIndex(scroll, delta) {
  var deleteLength = delta.reduce(function (length, op) {
    return length + (op.delete || 0);
  }, 0);
  var changeIndex = delta.length() - deleteLength;

  if (endsWithNewlineChange(scroll, delta)) {
    changeIndex -= 1;
  }

  return changeIndex;
}

function guessUndoDelta(delta) {
  var undoDelta = new Delta_default.a();
  var failed = false;
  delta.forEach(function (op) {
    if (op.insert) {
      undoDelta.delete(Delta["Op"].length(op));
    } else if (op.retain && op.attributes == null) {
      undoDelta.retain(op.retain);
    } else {
      failed = true;
      return false;
    }

    return true;
  });
  return failed ? null : undoDelta;
}


// CONCATENATED MODULE: ./modules/keyboard.js
function keyboard_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function keyboard_typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { keyboard_typeof = function _typeof(obj) { return typeof obj; }; } else { keyboard_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return keyboard_typeof(obj); }

function keyboard_slicedToArray(arr, i) { return keyboard_arrayWithHoles(arr) || keyboard_iterableToArrayLimit(arr, i) || keyboard_nonIterableRest(); }

function keyboard_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function keyboard_iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function keyboard_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }









var keyboard_debug = logger('quill:keyboard');
var SHORTKEY = /Mac/i.test(navigator.platform) ? 'metaKey' : 'ctrlKey';

class keyboard_Keyboard extends core_module {
  static match(evt, binding) {
    if (['altKey', 'ctrlKey', 'metaKey', 'shiftKey'].some(function (key) {
      return !!binding[key] !== evt[key] && binding[key] !== null;
    })) {
      return false;
    }

    return binding.key === evt.key || binding.key === evt.which;
  }

  constructor(quill, options) {
    var _this;

    super(quill, options);
    _this = this;
    this.bindings = {};
    Object.keys(this.options.bindings).forEach(function (name) {
      if (_this.options.bindings[name]) {
        _this.addBinding(_this.options.bindings[name]);
      }
    });
    this.addBinding({
      key: 'Enter',
      shiftKey: null
    }, handleEnter);
    this.addBinding({
      key: 'Enter',
      metaKey: null,
      ctrlKey: null,
      altKey: null
    }, function () {});

    if (/Firefox/i.test(navigator.userAgent)) {
      // Need to handle delete and backspace for Firefox in the general case #1171
      this.addBinding({
        key: 'Backspace'
      }, {
        collapsed: true
      }, handleBackspace);
      this.addBinding({
        key: 'Delete'
      }, {
        collapsed: true
      }, handleDelete);
    } else {
      this.addBinding({
        key: 'Backspace'
      }, {
        collapsed: true,
        prefix: /^.?$/
      }, handleBackspace);
      this.addBinding({
        key: 'Delete'
      }, {
        collapsed: true,
        suffix: /^.?$/
      }, handleDelete);
    }

    this.addBinding({
      key: 'Backspace'
    }, {
      collapsed: false
    }, handleDeleteRange);
    this.addBinding({
      key: 'Delete'
    }, {
      collapsed: false
    }, handleDeleteRange);
    this.addBinding({
      key: 'Backspace',
      altKey: null,
      ctrlKey: null,
      metaKey: null,
      shiftKey: null
    }, {
      collapsed: true,
      offset: 0
    }, handleBackspace);
    this.listen();
  }

  addBinding(keyBinding) {
    var _this2 = this;

    var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var handler = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var binding = normalize(keyBinding);

    if (binding == null) {
      keyboard_debug.warn('Attempted to add invalid keyboard binding', binding);
      return;
    }

    if (typeof context === 'function') {
      context = {
        handler: context
      };
    }

    if (typeof handler === 'function') {
      handler = {
        handler: handler
      };
    }

    var keys = Array.isArray(binding.key) ? binding.key : [binding.key];
    keys.forEach(function (key) {
      var singleBinding = extend_default()({}, binding, {
        key: key
      }, context, handler);
      _this2.bindings[singleBinding.key] = _this2.bindings[singleBinding.key] || [];

      _this2.bindings[singleBinding.key].push(singleBinding);
    });
  }

  listen() {
    var _this3 = this;

    this.quill.root.addEventListener('keydown', function (evt) {
      if (evt.defaultPrevented) return;
      var bindings = (_this3.bindings[evt.key] || []).concat(_this3.bindings[evt.which] || []);
      var matches = bindings.filter(function (binding) {
        return keyboard_Keyboard.match(evt, binding);
      });
      if (matches.length === 0) return;

      var range = _this3.quill.getSelection();

      if (range == null || !_this3.quill.hasFocus()) return;

      var _this3$quill$getLine = _this3.quill.getLine(range.index),
          _this3$quill$getLine2 = keyboard_slicedToArray(_this3$quill$getLine, 2),
          line = _this3$quill$getLine2[0],
          offset = _this3$quill$getLine2[1];

      var _this3$quill$getLeaf = _this3.quill.getLeaf(range.index),
          _this3$quill$getLeaf2 = keyboard_slicedToArray(_this3$quill$getLeaf, 2),
          leafStart = _this3$quill$getLeaf2[0],
          offsetStart = _this3$quill$getLeaf2[1];

      var _ref = range.length === 0 ? [leafStart, offsetStart] : _this3.quill.getLeaf(range.index + range.length),
          _ref2 = keyboard_slicedToArray(_ref, 2),
          leafEnd = _ref2[0],
          offsetEnd = _ref2[1];

      var prefixText = leafStart instanceof blot_text ? leafStart.value().slice(0, offsetStart) : '';
      var suffixText = leafEnd instanceof blot_text ? leafEnd.value().slice(offsetEnd) : '';
      var curContext = {
        collapsed: range.length === 0,
        empty: range.length === 0 && line.length() <= 1,
        format: _this3.quill.getFormat(range),
        line: line,
        offset: offset,
        prefix: prefixText,
        suffix: suffixText,
        event: evt
      };
      var prevented = matches.some(function (binding) {
        if (binding.collapsed != null && binding.collapsed !== curContext.collapsed) {
          return false;
        }

        if (binding.empty != null && binding.empty !== curContext.empty) {
          return false;
        }

        if (binding.offset != null && binding.offset !== curContext.offset) {
          return false;
        }

        if (Array.isArray(binding.format)) {
          // any format is present
          if (binding.format.every(function (name) {
            return curContext.format[name] == null;
          })) {
            return false;
          }
        } else if (keyboard_typeof(binding.format) === 'object') {
          // all formats must match
          if (!Object.keys(binding.format).every(function (name) {
            if (binding.format[name] === true) return curContext.format[name] != null;
            if (binding.format[name] === false) return curContext.format[name] == null;
            return deep_equal_default()(binding.format[name], curContext.format[name]);
          })) {
            return false;
          }
        }

        if (binding.prefix != null && !binding.prefix.test(curContext.prefix)) {
          return false;
        }

        if (binding.suffix != null && !binding.suffix.test(curContext.suffix)) {
          return false;
        }

        return binding.handler.call(_this3, range, curContext, binding) !== true;
      });

      if (prevented) {
        evt.preventDefault();
      }
    });
  }

}

keyboard_Keyboard.DEFAULTS = {
  bindings: {
    bold: makeFormatHandler('bold'),
    italic: makeFormatHandler('italic'),
    underline: makeFormatHandler('underline'),
    indent: {
      // highlight tab or tab at beginning of list, indent or blockquote
      key: 'Tab',
      format: ['blockquote', 'indent', 'list'],
      handler: function handler(range, context) {
        if (context.collapsed && context.offset !== 0) return true;
        this.quill.format('indent', '+1', Quill.sources.USER);
        return false;
      }
    },
    outdent: {
      key: 'Tab',
      shiftKey: true,
      format: ['blockquote', 'indent', 'list'],
      // highlight tab or tab at beginning of list, indent or blockquote
      handler: function handler(range, context) {
        if (context.collapsed && context.offset !== 0) return true;
        this.quill.format('indent', '-1', Quill.sources.USER);
        return false;
      }
    },
    'outdent backspace': {
      key: 'Backspace',
      collapsed: true,
      shiftKey: null,
      metaKey: null,
      ctrlKey: null,
      altKey: null,
      format: ['indent', 'list'],
      offset: 0,
      handler: function handler(range, context) {
        if (context.format.indent != null) {
          this.quill.format('indent', '-1', Quill.sources.USER);
        } else if (context.format.list != null) {
          this.quill.format('list', false, Quill.sources.USER);
        }
      }
    },
    'indent code-block': makeCodeBlockHandler(true),
    'outdent code-block': makeCodeBlockHandler(false),
    'remove tab': {
      key: 'Tab',
      shiftKey: true,
      collapsed: true,
      prefix: /\t$/,
      handler: function handler(range) {
        this.quill.deleteText(range.index - 1, 1, Quill.sources.USER);
      }
    },
    tab: {
      key: 'Tab',
      handler: function handler(range, context) {
        if (context.format.table) return true;
        this.quill.history.cutoff();
        var delta = new Delta_default.a().retain(range.index).delete(range.length).insert('\t');
        this.quill.updateContents(delta, Quill.sources.USER);
        this.quill.history.cutoff();
        this.quill.setSelection(range.index + 1, Quill.sources.SILENT);
        return false;
      }
    },
    'blockquote empty enter': {
      key: 'Enter',
      collapsed: true,
      format: ['blockquote'],
      empty: true,
      handler: function handler() {
        this.quill.format('blockquote', false, Quill.sources.USER);
      }
    },
    'list empty enter': {
      key: 'Enter',
      collapsed: true,
      format: ['list'],
      empty: true,
      handler: function handler(range, context) {
        var formats = {
          list: false
        };

        if (context.format.indent) {
          formats.indent = false;
        }

        this.quill.formatLine(range.index, range.length, formats, Quill.sources.USER);
      }
    },
    'checklist enter': {
      key: 'Enter',
      collapsed: true,
      format: {
        list: 'checked'
      },
      handler: function handler(range) {
        var _this$quill$getLine = this.quill.getLine(range.index),
            _this$quill$getLine2 = keyboard_slicedToArray(_this$quill$getLine, 2),
            line = _this$quill$getLine2[0],
            offset = _this$quill$getLine2[1];

        var formats = extend_default()({}, line.formats(), {
          list: 'checked'
        });
        var delta = new Delta_default.a().retain(range.index).insert('\n', formats).retain(line.length() - offset - 1).retain(1, {
          list: 'unchecked'
        });
        this.quill.updateContents(delta, Quill.sources.USER);
        this.quill.setSelection(range.index + 1, Quill.sources.SILENT);
        this.quill.scrollIntoView();
      }
    },
    'header enter': {
      key: 'Enter',
      collapsed: true,
      format: ['header'],
      suffix: /^$/,
      handler: function handler(range, context) {
        var _this$quill$getLine3 = this.quill.getLine(range.index),
            _this$quill$getLine4 = keyboard_slicedToArray(_this$quill$getLine3, 2),
            line = _this$quill$getLine4[0],
            offset = _this$quill$getLine4[1];

        var delta = new Delta_default.a().retain(range.index).insert('\n', context.format).retain(line.length() - offset - 1).retain(1, {
          header: null
        });
        this.quill.updateContents(delta, Quill.sources.USER);
        this.quill.setSelection(range.index + 1, Quill.sources.SILENT);
        this.quill.scrollIntoView();
      }
    },
    'table backspace': {
      key: 'Backspace',
      format: ['table'],
      collapsed: true,
      offset: 0,
      handler: function handler() {}
    },
    'table delete': {
      key: 'Delete',
      format: ['table'],
      collapsed: true,
      suffix: /^$/,
      handler: function handler() {}
    },
    'table enter': {
      key: 'Enter',
      shiftKey: null,
      format: ['table'],
      handler: function handler(range) {
        var module = this.quill.getModule('table');

        if (module) {
          var _module$getTable = module.getTable(range),
              _module$getTable2 = keyboard_slicedToArray(_module$getTable, 4),
              table = _module$getTable2[0],
              row = _module$getTable2[1],
              cell = _module$getTable2[2],
              offset = _module$getTable2[3];

          var shift = tableSide(table, row, cell, offset);
          if (shift == null) return;
          var index = table.offset();

          if (shift < 0) {
            var delta = new Delta_default.a().retain(index).insert('\n');
            this.quill.updateContents(delta, Quill.sources.USER);
            this.quill.setSelection(range.index + 1, range.length, Quill.sources.SILENT);
          } else if (shift > 0) {
            index += table.length();

            var _delta = new Delta_default.a().retain(index).insert('\n');

            this.quill.updateContents(_delta, Quill.sources.USER);
            this.quill.setSelection(index, Quill.sources.USER);
          }
        }
      }
    },
    'table tab': {
      key: 'Tab',
      shiftKey: null,
      format: ['table'],
      handler: function handler(range, context) {
        var event = context.event,
            cell = context.line;
        var offset = cell.offset(this.quill.scroll);

        if (event.shiftKey) {
          this.quill.setSelection(offset - 1, Quill.sources.USER);
        } else {
          this.quill.setSelection(offset + cell.length(), Quill.sources.USER);
        }
      }
    },
    'list autofill': {
      key: ' ',
      shiftKey: null,
      collapsed: true,
      format: {
        list: false,
        'code-block': false,
        blockquote: false,
        header: false,
        table: false
      },
      prefix: /^\s*?(\d+\.|-|\*|\[ ?\]|\[x\])$/,
      handler: function handler(range, context) {
        if (this.quill.scroll.query('list') == null) return true;
        var length = context.prefix.length;

        var _this$quill$getLine5 = this.quill.getLine(range.index),
            _this$quill$getLine6 = keyboard_slicedToArray(_this$quill$getLine5, 2),
            line = _this$quill$getLine6[0],
            offset = _this$quill$getLine6[1];

        if (offset > length) return true;
        var value;

        switch (context.prefix.trim()) {
          case '[]':
          case '[ ]':
            value = 'unchecked';
            break;

          case '[x]':
            value = 'checked';
            break;

          case '-':
          case '*':
            value = 'bullet';
            break;

          default:
            value = 'ordered';
        }

        this.quill.insertText(range.index, ' ', Quill.sources.USER);
        this.quill.history.cutoff();
        var delta = new Delta_default.a().retain(range.index - offset).delete(length + 1).retain(line.length() - 2 - offset).retain(1, {
          list: value
        });
        this.quill.updateContents(delta, Quill.sources.USER);
        this.quill.history.cutoff();
        this.quill.setSelection(range.index - length, Quill.sources.SILENT);
        return false;
      }
    },
    'code exit': {
      key: 'Enter',
      collapsed: true,
      format: ['code-block'],
      prefix: /^$/,
      suffix: /^\s*$/,
      handler: function handler(range) {
        var _this$quill$getLine7 = this.quill.getLine(range.index),
            _this$quill$getLine8 = keyboard_slicedToArray(_this$quill$getLine7, 2),
            line = _this$quill$getLine8[0],
            offset = _this$quill$getLine8[1];

        var numLines = 2;
        var cur = line;

        while (cur != null && cur.length() <= 1 && cur.formats()['code-block']) {
          cur = cur.prev;
          numLines -= 1; // Requisite prev lines are empty

          if (numLines <= 0) {
            var delta = new Delta_default.a().retain(range.index + line.length() - offset - 2).retain(1, {
              'code-block': null
            }).delete(1);
            this.quill.updateContents(delta, Quill.sources.USER);
            this.quill.setSelection(range.index - 1, Quill.sources.SILENT);
            return false;
          }
        }

        return true;
      }
    },
    'embed left': makeEmbedArrowHandler('ArrowLeft', false),
    'embed left shift': makeEmbedArrowHandler('ArrowLeft', true),
    'embed right': makeEmbedArrowHandler('ArrowRight', false),
    'embed right shift': makeEmbedArrowHandler('ArrowRight', true),
    'table down': makeTableArrowHandler(false),
    'table up': makeTableArrowHandler(true)
  }
};

function handleBackspace(range, context) {
  if (range.index === 0 || this.quill.getLength() <= 1) return;

  var _this$quill$getLine9 = this.quill.getLine(range.index),
      _this$quill$getLine10 = keyboard_slicedToArray(_this$quill$getLine9, 1),
      line = _this$quill$getLine10[0];

  var formats = {};

  if (context.offset === 0) {
    var _this$quill$getLine11 = this.quill.getLine(range.index - 1),
        _this$quill$getLine12 = keyboard_slicedToArray(_this$quill$getLine11, 1),
        prev = _this$quill$getLine12[0];

    if (prev != null) {
      if (prev.length() > 1 || prev.statics.blotName === 'table') {
        var curFormats = line.formats();
        var prevFormats = this.quill.getFormat(range.index - 1, 1);
        formats = Delta["AttributeMap"].diff(curFormats, prevFormats) || {};
      }
    }
  } // Check for astral symbols


  var length = /[\uD800-\uDBFF][\uDC00-\uDFFF]$/.test(context.prefix) ? 2 : 1;
  this.quill.deleteText(range.index - length, length, Quill.sources.USER);

  if (Object.keys(formats).length > 0) {
    this.quill.formatLine(range.index - length, length, formats, Quill.sources.USER);
  }

  this.quill.focus();
}

function handleDelete(range, context) {
  // Check for astral symbols
  var length = /^[\uD800-\uDBFF][\uDC00-\uDFFF]/.test(context.suffix) ? 2 : 1;
  if (range.index >= this.quill.getLength() - length) return;
  var formats = {};
  var nextLength = 0;

  var _this$quill$getLine13 = this.quill.getLine(range.index),
      _this$quill$getLine14 = keyboard_slicedToArray(_this$quill$getLine13, 1),
      line = _this$quill$getLine14[0];

  if (context.offset >= line.length() - 1) {
    var _this$quill$getLine15 = this.quill.getLine(range.index + 1),
        _this$quill$getLine16 = keyboard_slicedToArray(_this$quill$getLine15, 1),
        next = _this$quill$getLine16[0];

    if (next) {
      var curFormats = line.formats();
      var nextFormats = this.quill.getFormat(range.index, 1);
      formats = Delta["AttributeMap"].diff(curFormats, nextFormats) || {};
      nextLength = next.length();
    }
  }

  this.quill.deleteText(range.index, length, Quill.sources.USER);

  if (Object.keys(formats).length > 0) {
    this.quill.formatLine(range.index + nextLength - 1, length, formats, Quill.sources.USER);
  }
}

function handleDeleteRange(range) {
  var lines = this.quill.getLines(range);
  var formats = {};

  if (lines.length > 1) {
    var firstFormats = lines[0].formats();
    var lastFormats = lines[lines.length - 1].formats();
    formats = Delta["AttributeMap"].diff(lastFormats, firstFormats) || {};
  }

  this.quill.deleteText(range, Quill.sources.USER);

  if (Object.keys(formats).length > 0) {
    this.quill.formatLine(range.index, 1, formats, Quill.sources.USER);
  }

  this.quill.setSelection(range.index, Quill.sources.SILENT);
  this.quill.focus();
} // TODO use just updateContents()


function handleEnter(range, context) {
  var _this4 = this;

  if (range.length > 0) {
    this.quill.scroll.deleteAt(range.index, range.length); // So we do not trigger text-change
  }

  var lineFormats = Object.keys(context.format).reduce(function (formats, format) {
    if (_this4.quill.scroll.query(format, src_scope.BLOCK) && !Array.isArray(context.format[format])) {
      formats[format] = context.format[format];
    }

    return formats;
  }, {});
  this.quill.insertText(range.index, '\n', lineFormats, Quill.sources.USER); // Earlier scroll.deleteAt might have messed up our selection,
  // so insertText's built in selection preservation is not reliable

  this.quill.setSelection(range.index + 1, Quill.sources.SILENT);
  this.quill.focus();
  Object.keys(context.format).forEach(function (name) {
    if (lineFormats[name] != null) return;
    if (Array.isArray(context.format[name])) return;
    if (name === 'link') return;

    _this4.quill.format(name, context.format[name], Quill.sources.USER);
  });
}

function makeCodeBlockHandler(indent) {
  return {
    key: 'Tab',
    shiftKey: !indent,
    format: {
      'code-block': true
    },
    handler: function handler(range) {
      var CodeBlock = this.quill.scroll.query('code-block');
      var lines = range.length === 0 ? this.quill.getLines(range.index, 1) : this.quill.getLines(range);
      var index = range.index,
          length = range.length;
      lines.forEach(function (line, i) {
        if (indent) {
          line.insertAt(0, CodeBlock.TAB);

          if (i === 0) {
            index += CodeBlock.TAB.length;
          } else {
            length += CodeBlock.TAB.length;
          }
        } else if (line.domNode.textContent.startsWith(CodeBlock.TAB)) {
          line.deleteAt(0, CodeBlock.TAB.length);

          if (i === 0) {
            index -= CodeBlock.TAB.length;
          } else {
            length -= CodeBlock.TAB.length;
          }
        }
      });
      this.quill.update(Quill.sources.USER);
      this.quill.setSelection(index, length, Quill.sources.SILENT);
    }
  };
}

function makeEmbedArrowHandler(key, shiftKey) {
  var _ref3;

  var where = key === 'ArrowLeft' ? 'prefix' : 'suffix';
  return _ref3 = {
    key: key,
    shiftKey: shiftKey,
    altKey: null
  }, keyboard_defineProperty(_ref3, where, /^$/), keyboard_defineProperty(_ref3, "handler", function handler(range) {
    var index = range.index;

    if (key === 'ArrowRight') {
      index += range.length + 1;
    }

    var _this$quill$getLeaf = this.quill.getLeaf(index),
        _this$quill$getLeaf2 = keyboard_slicedToArray(_this$quill$getLeaf, 1),
        leaf = _this$quill$getLeaf2[0];

    if (!(leaf instanceof blot_embed)) return true;

    if (key === 'ArrowLeft') {
      if (shiftKey) {
        this.quill.setSelection(range.index - 1, range.length + 1, Quill.sources.USER);
      } else {
        this.quill.setSelection(range.index - 1, Quill.sources.USER);
      }
    } else if (shiftKey) {
      this.quill.setSelection(range.index, range.length + 1, Quill.sources.USER);
    } else {
      this.quill.setSelection(range.index + range.length + 1, Quill.sources.USER);
    }

    return false;
  }), _ref3;
}

function makeFormatHandler(format) {
  return {
    key: format[0],
    shortKey: true,
    handler: function handler(range, context) {
      this.quill.format(format, !context.format[format], Quill.sources.USER);
    }
  };
}

function makeTableArrowHandler(up) {
  return {
    key: up ? 'ArrowUp' : 'ArrowDown',
    collapsed: true,
    format: ['table'],
    handler: function handler(range, context) {
      // TODO move to table module
      var key = up ? 'prev' : 'next';
      var cell = context.line;
      var targetRow = cell.parent[key];

      if (targetRow != null) {
        if (targetRow.statics.blotName === 'table-row') {
          var targetCell = targetRow.children.head;
          var cur = cell;

          while (cur.prev != null) {
            cur = cur.prev;
            targetCell = targetCell.next;
          }

          var index = targetCell.offset(this.quill.scroll) + Math.min(context.offset, targetCell.length() - 1);
          this.quill.setSelection(index, 0, Quill.sources.USER);
        }
      } else {
        var targetLine = cell.table()[key];

        if (targetLine != null) {
          if (up) {
            this.quill.setSelection(targetLine.offset(this.quill.scroll) + targetLine.length() - 1, 0, Quill.sources.USER);
          } else {
            this.quill.setSelection(targetLine.offset(this.quill.scroll), 0, Quill.sources.USER);
          }
        }
      }

      return false;
    }
  };
}

function normalize(binding) {
  if (typeof binding === 'string' || typeof binding === 'number') {
    binding = {
      key: binding
    };
  } else if (keyboard_typeof(binding) === 'object') {
    binding = clone_default()(binding, false);
  } else {
    return null;
  }

  if (binding.shortKey) {
    binding[SHORTKEY] = binding.shortKey;
    delete binding.shortKey;
  }

  return binding;
}

function tableSide(table, row, cell, offset) {
  if (row.prev == null && row.next == null) {
    if (cell.prev == null && cell.next == null) {
      return offset === 0 ? -1 : 1;
    }

    return cell.prev == null ? -1 : 1;
  }

  if (row.prev == null) {
    return -1;
  }

  if (row.next == null) {
    return 1;
  }

  return null;
}


// CONCATENATED MODULE: ./modules/uploader.js




class uploader_Uploader extends core_module {
  constructor(quill, options) {
    var _this;

    super(quill, options);
    _this = this;
    quill.root.addEventListener('drop', function (e) {
      e.preventDefault();
      var native;

      if (document.caretRangeFromPoint) {
        native = document.caretRangeFromPoint(e.clientX, e.clientY);
      } else if (document.caretPositionFromPoint) {
        var position = document.caretPositionFromPoint(e.clientX, e.clientY);
        native = document.createRange();
        native.setStart(position.offsetNode, position.offset);
        native.setEnd(position.offsetNode, position.offset);
      } else {
        return;
      }

      var normalized = quill.selection.normalizeNative(native);
      var range = quill.selection.normalizedToRange(normalized);

      _this.upload(range, e.dataTransfer.files);
    });
  }

  upload(range, files) {
    var _this2 = this;

    var uploads = [];
    Array.from(files).forEach(function (file) {
      if (file && _this2.options.mimetypes.includes(file.type)) {
        uploads.push(file);
      }
    });

    if (uploads.length > 0) {
      this.options.handler.call(this, range, uploads);
    }
  }

}

uploader_Uploader.DEFAULTS = {
  mimetypes: ['image/png', 'image/jpeg'],
  handler: function handler(range, files) {
    var _this3 = this;

    var promises = files.map(function (file) {
      return new Promise(function (resolve) {
        var reader = new FileReader();

        reader.onload = function (e) {
          resolve(e.target.result);
        };

        reader.readAsDataURL(file);
      });
    });
    Promise.all(promises).then(function (images) {
      var update = images.reduce(function (delta, image) {
        return delta.insert({
          image: image
        });
      }, new Delta_default.a().retain(range.index).delete(range.length));

      _this3.quill.updateContents(update, core_emitter.sources.USER);

      _this3.quill.setSelection(range.index + images.length, core_emitter.sources.SILENT);
    });
  }
};
/* harmony default export */ var uploader = (uploader_Uploader);
// CONCATENATED MODULE: ./core.js













Quill.register({
  'blots/block': block_Block,
  'blots/block/embed': block_BlockEmbed,
  'blots/break': blots_break,
  'blots/container': blots_container,
  'blots/cursor': cursor,
  'blots/embed': blots_embed,
  'blots/inline': blots_inline,
  'blots/scroll': blots_scroll,
  'blots/text': text_Text,
  'modules/clipboard': clipboard_Clipboard,
  'modules/history': history_History,
  'modules/keyboard': keyboard_Keyboard,
  'modules/uploader': uploader
});
/* harmony default export */ var core = (Quill);
// CONCATENATED MODULE: ./formats/indent.js


class indent_IndentAttributor extends attributor_class {
  add(node, value) {
    if (value === '+1' || value === '-1') {
      var indent = this.value(node) || 0;
      value = value === '+1' ? indent + 1 : indent - 1;
    }

    if (value === 0) {
      this.remove(node);
      return true;
    }

    return super.add(node, value);
  }

  canAdd(node, value) {
    return super.canAdd(node, value) || super.canAdd(node, parseInt(value, 10));
  }

  value(node) {
    return parseInt(super.value(node), 10) || undefined; // Don't return NaN
  }

}

var IndentClass = new indent_IndentAttributor('indent', 'ql-indent', {
  scope: src_scope.BLOCK,
  whitelist: [1, 2, 3, 4, 5, 6, 7, 8]
});
/* harmony default export */ var formats_indent = (IndentClass);
// CONCATENATED MODULE: ./formats/blockquote.js


class blockquote_Blockquote extends block_Block {}

blockquote_Blockquote.blotName = 'blockquote';
blockquote_Blockquote.tagName = 'blockquote';
/* harmony default export */ var blockquote = (blockquote_Blockquote);
// CONCATENATED MODULE: ./formats/header.js


class header_Header extends block_Block {
  static formats(domNode) {
    return this.tagName.indexOf(domNode.tagName) + 1;
  }

}

header_Header.blotName = 'header';
header_Header.tagName = ['H1', 'H2', 'H3', 'H4', 'H5', 'H6'];
/* harmony default export */ var header = (header_Header);
// CONCATENATED MODULE: ./formats/list.js




class list_ListContainer extends blots_container {}

list_ListContainer.blotName = 'list-container';
list_ListContainer.tagName = 'OL';

class list_ListItem extends block_Block {
  static create(value) {
    var node = super.create();
    node.setAttribute('data-list', value);
    return node;
  }

  static formats(domNode) {
    return domNode.getAttribute('data-list') || undefined;
  }

  static register() {
    Quill.register(list_ListContainer);
  }

  constructor(scroll, domNode) {
    var _this;

    super(scroll, domNode);
    _this = this;
    var ui = domNode.ownerDocument.createElement('span');

    var listEventHandler = function listEventHandler(e) {
      if (!scroll.isEnabled()) return;

      var format = _this.statics.formats(domNode, scroll);

      if (format === 'checked') {
        _this.format('list', 'unchecked');

        e.preventDefault();
      } else if (format === 'unchecked') {
        _this.format('list', 'checked');

        e.preventDefault();
      }
    };

    ui.addEventListener('mousedown', listEventHandler);
    ui.addEventListener('touchstart', listEventHandler);
    this.attachUI(ui);
  }

  format(name, value) {
    if (name === this.statics.blotName && value) {
      this.domNode.setAttribute('data-list', value);
    } else {
      super.format(name, value);
    }
  }

}

list_ListItem.blotName = 'list';
list_ListItem.tagName = 'LI';
list_ListContainer.allowedChildren = [list_ListItem];
list_ListItem.requiredContainer = list_ListContainer;

// CONCATENATED MODULE: ./formats/bold.js


class bold_Bold extends blots_inline {
  static create() {
    return super.create();
  }

  static formats() {
    return true;
  }

  optimize(context) {
    super.optimize(context);

    if (this.domNode.tagName !== this.statics.tagName[0]) {
      this.replaceWith(this.statics.blotName);
    }
  }

}

bold_Bold.blotName = 'bold';
bold_Bold.tagName = ['STRONG', 'B'];
/* harmony default export */ var bold = (bold_Bold);
// CONCATENATED MODULE: ./formats/italic.js


class italic_Italic extends bold {}

italic_Italic.blotName = 'italic';
italic_Italic.tagName = ['EM', 'I'];
/* harmony default export */ var italic = (italic_Italic);
// CONCATENATED MODULE: ./formats/link.js


class link_Link extends blots_inline {
  static create(value) {
    var node = super.create(value);
    node.setAttribute('href', this.sanitize(value));
    node.setAttribute('target', '_blank');
    return node;
  }

  static formats(domNode) {
    return domNode.getAttribute('href');
  }

  static sanitize(url) {
    return sanitize(url, this.PROTOCOL_WHITELIST) ? url : this.SANITIZED_URL;
  }

  format(name, value) {
    if (name !== this.statics.blotName || !value) {
      super.format(name, value);
    } else {
      this.domNode.setAttribute('href', this.constructor.sanitize(value));
    }
  }

}

link_Link.blotName = 'link';
link_Link.tagName = 'A';
link_Link.SANITIZED_URL = 'about:blank';
link_Link.PROTOCOL_WHITELIST = ['http', 'https', 'mailto', 'tel'];

function sanitize(url, protocols) {
  var anchor = document.createElement('a');
  anchor.href = url;
  var protocol = anchor.href.slice(0, anchor.href.indexOf(':'));
  return protocols.indexOf(protocol) > -1;
}


// CONCATENATED MODULE: ./formats/script.js


class script_Script extends blots_inline {
  static create(value) {
    if (value === 'super') {
      return document.createElement('sup');
    }

    if (value === 'sub') {
      return document.createElement('sub');
    }

    return super.create(value);
  }

  static formats(domNode) {
    if (domNode.tagName === 'SUB') return 'sub';
    if (domNode.tagName === 'SUP') return 'super';
    return undefined;
  }

}

script_Script.blotName = 'script';
script_Script.tagName = ['SUB', 'SUP'];
/* harmony default export */ var script = (script_Script);
// CONCATENATED MODULE: ./formats/strike.js


class strike_Strike extends blots_inline {}

strike_Strike.blotName = 'strike';
strike_Strike.tagName = 'S';
/* harmony default export */ var strike = (strike_Strike);
// CONCATENATED MODULE: ./formats/underline.js


class underline_Underline extends blots_inline {}

underline_Underline.blotName = 'underline';
underline_Underline.tagName = 'U';
/* harmony default export */ var underline = (underline_Underline);
// CONCATENATED MODULE: ./formats/formula.js


class formula_Formula extends blots_embed {
  static create(value) {
    if (window.katex == null) {
      throw new Error('Formula module requires KaTeX.');
    }

    var node = super.create(value);

    if (typeof value === 'string') {
      window.katex.render(value, node, {
        throwOnError: false,
        errorColor: '#f00'
      });
      node.setAttribute('data-value', value);
    }

    return node;
  }

  static value(domNode) {
    return domNode.getAttribute('data-value');
  }

  html() {
    var _this$value = this.value(),
        formula = _this$value.formula;

    return "<span>".concat(formula, "</span>");
  }

}

formula_Formula.blotName = 'formula';
formula_Formula.className = 'ql-formula';
formula_Formula.tagName = 'SPAN';
/* harmony default export */ var formula = (formula_Formula);
// CONCATENATED MODULE: ./formats/image.js


var ATTRIBUTES = ['alt', 'height', 'width'];

class image_Image extends blot_embed {
  static create(value) {
    var node = super.create(value);

    if (typeof value === 'string') {
      node.setAttribute('src', this.sanitize(value));
    }

    return node;
  }

  static formats(domNode) {
    return ATTRIBUTES.reduce(function (formats, attribute) {
      if (domNode.hasAttribute(attribute)) {
        formats[attribute] = domNode.getAttribute(attribute);
      }

      return formats;
    }, {});
  }

  static match(url) {
    return /\.(jpe?g|gif|png)$/.test(url) || /^data:image\/.+;base64/.test(url);
  }

  static register() {
    if (/Firefox/i.test(navigator.userAgent)) {
      setTimeout(function () {
        // Disable image resizing in Firefox
        document.execCommand('enableObjectResizing', false, false);
      }, 1);
    }
  }

  static sanitize(url) {
    return sanitize(url, ['http', 'https', 'data']) ? url : '//:0';
  }

  static value(domNode) {
    return domNode.getAttribute('src');
  }

  format(name, value) {
    if (ATTRIBUTES.indexOf(name) > -1) {
      if (value) {
        this.domNode.setAttribute(name, value);
      } else {
        this.domNode.removeAttribute(name);
      }
    } else {
      super.format(name, value);
    }
  }

}

image_Image.blotName = 'image';
image_Image.tagName = 'IMG';
/* harmony default export */ var formats_image = (image_Image);
// CONCATENATED MODULE: ./formats/video.js


var video_ATTRIBUTES = ['height', 'width'];

class video_Video extends block_BlockEmbed {
  static create(value) {
    var node = super.create(value);
    node.setAttribute('frameborder', '0');
    node.setAttribute('allowfullscreen', true);
    node.setAttribute('src', this.sanitize(value));
    return node;
  }

  static formats(domNode) {
    return video_ATTRIBUTES.reduce(function (formats, attribute) {
      if (domNode.hasAttribute(attribute)) {
        formats[attribute] = domNode.getAttribute(attribute);
      }

      return formats;
    }, {});
  }

  static sanitize(url) {
    return link_Link.sanitize(url); // eslint-disable-line import/no-named-as-default-member
  }

  static value(domNode) {
    return domNode.getAttribute('src');
  }

  format(name, value) {
    if (video_ATTRIBUTES.indexOf(name) > -1) {
      if (value) {
        this.domNode.setAttribute(name, value);
      } else {
        this.domNode.removeAttribute(name);
      }
    } else {
      super.format(name, value);
    }
  }

  html() {
    var _this$value = this.value(),
        video = _this$value.video;

    return "<a href=\"".concat(video, "\">").concat(video, "</a>");
  }

}

video_Video.blotName = 'video';
video_Video.className = 'ql-video';
video_Video.tagName = 'IFRAME';
/* harmony default export */ var video = (video_Video);
// CONCATENATED MODULE: ./modules/syntax.js
function syntax_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }












var TokenAttributor = new attributor_class('code-token', 'hljs', {
  scope: src_scope.INLINE
});

class syntax_CodeToken extends blots_inline {
  static formats(node, scroll) {
    while (node != null && node !== scroll.domNode) {
      if (node.classList.contains(code_CodeBlock.className)) {
        return super.formats(node, scroll);
      }

      node = node.parentNode;
    }

    return undefined;
  }

  constructor(scroll, domNode, value) {
    super(scroll, domNode, value);
    TokenAttributor.add(this.domNode, value);
  }

  format(format, value) {
    if (format !== syntax_CodeToken.blotName) {
      super.format(format, value);
    } else if (value) {
      TokenAttributor.add(this.domNode, value);
    } else {
      TokenAttributor.remove(this.domNode);
      this.domNode.classList.remove(this.statics.className);
    }
  }

  optimize() {
    super.optimize.apply(this, arguments);

    if (!TokenAttributor.value(this.domNode)) {
      this.unwrap();
    }
  }

}

syntax_CodeToken.blotName = 'code-token';
syntax_CodeToken.className = 'ql-token';

class syntax_SyntaxCodeBlock extends code_CodeBlock {
  static create(value) {
    var domNode = super.create(value);

    if (typeof value === 'string') {
      domNode.setAttribute('data-language', value);
    }

    return domNode;
  }

  static formats(domNode) {
    return domNode.getAttribute('data-language') || 'plain';
  }

  static register() {} // Syntax module will register


  format(name, value) {
    if (name === this.statics.blotName && value) {
      this.domNode.setAttribute('data-language', value);
    } else {
      super.format(name, value);
    }
  }

  replaceWith(name, value) {
    this.formatAt(0, this.length(), syntax_CodeToken.blotName, false);
    return super.replaceWith(name, value);
  }

}

class syntax_SyntaxCodeBlockContainer extends code_CodeBlockContainer {
  attach() {
    super.attach();
    this.forceNext = false;
    this.scroll.emitMount(this);
  }

  format(name, value) {
    if (name === syntax_SyntaxCodeBlock.blotName) {
      this.forceNext = true;
      this.children.forEach(function (child) {
        child.format(name, value);
      });
    }
  }

  formatAt(index, length, name, value) {
    if (name === syntax_SyntaxCodeBlock.blotName) {
      this.forceNext = true;
    }

    super.formatAt(index, length, name, value);
  }

  highlight(highlight) {
    var _this = this;

    var forced = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    if (this.children.head == null) return;
    var nodes = Array.from(this.domNode.childNodes).filter(function (node) {
      return node !== _this.uiNode;
    });
    var text = "".concat(nodes.map(function (node) {
      return node.textContent;
    }).join('\n'), "\n");
    var language = syntax_SyntaxCodeBlock.formats(this.children.head.domNode);

    if (forced || this.forceNext || this.cachedText !== text) {
      if (text.trim().length > 0 || this.cachedText == null) {
        var oldDelta = this.children.reduce(function (delta, child) {
          return delta.concat(blockDelta(child));
        }, new Delta_default.a());
        var delta = highlight(text, language);
        oldDelta.diff(delta).reduce(function (index, _ref) {
          var retain = _ref.retain,
              attributes = _ref.attributes;
          // Should be all retains
          if (!retain) return index;

          if (attributes) {
            Object.keys(attributes).forEach(function (format) {
              if ([syntax_SyntaxCodeBlock.blotName, syntax_CodeToken.blotName].includes(format)) {
                _this.formatAt(index, retain, format, attributes[format]);
              }
            });
          }

          return index + retain;
        }, 0);
      }

      this.cachedText = text;
      this.forceNext = false;
    }
  }

  optimize(context) {
    super.optimize(context);

    if (this.parent != null && this.children.head != null && this.uiNode != null) {
      var language = syntax_SyntaxCodeBlock.formats(this.children.head.domNode);

      if (language !== this.uiNode.value) {
        this.uiNode.value = language;
      }
    }
  }

}

syntax_SyntaxCodeBlockContainer.allowedChildren = [syntax_SyntaxCodeBlock];
syntax_SyntaxCodeBlock.requiredContainer = syntax_SyntaxCodeBlockContainer;
syntax_SyntaxCodeBlock.allowedChildren = [syntax_CodeToken, cursor, text_Text, blots_break];

class syntax_Syntax extends core_module {
  static register() {
    Quill.register(syntax_CodeToken, true);
    Quill.register(syntax_SyntaxCodeBlock, true);
    Quill.register(syntax_SyntaxCodeBlockContainer, true);
  }

  constructor(quill, options) {
    super(quill, options);

    if (this.options.hljs == null) {
      throw new Error('Syntax module requires highlight.js. Please include the library on the page before Quill.');
    }

    this.highlightBlot = this.highlightBlot.bind(this);
    this.initListener();
    this.initTimer();
  }

  initListener() {
    var _this2 = this;

    this.quill.on(Quill.events.SCROLL_BLOT_MOUNT, function (blot) {
      if (!(blot instanceof syntax_SyntaxCodeBlockContainer)) return;

      var select = _this2.quill.root.ownerDocument.createElement('select');

      _this2.options.languages.forEach(function (_ref2) {
        var key = _ref2.key,
            label = _ref2.label;
        var option = select.ownerDocument.createElement('option');
        option.textContent = label;
        option.setAttribute('value', key);
        select.appendChild(option);
      });

      select.addEventListener('change', function () {
        blot.format(syntax_SyntaxCodeBlock.blotName, select.value);

        _this2.quill.root.focus(); // Prevent scrolling


        _this2.highlight(blot, true);
      });

      if (blot.uiNode == null) {
        blot.attachUI(select);

        if (blot.children.head) {
          select.value = syntax_SyntaxCodeBlock.formats(blot.children.head.domNode);
        }
      }
    });
  }

  initTimer() {
    var _this3 = this;

    var timer = null;
    this.quill.on(Quill.events.SCROLL_OPTIMIZE, function () {
      clearTimeout(timer);
      timer = setTimeout(function () {
        _this3.highlight();

        timer = null;
      }, _this3.options.interval);
    });
  }

  highlight() {
    var _this4 = this;

    var blot = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    if (this.quill.selection.composing) return;
    this.quill.update(Quill.sources.USER);
    var range = this.quill.getSelection();
    var blots = blot == null ? this.quill.scroll.descendants(syntax_SyntaxCodeBlockContainer) : [blot];
    blots.forEach(function (container) {
      container.highlight(_this4.highlightBlot, force);
    });
    this.quill.update(Quill.sources.SILENT);

    if (range != null) {
      this.quill.setSelection(range, Quill.sources.SILENT);
    }
  }

  highlightBlot(text) {
    var language = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'plain';

    if (language === 'plain') {
      return escapeText(text).split('\n').reduce(function (delta, line, i) {
        if (i !== 0) {
          delta.insert('\n', syntax_defineProperty({}, code_CodeBlock.blotName, language));
        }

        return delta.insert(line);
      }, new Delta_default.a());
    }

    var container = this.quill.root.ownerDocument.createElement('div');
    container.classList.add(code_CodeBlock.className);
    container.innerHTML = this.options.hljs.highlight(language, text).value;
    return traverse(this.quill.scroll, container, [function (node, delta) {
      var value = TokenAttributor.value(node);

      if (value) {
        return delta.compose(new Delta_default.a().retain(delta.length(), syntax_defineProperty({}, syntax_CodeToken.blotName, value)));
      }

      return delta;
    }], [function (node, delta) {
      return node.data.split('\n').reduce(function (memo, nodeText, i) {
        if (i !== 0) memo.insert('\n', syntax_defineProperty({}, code_CodeBlock.blotName, language));
        return memo.insert(nodeText);
      }, delta);
    }], new WeakMap());
  }

}

syntax_Syntax.DEFAULTS = {
  hljs: function () {
    return window.hljs;
  }(),
  interval: 1000,
  languages: [{
    key: 'plain',
    label: 'Plain'
  }, {
    key: 'bash',
    label: 'Bash'
  }, {
    key: 'cpp',
    label: 'C++'
  }, {
    key: 'cs',
    label: 'C#'
  }, {
    key: 'css',
    label: 'CSS'
  }, {
    key: 'diff',
    label: 'Diff'
  }, {
    key: 'xml',
    label: 'HTML/XML'
  }, {
    key: 'java',
    label: 'Java'
  }, {
    key: 'javascript',
    label: 'Javascript'
  }, {
    key: 'markdown',
    label: 'Markdown'
  }, {
    key: 'php',
    label: 'PHP'
  }, {
    key: 'python',
    label: 'Python'
  }, {
    key: 'ruby',
    label: 'Ruby'
  }, {
    key: 'sql',
    label: 'SQL'
  }]
};

// CONCATENATED MODULE: ./formats/table.js
function table_slicedToArray(arr, i) { return table_arrayWithHoles(arr) || table_iterableToArrayLimit(arr, i) || table_nonIterableRest(); }

function table_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function table_iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function table_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }




class table_TableCell extends block_Block {
  static create(value) {
    var node = super.create();

    if (value) {
      node.setAttribute('data-row', value);
    } else {
      node.setAttribute('data-row', tableId());
    }

    return node;
  }

  static formats(domNode) {
    if (domNode.hasAttribute('data-row')) {
      return domNode.getAttribute('data-row');
    }

    return undefined;
  }

  cellOffset() {
    if (this.parent) {
      return this.parent.children.indexOf(this);
    }

    return -1;
  }

  format(name, value) {
    if (name === table_TableCell.blotName && value) {
      this.domNode.setAttribute('data-row', value);
    } else {
      super.format(name, value);
    }
  }

  row() {
    return this.parent;
  }

  rowOffset() {
    if (this.row()) {
      return this.row().rowOffset();
    }

    return -1;
  }

  table() {
    return this.row() && this.row().table();
  }

}

table_TableCell.blotName = 'table';
table_TableCell.tagName = 'TD';

class table_TableRow extends blots_container {
  checkMerge() {
    if (super.checkMerge() && this.next.children.head != null) {
      var thisHead = this.children.head.formats();
      var thisTail = this.children.tail.formats();
      var nextHead = this.next.children.head.formats();
      var nextTail = this.next.children.tail.formats();
      return thisHead.table === thisTail.table && thisHead.table === nextHead.table && thisHead.table === nextTail.table;
    }

    return false;
  }

  optimize() {
    var _this = this;

    super.optimize.apply(this, arguments);
    this.children.forEach(function (child) {
      if (child.next == null) return;
      var childFormats = child.formats();
      var nextFormats = child.next.formats();

      if (childFormats.table !== nextFormats.table) {
        var next = _this.splitAfter(child);

        if (next) {
          next.optimize();
        } // We might be able to merge with prev now


        if (_this.prev) {
          _this.prev.optimize();
        }
      }
    });
  }

  rowOffset() {
    if (this.parent) {
      return this.parent.children.indexOf(this);
    }

    return -1;
  }

  table() {
    return this.parent && this.parent.parent;
  }

}

table_TableRow.blotName = 'table-row';
table_TableRow.tagName = 'TR';

class table_TableBody extends blots_container {}

table_TableBody.blotName = 'table-body';
table_TableBody.tagName = 'TBODY';

class table_TableContainer extends blots_container {
  balanceCells() {
    var _this2 = this;

    var rows = this.descendants(table_TableRow);
    var maxColumns = rows.reduce(function (max, row) {
      return Math.max(row.children.length, max);
    }, 0);
    rows.forEach(function (row) {
      new Array(maxColumns - row.children.length).fill(0).forEach(function () {
        var value;

        if (row.children.head != null) {
          value = table_TableCell.formats(row.children.head.domNode);
        }

        var blot = _this2.scroll.create(table_TableCell.blotName, value);

        row.appendChild(blot);
        blot.optimize(); // Add break blot
      });
    });
  }

  cells(column) {
    return this.rows().map(function (row) {
      return row.children.at(column);
    });
  }

  deleteColumn(index) {
    var _this$descendant = this.descendant(table_TableBody),
        _this$descendant2 = table_slicedToArray(_this$descendant, 1),
        body = _this$descendant2[0];

    if (body == null || body.children.head == null) return;
    body.children.forEach(function (row) {
      var cell = row.children.at(index);

      if (cell != null) {
        cell.remove();
      }
    });
  }

  insertColumn(index) {
    var _this3 = this;

    var _this$descendant3 = this.descendant(table_TableBody),
        _this$descendant4 = table_slicedToArray(_this$descendant3, 1),
        body = _this$descendant4[0];

    if (body == null || body.children.head == null) return;
    body.children.forEach(function (row) {
      var ref = row.children.at(index);
      var value = table_TableCell.formats(row.children.head.domNode);

      var cell = _this3.scroll.create(table_TableCell.blotName, value);

      row.insertBefore(cell, ref);
    });
  }

  insertRow(index) {
    var _this4 = this;

    var _this$descendant5 = this.descendant(table_TableBody),
        _this$descendant6 = table_slicedToArray(_this$descendant5, 1),
        body = _this$descendant6[0];

    if (body == null || body.children.head == null) return;
    var id = tableId();
    var row = this.scroll.create(table_TableRow.blotName);
    body.children.head.children.forEach(function () {
      var cell = _this4.scroll.create(table_TableCell.blotName, id);

      row.appendChild(cell);
    });
    var ref = body.children.at(index);
    body.insertBefore(row, ref);
  }

  rows() {
    var body = this.children.head;
    if (body == null) return [];
    return body.children.map(function (row) {
      return row;
    });
  }

}

table_TableContainer.blotName = 'table-container';
table_TableContainer.tagName = 'TABLE';
table_TableContainer.allowedChildren = [table_TableBody];
table_TableBody.requiredContainer = table_TableContainer;
table_TableBody.allowedChildren = [table_TableRow];
table_TableRow.requiredContainer = table_TableBody;
table_TableRow.allowedChildren = [table_TableCell];
table_TableCell.requiredContainer = table_TableRow;

function tableId() {
  var id = Math.random().toString(36).slice(2, 6);
  return "row-".concat(id);
}


// CONCATENATED MODULE: ./modules/table.js
function modules_table_slicedToArray(arr, i) { return modules_table_arrayWithHoles(arr) || modules_table_iterableToArrayLimit(arr, i) || modules_table_nonIterableRest(); }

function modules_table_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function modules_table_iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function modules_table_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }






class table_Table extends core_module {
  static register() {
    Quill.register(table_TableCell);
    Quill.register(table_TableRow);
    Quill.register(table_TableBody);
    Quill.register(table_TableContainer);
  }

  constructor() {
    super(...arguments);
    this.listenBalanceCells();
  }

  balanceTables() {
    this.quill.scroll.descendants(table_TableContainer).forEach(function (table) {
      table.balanceCells();
    });
  }

  deleteColumn() {
    var _this$getTable = this.getTable(),
        _this$getTable2 = modules_table_slicedToArray(_this$getTable, 3),
        table = _this$getTable2[0],
        cell = _this$getTable2[2];

    if (cell == null) return;
    table.deleteColumn(cell.cellOffset());
    this.quill.update(Quill.sources.USER);
  }

  deleteRow() {
    var _this$getTable3 = this.getTable(),
        _this$getTable4 = modules_table_slicedToArray(_this$getTable3, 2),
        row = _this$getTable4[1];

    if (row == null) return;
    row.remove();
    this.quill.update(Quill.sources.USER);
  }

  deleteTable() {
    var _this$getTable5 = this.getTable(),
        _this$getTable6 = modules_table_slicedToArray(_this$getTable5, 1),
        table = _this$getTable6[0];

    if (table == null) return;
    var offset = table.offset();
    table.remove();
    this.quill.update(Quill.sources.USER);
    this.quill.setSelection(offset, Quill.sources.SILENT);
  }

  getTable() {
    var range = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.quill.getSelection();
    if (range == null) return [null, null, null, -1];

    var _this$quill$getLine = this.quill.getLine(range.index),
        _this$quill$getLine2 = modules_table_slicedToArray(_this$quill$getLine, 2),
        cell = _this$quill$getLine2[0],
        offset = _this$quill$getLine2[1];

    if (cell == null || cell.statics.blotName !== table_TableCell.blotName) {
      return [null, null, null, -1];
    }

    var row = cell.parent;
    var table = row.parent.parent;
    return [table, row, cell, offset];
  }

  insertColumn(offset) {
    var range = this.quill.getSelection();

    var _this$getTable7 = this.getTable(range),
        _this$getTable8 = modules_table_slicedToArray(_this$getTable7, 3),
        table = _this$getTable8[0],
        row = _this$getTable8[1],
        cell = _this$getTable8[2];

    if (cell == null) return;
    var column = cell.cellOffset();
    table.insertColumn(column + offset);
    this.quill.update(Quill.sources.USER);
    var shift = row.rowOffset();

    if (offset === 0) {
      shift += 1;
    }

    this.quill.setSelection(range.index + shift, range.length, Quill.sources.SILENT);
  }

  insertColumnLeft() {
    this.insertColumn(0);
  }

  insertColumnRight() {
    this.insertColumn(1);
  }

  insertRow(offset) {
    var range = this.quill.getSelection();

    var _this$getTable9 = this.getTable(range),
        _this$getTable10 = modules_table_slicedToArray(_this$getTable9, 3),
        table = _this$getTable10[0],
        row = _this$getTable10[1],
        cell = _this$getTable10[2];

    if (cell == null) return;
    var index = row.rowOffset();
    table.insertRow(index + offset);
    this.quill.update(Quill.sources.USER);

    if (offset > 0) {
      this.quill.setSelection(range, Quill.sources.SILENT);
    } else {
      this.quill.setSelection(range.index + row.children.length, range.length, Quill.sources.SILENT);
    }
  }

  insertRowAbove() {
    this.insertRow(0);
  }

  insertRowBelow() {
    this.insertRow(1);
  }

  insertTable(rows, columns) {
    var range = this.quill.getSelection();
    if (range == null) return;
    var delta = new Array(rows).fill(0).reduce(function (memo) {
      var text = new Array(columns).fill('\n').join('');
      return memo.insert(text, {
        table: tableId()
      });
    }, new Delta_default.a().retain(range.index));
    this.quill.updateContents(delta, Quill.sources.USER);
    this.quill.setSelection(range.index, Quill.sources.SILENT);
    this.balanceTables();
  }

  listenBalanceCells() {
    var _this = this;

    this.quill.on(Quill.events.SCROLL_OPTIMIZE, function (mutations) {
      mutations.some(function (mutation) {
        if (['TD', 'TR', 'TBODY', 'TABLE'].includes(mutation.target.tagName)) {
          _this.quill.once(Quill.events.TEXT_CHANGE, function (delta, old, source) {
            if (source !== Quill.sources.USER) return;

            _this.balanceTables();
          });

          return true;
        }

        return false;
      });
    });
  }

}

/* harmony default export */ var modules_table = (table_Table);
// CONCATENATED MODULE: ./modules/toolbar.js
function toolbar_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function toolbar_slicedToArray(arr, i) { return toolbar_arrayWithHoles(arr) || toolbar_iterableToArrayLimit(arr, i) || toolbar_nonIterableRest(); }

function toolbar_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function toolbar_iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function toolbar_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }






var toolbar_debug = logger('quill:toolbar');

class toolbar_Toolbar extends core_module {
  constructor(quill, options) {
    var _this;

    super(quill, options);
    _this = this;

    if (Array.isArray(this.options.container)) {
      var container = document.createElement('div');
      addControls(container, this.options.container);
      quill.container.parentNode.insertBefore(container, quill.container);
      this.container = container;
    } else if (typeof this.options.container === 'string') {
      this.container = document.querySelector(this.options.container);
    } else {
      this.container = this.options.container;
    }

    if (!(this.container instanceof HTMLElement)) {
      return toolbar_debug.error('Container required for toolbar', this.options);
    }

    this.container.classList.add('ql-toolbar');
    this.controls = [];
    this.handlers = {};
    Object.keys(this.options.handlers).forEach(function (format) {
      _this.addHandler(format, _this.options.handlers[format]);
    });
    Array.from(this.container.querySelectorAll('button, select')).forEach(function (input) {
      _this.attach(input);
    });
    this.quill.on(Quill.events.EDITOR_CHANGE, function (type, range) {
      if (type === Quill.events.SELECTION_CHANGE) {
        _this.update(range);
      }
    });
    this.quill.on(Quill.events.SCROLL_OPTIMIZE, function () {
      var _this$quill$selection = _this.quill.selection.getRange(),
          _this$quill$selection2 = toolbar_slicedToArray(_this$quill$selection, 1),
          range = _this$quill$selection2[0]; // quill.getSelection triggers update


      _this.update(range);
    });
  }

  addHandler(format, handler) {
    this.handlers[format] = handler;
  }

  attach(input) {
    var _this2 = this;

    var format = Array.from(input.classList).find(function (className) {
      return className.indexOf('ql-') === 0;
    });
    if (!format) return;
    format = format.slice('ql-'.length);

    if (input.tagName === 'BUTTON') {
      input.setAttribute('type', 'button');
    }

    if (this.handlers[format] == null && this.quill.scroll.query(format) == null) {
      toolbar_debug.warn('ignoring attaching to nonexistent format', format, input);
      return;
    }

    var eventName = input.tagName === 'SELECT' ? 'change' : 'click';
    input.addEventListener(eventName, function (e) {
      var value;

      if (input.tagName === 'SELECT') {
        if (input.selectedIndex < 0) return;
        var selected = input.options[input.selectedIndex];

        if (selected.hasAttribute('selected')) {
          value = false;
        } else {
          value = selected.value || false;
        }
      } else {
        if (input.classList.contains('ql-active')) {
          value = false;
        } else {
          value = input.value || !input.hasAttribute('value');
        }

        e.preventDefault();
      }

      _this2.quill.focus();

      var _this2$quill$selectio = _this2.quill.selection.getRange(),
          _this2$quill$selectio2 = toolbar_slicedToArray(_this2$quill$selectio, 1),
          range = _this2$quill$selectio2[0];

      if (_this2.handlers[format] != null) {
        _this2.handlers[format].call(_this2, value);
      } else if (_this2.quill.scroll.query(format).prototype instanceof blot_embed) {
        value = prompt("Enter ".concat(format)); // eslint-disable-line no-alert

        if (!value) return;

        _this2.quill.updateContents(new Delta_default.a().retain(range.index).delete(range.length).insert(toolbar_defineProperty({}, format, value)), Quill.sources.USER);
      } else {
        _this2.quill.format(format, value, Quill.sources.USER);
      }

      _this2.update(range);
    });
    this.controls.push([format, input]);
  }

  update(range) {
    var formats = range == null ? {} : this.quill.getFormat(range);
    this.controls.forEach(function (pair) {
      var _pair = toolbar_slicedToArray(pair, 2),
          format = _pair[0],
          input = _pair[1];

      if (input.tagName === 'SELECT') {
        var option;

        if (range == null) {
          option = null;
        } else if (formats[format] == null) {
          option = input.querySelector('option[selected]');
        } else if (!Array.isArray(formats[format])) {
          var value = formats[format];

          if (typeof value === 'string') {
            value = value.replace(/"/g, '\\"');
          }

          option = input.querySelector("option[value=\"".concat(value, "\"]"));
        }

        if (option == null) {
          input.value = ''; // TODO make configurable?

          input.selectedIndex = -1;
        } else {
          option.selected = true;
        }
      } else if (range == null) {
        input.classList.remove('ql-active');
      } else if (input.hasAttribute('value')) {
        // both being null should match (default values)
        // '1' should match with 1 (headers)
        var isActive = formats[format] === input.getAttribute('value') || formats[format] != null && formats[format].toString() === input.getAttribute('value') || formats[format] == null && !input.getAttribute('value');
        input.classList.toggle('ql-active', isActive);
      } else {
        input.classList.toggle('ql-active', formats[format] != null);
      }
    });
  }

}

toolbar_Toolbar.DEFAULTS = {};

function addButton(container, format, value) {
  var input = document.createElement('button');
  input.setAttribute('type', 'button');
  input.classList.add("ql-".concat(format));

  if (value != null) {
    input.value = value;
  }

  container.appendChild(input);
}

function addControls(container, groups) {
  if (!Array.isArray(groups[0])) {
    groups = [groups];
  }

  groups.forEach(function (controls) {
    var group = document.createElement('span');
    group.classList.add('ql-formats');
    controls.forEach(function (control) {
      if (typeof control === 'string') {
        addButton(group, control);
      } else {
        var format = Object.keys(control)[0];
        var value = control[format];

        if (Array.isArray(value)) {
          addSelect(group, format, value);
        } else {
          addButton(group, format, value);
        }
      }
    });
    container.appendChild(group);
  });
}

function addSelect(container, format, values) {
  var input = document.createElement('select');
  input.classList.add("ql-".concat(format));
  values.forEach(function (value) {
    var option = document.createElement('option');

    if (value !== false) {
      option.setAttribute('value', value);
    } else {
      option.setAttribute('selected', 'selected');
    }

    input.appendChild(option);
  });
  container.appendChild(input);
}

toolbar_Toolbar.DEFAULTS = {
  container: null,
  handlers: {
    clean: function clean() {
      var _this3 = this;

      var range = this.quill.getSelection();
      if (range == null) return;

      if (range.length === 0) {
        var formats = this.quill.getFormat();
        Object.keys(formats).forEach(function (name) {
          // Clean functionality in existing apps only clean inline formats
          if (_this3.quill.scroll.query(name, src_scope.INLINE) != null) {
            _this3.quill.format(name, false, Quill.sources.USER);
          }
        });
      } else {
        this.quill.removeFormat(range, Quill.sources.USER);
      }
    },
    direction: function direction(value) {
      var _this$quill$getFormat = this.quill.getFormat(),
          align = _this$quill$getFormat.align;

      if (value === 'rtl' && align == null) {
        this.quill.format('align', 'right', Quill.sources.USER);
      } else if (!value && align === 'right') {
        this.quill.format('align', false, Quill.sources.USER);
      }

      this.quill.format('direction', value, Quill.sources.USER);
    },
    indent: function indent(value) {
      var range = this.quill.getSelection();
      var formats = this.quill.getFormat(range);
      var indent = parseInt(formats.indent || 0, 10);

      if (value === '+1' || value === '-1') {
        var modifier = value === '+1' ? 1 : -1;
        if (formats.direction === 'rtl') modifier *= -1;
        this.quill.format('indent', indent + modifier, Quill.sources.USER);
      }
    },
    link: function link(value) {
      if (value === true) {
        value = prompt('Enter link URL:'); // eslint-disable-line no-alert
      }

      this.quill.format('link', value, Quill.sources.USER);
    },
    list: function list(value) {
      var range = this.quill.getSelection();
      var formats = this.quill.getFormat(range);

      if (value === 'check') {
        if (formats.list === 'checked' || formats.list === 'unchecked') {
          this.quill.format('list', false, Quill.sources.USER);
        } else {
          this.quill.format('list', 'unchecked', Quill.sources.USER);
        }
      } else {
        this.quill.format('list', value, Quill.sources.USER);
      }
    }
  }
};

// EXTERNAL MODULE: ./assets/icons/align-left.svg
var align_left = __webpack_require__(7);
var align_left_default = /*#__PURE__*/__webpack_require__.n(align_left);

// EXTERNAL MODULE: ./assets/icons/align-center.svg
var align_center = __webpack_require__(8);
var align_center_default = /*#__PURE__*/__webpack_require__.n(align_center);

// EXTERNAL MODULE: ./assets/icons/align-right.svg
var align_right = __webpack_require__(9);
var align_right_default = /*#__PURE__*/__webpack_require__.n(align_right);

// EXTERNAL MODULE: ./assets/icons/align-justify.svg
var align_justify = __webpack_require__(10);
var align_justify_default = /*#__PURE__*/__webpack_require__.n(align_justify);

// EXTERNAL MODULE: ./assets/icons/background.svg
var background = __webpack_require__(11);
var background_default = /*#__PURE__*/__webpack_require__.n(background);

// EXTERNAL MODULE: ./assets/icons/blockquote.svg
var icons_blockquote = __webpack_require__(12);
var blockquote_default = /*#__PURE__*/__webpack_require__.n(icons_blockquote);

// EXTERNAL MODULE: ./assets/icons/bold.svg
var icons_bold = __webpack_require__(13);
var bold_default = /*#__PURE__*/__webpack_require__.n(icons_bold);

// EXTERNAL MODULE: ./assets/icons/clean.svg
var icons_clean = __webpack_require__(14);
var clean_default = /*#__PURE__*/__webpack_require__.n(icons_clean);

// EXTERNAL MODULE: ./assets/icons/code.svg
var code = __webpack_require__(4);
var code_default = /*#__PURE__*/__webpack_require__.n(code);

// EXTERNAL MODULE: ./assets/icons/color.svg
var color = __webpack_require__(15);
var color_default = /*#__PURE__*/__webpack_require__.n(color);

// EXTERNAL MODULE: ./assets/icons/direction-ltr.svg
var direction_ltr = __webpack_require__(16);
var direction_ltr_default = /*#__PURE__*/__webpack_require__.n(direction_ltr);

// EXTERNAL MODULE: ./assets/icons/direction-rtl.svg
var direction_rtl = __webpack_require__(17);
var direction_rtl_default = /*#__PURE__*/__webpack_require__.n(direction_rtl);

// EXTERNAL MODULE: ./assets/icons/formula.svg
var icons_formula = __webpack_require__(18);
var formula_default = /*#__PURE__*/__webpack_require__.n(icons_formula);

// EXTERNAL MODULE: ./assets/icons/header.svg
var icons_header = __webpack_require__(19);
var header_default = /*#__PURE__*/__webpack_require__.n(icons_header);

// EXTERNAL MODULE: ./assets/icons/header-2.svg
var header_2 = __webpack_require__(20);
var header_2_default = /*#__PURE__*/__webpack_require__.n(header_2);

// EXTERNAL MODULE: ./assets/icons/italic.svg
var icons_italic = __webpack_require__(21);
var italic_default = /*#__PURE__*/__webpack_require__.n(icons_italic);

// EXTERNAL MODULE: ./assets/icons/image.svg
var icons_image = __webpack_require__(22);
var image_default = /*#__PURE__*/__webpack_require__.n(icons_image);

// EXTERNAL MODULE: ./assets/icons/indent.svg
var icons_indent = __webpack_require__(23);
var indent_default = /*#__PURE__*/__webpack_require__.n(icons_indent);

// EXTERNAL MODULE: ./assets/icons/outdent.svg
var outdent = __webpack_require__(24);
var outdent_default = /*#__PURE__*/__webpack_require__.n(outdent);

// EXTERNAL MODULE: ./assets/icons/link.svg
var icons_link = __webpack_require__(25);
var link_default = /*#__PURE__*/__webpack_require__.n(icons_link);

// EXTERNAL MODULE: ./assets/icons/list-bullet.svg
var list_bullet = __webpack_require__(26);
var list_bullet_default = /*#__PURE__*/__webpack_require__.n(list_bullet);

// EXTERNAL MODULE: ./assets/icons/list-check.svg
var list_check = __webpack_require__(27);
var list_check_default = /*#__PURE__*/__webpack_require__.n(list_check);

// EXTERNAL MODULE: ./assets/icons/list-ordered.svg
var list_ordered = __webpack_require__(28);
var list_ordered_default = /*#__PURE__*/__webpack_require__.n(list_ordered);

// EXTERNAL MODULE: ./assets/icons/subscript.svg
var subscript = __webpack_require__(29);
var subscript_default = /*#__PURE__*/__webpack_require__.n(subscript);

// EXTERNAL MODULE: ./assets/icons/superscript.svg
var superscript = __webpack_require__(30);
var superscript_default = /*#__PURE__*/__webpack_require__.n(superscript);

// EXTERNAL MODULE: ./assets/icons/strike.svg
var icons_strike = __webpack_require__(31);
var strike_default = /*#__PURE__*/__webpack_require__.n(icons_strike);

// EXTERNAL MODULE: ./assets/icons/table.svg
var icons_table = __webpack_require__(32);
var table_default = /*#__PURE__*/__webpack_require__.n(icons_table);

// EXTERNAL MODULE: ./assets/icons/underline.svg
var icons_underline = __webpack_require__(33);
var underline_default = /*#__PURE__*/__webpack_require__.n(icons_underline);

// EXTERNAL MODULE: ./assets/icons/video.svg
var icons_video = __webpack_require__(34);
var video_default = /*#__PURE__*/__webpack_require__.n(icons_video);

// CONCATENATED MODULE: ./ui/icons.js




























 // module.exports = {

/* harmony default export */ var ui_icons = ({
  align: {
    '': align_left_default.a,
    center: align_center_default.a,
    right: align_right_default.a,
    justify: align_justify_default.a
  },
  background: background_default.a,
  blockquote: blockquote_default.a,
  bold: bold_default.a,
  clean: clean_default.a,
  code: code_default.a,
  'code-block': code_default.a,
  color: color_default.a,
  direction: {
    '': direction_ltr_default.a,
    rtl: direction_rtl_default.a
  },
  formula: formula_default.a,
  header: {
    '1': header_default.a,
    '2': header_2_default.a
  },
  italic: italic_default.a,
  image: image_default.a,
  indent: {
    '+1': indent_default.a,
    '-1': outdent_default.a
  },
  link: link_default.a,
  list: {
    bullet: list_bullet_default.a,
    check: list_check_default.a,
    ordered: list_ordered_default.a
  },
  script: {
    sub: subscript_default.a,
    super: superscript_default.a
  },
  strike: strike_default.a,
  table: table_default.a,
  underline: underline_default.a,
  video: video_default.a
});
// EXTERNAL MODULE: ./assets/icons/dropdown.svg
var dropdown = __webpack_require__(35);
var dropdown_default = /*#__PURE__*/__webpack_require__.n(dropdown);

// CONCATENATED MODULE: ./ui/picker.js

var optionsCounter = 0;

function toggleAriaAttribute(element, attribute) {
  element.setAttribute(attribute, !(element.getAttribute(attribute) === 'true'));
}

class picker_Picker {
  constructor(select) {
    var _this = this;

    this.select = select;
    this.container = document.createElement('span');
    this.buildPicker();
    this.select.style.display = 'none';
    this.select.parentNode.insertBefore(this.container, this.select);
    this.label.addEventListener('mousedown', function () {
      _this.togglePicker();
    });
    this.label.addEventListener('keydown', function (event) {
      switch (event.key) {
        case 'Enter':
          _this.togglePicker();

          break;

        case 'Escape':
          _this.escape();

          event.preventDefault();
          break;

        default:
      }
    });
    this.select.addEventListener('change', this.update.bind(this));
  }

  togglePicker() {
    this.container.classList.toggle('ql-expanded'); // Toggle aria-expanded and aria-hidden to make the picker accessible

    toggleAriaAttribute(this.label, 'aria-expanded');
    toggleAriaAttribute(this.options, 'aria-hidden');
  }

  buildItem(option) {
    var _this2 = this;

    var item = document.createElement('span');
    item.tabIndex = '0';
    item.setAttribute('role', 'button');
    item.classList.add('ql-picker-item');

    if (option.hasAttribute('value')) {
      item.setAttribute('data-value', option.getAttribute('value'));
    }

    if (option.textContent) {
      item.setAttribute('data-label', option.textContent);
    }

    item.addEventListener('click', function () {
      _this2.selectItem(item, true);
    });
    item.addEventListener('keydown', function (event) {
      switch (event.key) {
        case 'Enter':
          _this2.selectItem(item, true);

          event.preventDefault();
          break;

        case 'Escape':
          _this2.escape();

          event.preventDefault();
          break;

        default:
      }
    });
    return item;
  }

  buildLabel() {
    var label = document.createElement('span');
    label.classList.add('ql-picker-label');
    label.innerHTML = dropdown_default.a;
    label.tabIndex = '0';
    label.setAttribute('role', 'button');
    label.setAttribute('aria-expanded', 'false');
    this.container.appendChild(label);
    return label;
  }

  buildOptions() {
    var _this3 = this;

    var options = document.createElement('span');
    options.classList.add('ql-picker-options'); // Don't want screen readers to read this until options are visible

    options.setAttribute('aria-hidden', 'true');
    options.tabIndex = '-1'; // Need a unique id for aria-controls

    options.id = "ql-picker-options-".concat(optionsCounter);
    optionsCounter += 1;
    this.label.setAttribute('aria-controls', options.id);
    this.options = options;
    Array.from(this.select.options).forEach(function (option) {
      var item = _this3.buildItem(option);

      options.appendChild(item);

      if (option.selected === true) {
        _this3.selectItem(item);
      }
    });
    this.container.appendChild(options);
  }

  buildPicker() {
    var _this4 = this;

    Array.from(this.select.attributes).forEach(function (item) {
      _this4.container.setAttribute(item.name, item.value);
    });
    this.container.classList.add('ql-picker');
    this.label = this.buildLabel();
    this.buildOptions();
  }

  escape() {
    var _this5 = this;

    // Close menu and return focus to trigger label
    this.close(); // Need setTimeout for accessibility to ensure that the browser executes
    // focus on the next process thread and after any DOM content changes

    setTimeout(function () {
      return _this5.label.focus();
    }, 1);
  }

  close() {
    this.container.classList.remove('ql-expanded');
    this.label.setAttribute('aria-expanded', 'false');
    this.options.setAttribute('aria-hidden', 'true');
  }

  selectItem(item) {
    var trigger = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    var selected = this.container.querySelector('.ql-selected');
    if (item === selected) return;

    if (selected != null) {
      selected.classList.remove('ql-selected');
    }

    if (item == null) return;
    item.classList.add('ql-selected');
    this.select.selectedIndex = Array.from(item.parentNode.children).indexOf(item);

    if (item.hasAttribute('data-value')) {
      this.label.setAttribute('data-value', item.getAttribute('data-value'));
    } else {
      this.label.removeAttribute('data-value');
    }

    if (item.hasAttribute('data-label')) {
      this.label.setAttribute('data-label', item.getAttribute('data-label'));
    } else {
      this.label.removeAttribute('data-label');
    }

    if (trigger) {
      this.select.dispatchEvent(new Event('change'));
      this.close();
    }
  }

  update() {
    var option;

    if (this.select.selectedIndex > -1) {
      var item = this.container.querySelector('.ql-picker-options').children[this.select.selectedIndex];
      option = this.select.options[this.select.selectedIndex];
      this.selectItem(item);
    } else {
      this.selectItem(null);
    }

    var isActive = option != null && option !== this.select.querySelector('option[selected]');
    this.label.classList.toggle('ql-active', isActive);
  }

}

/* harmony default export */ var picker = (picker_Picker);
// CONCATENATED MODULE: ./ui/color-picker.js


class color_picker_ColorPicker extends picker {
  constructor(select, label) {
    super(select);
    this.label.innerHTML = label;
    this.container.classList.add('ql-color-picker');
    Array.from(this.container.querySelectorAll('.ql-picker-item')).slice(0, 7).forEach(function (item) {
      item.classList.add('ql-primary');
    });
  }

  buildItem(option) {
    var item = super.buildItem(option);
    item.style.backgroundColor = option.getAttribute('value') || '';
    return item;
  }

  selectItem(item, trigger) {
    super.selectItem(item, trigger);
    var colorLabel = this.label.querySelector('.ql-color-label');
    var value = item ? item.getAttribute('data-value') || '' : '';

    if (colorLabel) {
      if (colorLabel.tagName === 'line') {
        colorLabel.style.stroke = value;
      } else {
        colorLabel.style.fill = value;
      }
    }
  }

}

/* harmony default export */ var color_picker = (color_picker_ColorPicker);
// CONCATENATED MODULE: ./ui/icon-picker.js


class icon_picker_IconPicker extends picker {
  constructor(select, icons) {
    super(select);
    this.container.classList.add('ql-icon-picker');
    Array.from(this.container.querySelectorAll('.ql-picker-item')).forEach(function (item) {
      item.innerHTML = icons[item.getAttribute('data-value') || ''];
    });
    this.defaultItem = this.container.querySelector('.ql-selected');
    this.selectItem(this.defaultItem);
  }

  selectItem(target, trigger) {
    super.selectItem(target, trigger);
    var item = target || this.defaultItem;
    if (this.label.innerHTML === item.innerHTML) return;
    this.label.innerHTML = item.innerHTML;
  }

}

/* harmony default export */ var icon_picker = (icon_picker_IconPicker);
// CONCATENATED MODULE: ./ui/tooltip.js
class Tooltip {
  constructor(quill, boundsContainer) {
    var _this = this;

    this.quill = quill;
    this.boundsContainer = boundsContainer || document.body;
    this.root = quill.addContainer('ql-tooltip');
    this.root.innerHTML = this.constructor.TEMPLATE;

    if (this.quill.root === this.quill.scrollingContainer) {
      this.quill.root.addEventListener('scroll', function () {
        _this.root.style.marginTop = "".concat(-1 * _this.quill.root.scrollTop, "px");
      });
    }

    this.hide();
  }

  hide() {
    this.root.classList.add('ql-hidden');
  }

  position(reference) {
    var left = reference.left + reference.width / 2 - this.root.offsetWidth / 2; // root.scrollTop should be 0 if scrollContainer !== root

    var top = reference.bottom + this.quill.root.scrollTop;
    this.root.style.left = "".concat(left, "px");
    this.root.style.top = "".concat(top, "px");
    this.root.classList.remove('ql-flip');
    var containerBounds = this.boundsContainer.getBoundingClientRect();
    var rootBounds = this.root.getBoundingClientRect();
    var shift = 0;

    if (rootBounds.right > containerBounds.right) {
      shift = containerBounds.right - rootBounds.right;
      this.root.style.left = "".concat(left + shift, "px");
    }

    if (rootBounds.left < containerBounds.left) {
      shift = containerBounds.left - rootBounds.left;
      this.root.style.left = "".concat(left + shift, "px");
    }

    if (rootBounds.bottom > containerBounds.bottom) {
      var height = rootBounds.bottom - rootBounds.top;
      var verticalShift = reference.bottom - reference.top + height;
      this.root.style.top = "".concat(top - verticalShift, "px");
      this.root.classList.add('ql-flip');
    }

    return shift;
  }

  show() {
    this.root.classList.remove('ql-editing');
    this.root.classList.remove('ql-hidden');
  }

}

/* harmony default export */ var tooltip = (Tooltip);
// CONCATENATED MODULE: ./themes/base.js







var ALIGNS = [false, 'center', 'right', 'justify'];
var COLORS = ['#000000', '#e60000', '#ff9900', '#ffff00', '#008a00', '#0066cc', '#9933ff', '#ffffff', '#facccc', '#ffebcc', '#ffffcc', '#cce8cc', '#cce0f5', '#ebd6ff', '#bbbbbb', '#f06666', '#ffc266', '#ffff66', '#66b966', '#66a3e0', '#c285ff', '#888888', '#a10000', '#b26b00', '#b2b200', '#006100', '#0047b2', '#6b24b2', '#444444', '#5c0000', '#663d00', '#666600', '#003700', '#002966', '#3d1466'];
var FONTS = [false, 'serif', 'monospace'];
var HEADERS = ['1', '2', '3', false];
var SIZES = ['small', false, 'large', 'huge'];

class base_BaseTheme extends theme {
  constructor(quill, options) {
    var _this;

    super(quill, options);
    _this = this;

    var listener = function listener(e) {
      if (!document.body.contains(quill.root)) {
        document.body.removeEventListener('click', listener);
        return;
      }

      if (_this.tooltip != null && !_this.tooltip.root.contains(e.target) && document.activeElement !== _this.tooltip.textbox && !_this.quill.hasFocus()) {
        _this.tooltip.hide();
      }

      if (_this.pickers != null) {
        _this.pickers.forEach(function (picker) {
          if (!picker.container.contains(e.target)) {
            picker.close();
          }
        });
      }
    };

    quill.emitter.listenDOM('click', document.body, listener);
  }

  addModule(name) {
    var module = super.addModule(name);

    if (name === 'toolbar') {
      this.extendToolbar(module);
    }

    return module;
  }

  buildButtons(buttons, icons) {
    Array.from(buttons).forEach(function (button) {
      var className = button.getAttribute('class') || '';
      className.split(/\s+/).forEach(function (name) {
        if (!name.startsWith('ql-')) return;
        name = name.slice('ql-'.length);
        if (icons[name] == null) return;

        if (name === 'direction') {
          button.innerHTML = icons[name][''] + icons[name].rtl;
        } else if (typeof icons[name] === 'string') {
          button.innerHTML = icons[name];
        } else {
          var value = button.value || '';

          if (value != null && icons[name][value]) {
            button.innerHTML = icons[name][value];
          }
        }
      });
    });
  }

  buildPickers(selects, icons) {
    var _this2 = this;

    this.pickers = Array.from(selects).map(function (select) {
      if (select.classList.contains('ql-align')) {
        if (select.querySelector('option') == null) {
          fillSelect(select, ALIGNS);
        }

        return new icon_picker(select, icons.align);
      }

      if (select.classList.contains('ql-background') || select.classList.contains('ql-color')) {
        var format = select.classList.contains('ql-background') ? 'background' : 'color';

        if (select.querySelector('option') == null) {
          fillSelect(select, COLORS, format === 'background' ? '#ffffff' : '#000000');
        }

        return new color_picker(select, icons[format]);
      }

      if (select.querySelector('option') == null) {
        if (select.classList.contains('ql-font')) {
          fillSelect(select, FONTS);
        } else if (select.classList.contains('ql-header')) {
          fillSelect(select, HEADERS);
        } else if (select.classList.contains('ql-size')) {
          fillSelect(select, SIZES);
        }
      }

      return new picker(select);
    });

    var update = function update() {
      _this2.pickers.forEach(function (picker) {
        picker.update();
      });
    };

    this.quill.on(core_emitter.events.EDITOR_CHANGE, update);
  }

}

base_BaseTheme.DEFAULTS = extend_default()(true, {}, theme.DEFAULTS, {
  modules: {
    toolbar: {
      handlers: {
        formula: function formula() {
          this.quill.theme.tooltip.edit('formula');
        },
        image: function image() {
          var _this3 = this;

          var fileInput = this.container.querySelector('input.ql-image[type=file]');

          if (fileInput == null) {
            fileInput = document.createElement('input');
            fileInput.setAttribute('type', 'file');
            fileInput.setAttribute('accept', this.quill.uploader.options.mimetypes.join(', '));
            fileInput.classList.add('ql-image');
            fileInput.addEventListener('change', function () {
              var range = _this3.quill.getSelection(true);

              _this3.quill.uploader.upload(range, fileInput.files);

              fileInput.value = '';
            });
            this.container.appendChild(fileInput);
          }

          fileInput.click();
        },
        video: function video() {
          this.quill.theme.tooltip.edit('video');
        }
      }
    }
  }
});

class base_BaseTooltip extends tooltip {
  constructor(quill, boundsContainer) {
    super(quill, boundsContainer);
    this.textbox = this.root.querySelector('input[type="text"]');
    this.listen();
  }

  listen() {
    var _this4 = this;

    this.textbox.addEventListener('keydown', function (event) {
      if (event.key === 'Enter') {
        _this4.save();

        event.preventDefault();
      } else if (event.key === 'Escape') {
        _this4.cancel();

        event.preventDefault();
      }
    });
  }

  cancel() {
    this.hide();
  }

  edit() {
    var mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'link';
    var preview = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    this.root.classList.remove('ql-hidden');
    this.root.classList.add('ql-editing');

    if (preview != null) {
      this.textbox.value = preview;
    } else if (mode !== this.root.getAttribute('data-mode')) {
      this.textbox.value = '';
    }

    this.position(this.quill.getBounds(this.quill.selection.savedRange));
    this.textbox.select();
    this.textbox.setAttribute('placeholder', this.textbox.getAttribute("data-".concat(mode)) || '');
    this.root.setAttribute('data-mode', mode);
  }

  restoreFocus() {
    var scrollTop = this.quill.scrollingContainer.scrollTop;
    this.quill.focus();
    this.quill.scrollingContainer.scrollTop = scrollTop;
  }

  save() {
    var value = this.textbox.value;

    switch (this.root.getAttribute('data-mode')) {
      case 'link':
        {
          var scrollTop = this.quill.root.scrollTop;

          if (this.linkRange) {
            this.quill.formatText(this.linkRange, 'link', value, core_emitter.sources.USER);
            delete this.linkRange;
          } else {
            this.restoreFocus();
            this.quill.format('link', value, core_emitter.sources.USER);
          }

          this.quill.root.scrollTop = scrollTop;
          break;
        }

      case 'video':
        {
          value = extractVideoUrl(value);
        }
      // eslint-disable-next-line no-fallthrough

      case 'formula':
        {
          if (!value) break;
          var range = this.quill.getSelection(true);

          if (range != null) {
            var index = range.index + range.length;
            this.quill.insertEmbed(index, this.root.getAttribute('data-mode'), value, core_emitter.sources.USER);

            if (this.root.getAttribute('data-mode') === 'formula') {
              this.quill.insertText(index + 1, ' ', core_emitter.sources.USER);
            }

            this.quill.setSelection(index + 2, core_emitter.sources.USER);
          }

          break;
        }

      default:
    }

    this.textbox.value = '';
    this.hide();
  }

}

function extractVideoUrl(url) {
  var match = url.match(/^(?:(https?):\/\/)?(?:(?:www|m)\.)?youtube\.com\/watch.*v=([a-zA-Z0-9_-]+)/) || url.match(/^(?:(https?):\/\/)?(?:(?:www|m)\.)?youtu\.be\/([a-zA-Z0-9_-]+)/);

  if (match) {
    return "".concat(match[1] || 'https', "://www.youtube.com/embed/").concat(match[2], "?showinfo=0");
  } // eslint-disable-next-line no-cond-assign


  if (match = url.match(/^(?:(https?):\/\/)?(?:www\.)?vimeo\.com\/(\d+)/)) {
    return "".concat(match[1] || 'https', "://player.vimeo.com/video/").concat(match[2], "/");
  }

  return url;
}

function fillSelect(select, values) {
  var defaultValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  values.forEach(function (value) {
    var option = document.createElement('option');

    if (value === defaultValue) {
      option.setAttribute('selected', 'selected');
    } else {
      option.setAttribute('value', value);
    }

    select.appendChild(option);
  });
}


// CONCATENATED MODULE: ./themes/bubble.js





var TOOLBAR_CONFIG = [['bold', 'italic', 'link'], [{
  header: 1
}, {
  header: 2
}, 'blockquote']];

class bubble_BubbleTooltip extends base_BaseTooltip {
  constructor(quill, bounds) {
    var _this;

    super(quill, bounds);
    _this = this;
    this.quill.on(core_emitter.events.EDITOR_CHANGE, function (type, range, oldRange, source) {
      if (type !== core_emitter.events.SELECTION_CHANGE) return;

      if (range != null && range.length > 0 && source === core_emitter.sources.USER) {
        _this.show(); // Lock our width so we will expand beyond our offsetParent boundaries


        _this.root.style.left = '0px';
        _this.root.style.width = '';
        _this.root.style.width = "".concat(_this.root.offsetWidth, "px");

        var lines = _this.quill.getLines(range.index, range.length);

        if (lines.length === 1) {
          _this.position(_this.quill.getBounds(range));
        } else {
          var lastLine = lines[lines.length - 1];

          var index = _this.quill.getIndex(lastLine);

          var length = Math.min(lastLine.length() - 1, range.index + range.length - index);

          var indexBounds = _this.quill.getBounds(new Range(index, length));

          _this.position(indexBounds);
        }
      } else if (document.activeElement !== _this.textbox && _this.quill.hasFocus()) {
        _this.hide();
      }
    });
  }

  listen() {
    var _this2 = this;

    super.listen();
    this.root.querySelector('.ql-close').addEventListener('click', function () {
      _this2.root.classList.remove('ql-editing');
    });
    this.quill.on(core_emitter.events.SCROLL_OPTIMIZE, function () {
      // Let selection be restored by toolbar handlers before repositioning
      setTimeout(function () {
        if (_this2.root.classList.contains('ql-hidden')) return;

        var range = _this2.quill.getSelection();

        if (range != null) {
          _this2.position(_this2.quill.getBounds(range));
        }
      }, 1);
    });
  }

  cancel() {
    this.show();
  }

  position(reference) {
    var shift = super.position(reference);
    var arrow = this.root.querySelector('.ql-tooltip-arrow');
    arrow.style.marginLeft = '';

    if (shift !== 0) {
      arrow.style.marginLeft = "".concat(-1 * shift - arrow.offsetWidth / 2, "px");
    }

    return shift;
  }

}

bubble_BubbleTooltip.TEMPLATE = ['<span class="ql-tooltip-arrow"></span>', '<div class="ql-tooltip-editor">', '<input type="text" data-formula="e=mc^2" data-link="https://quilljs.com" data-video="Embed URL">', '<a class="ql-close"></a>', '</div>'].join('');

class bubble_BubbleTheme extends base_BaseTheme {
  constructor(quill, options) {
    if (options.modules.toolbar != null && options.modules.toolbar.container == null) {
      options.modules.toolbar.container = TOOLBAR_CONFIG;
    }

    super(quill, options);
    this.quill.container.classList.add('ql-bubble');
  }

  extendToolbar(toolbar) {
    this.tooltip = new bubble_BubbleTooltip(this.quill, this.options.bounds);
    this.tooltip.root.appendChild(toolbar.container);
    this.buildButtons(toolbar.container.querySelectorAll('button'), ui_icons);
    this.buildPickers(toolbar.container.querySelectorAll('select'), ui_icons);
  }

}

bubble_BubbleTheme.DEFAULTS = extend_default()(true, {}, base_BaseTheme.DEFAULTS, {
  modules: {
    toolbar: {
      handlers: {
        link: function link(value) {
          if (!value) {
            this.quill.format('link', false);
          } else {
            this.quill.theme.tooltip.edit();
          }
        }
      }
    }
  }
});

// CONCATENATED MODULE: ./themes/snow.js
function snow_slicedToArray(arr, i) { return snow_arrayWithHoles(arr) || snow_iterableToArrayLimit(arr, i) || snow_nonIterableRest(); }

function snow_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function snow_iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function snow_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }







var snow_TOOLBAR_CONFIG = [[{
  header: ['1', '2', '3', false]
}], ['bold', 'italic', 'underline', 'link'], [{
  list: 'ordered'
}, {
  list: 'bullet'
}], ['clean']];

class snow_SnowTooltip extends base_BaseTooltip {
  constructor(quill, bounds) {
    super(quill, bounds);
    this.preview = this.root.querySelector('a.ql-preview');
  }

  listen() {
    var _this = this;

    super.listen();
    this.root.querySelector('a.ql-action').addEventListener('click', function (event) {
      if (_this.root.classList.contains('ql-editing')) {
        _this.save();
      } else {
        _this.edit('link', _this.preview.textContent);
      }

      event.preventDefault();
    });
    this.root.querySelector('a.ql-remove').addEventListener('click', function (event) {
      if (_this.linkRange != null) {
        var range = _this.linkRange;

        _this.restoreFocus();

        _this.quill.formatText(range, 'link', false, core_emitter.sources.USER);

        delete _this.linkRange;
      }

      event.preventDefault();

      _this.hide();
    });
    this.quill.on(core_emitter.events.SELECTION_CHANGE, function (range, oldRange, source) {
      if (range == null) return;

      if (range.length === 0 && source === core_emitter.sources.USER) {
        var _this$quill$scroll$de = _this.quill.scroll.descendant(link_Link, range.index),
            _this$quill$scroll$de2 = snow_slicedToArray(_this$quill$scroll$de, 2),
            link = _this$quill$scroll$de2[0],
            offset = _this$quill$scroll$de2[1];

        if (link != null) {
          _this.linkRange = new Range(range.index - offset, link.length());
          var preview = link_Link.formats(link.domNode);
          _this.preview.textContent = preview;

          _this.preview.setAttribute('href', preview);

          _this.show();

          _this.position(_this.quill.getBounds(_this.linkRange));

          return;
        }
      } else {
        delete _this.linkRange;
      }

      _this.hide();
    });
  }

  show() {
    super.show();
    this.root.removeAttribute('data-mode');
  }

}

snow_SnowTooltip.TEMPLATE = ['<a class="ql-preview" target="_blank" href="about:blank"></a>', '<input type="text" data-formula="e=mc^2" data-link="https://quilljs.com" data-video="Embed URL">', '<a class="ql-action"></a>', '<a class="ql-remove"></a>'].join('');

class snow_SnowTheme extends base_BaseTheme {
  constructor(quill, options) {
    if (options.modules.toolbar != null && options.modules.toolbar.container == null) {
      options.modules.toolbar.container = snow_TOOLBAR_CONFIG;
    }

    super(quill, options);
    this.quill.container.classList.add('ql-snow');
  }

  extendToolbar(toolbar) {
    toolbar.container.classList.add('ql-snow');
    this.buildButtons(toolbar.container.querySelectorAll('button'), ui_icons);
    this.buildPickers(toolbar.container.querySelectorAll('select'), ui_icons);
    this.tooltip = new snow_SnowTooltip(this.quill, this.options.bounds);

    if (toolbar.container.querySelector('.ql-link')) {
      this.quill.keyboard.addBinding({
        key: 'k',
        shortKey: true
      }, function (range, context) {
        toolbar.handlers.link.call(toolbar, !context.format.link);
      });
    }
  }

}

snow_SnowTheme.DEFAULTS = extend_default()(true, {}, base_BaseTheme.DEFAULTS, {
  modules: {
    toolbar: {
      handlers: {
        link: function link(value) {
          if (value) {
            var range = this.quill.getSelection();
            if (range == null || range.length === 0) return;
            var preview = this.quill.getText(range);

            if (/^\S+@\S+\.\S+$/.test(preview) && preview.indexOf('mailto:') !== 0) {
              preview = "mailto:".concat(preview);
            }

            var tooltip = this.quill.theme.tooltip;
            tooltip.edit('link', preview);
          } else {
            this.quill.format('link', false);
          }
        }
      }
    }
  }
});
/* harmony default export */ var snow = (snow_SnowTheme);
// CONCATENATED MODULE: ./quill.js































core.register({
  'attributors/attribute/direction': DirectionAttribute,
  'attributors/class/align': AlignClass,
  'attributors/class/background': BackgroundClass,
  'attributors/class/color': ColorClass,
  'attributors/class/direction': DirectionClass,
  'attributors/class/font': FontClass,
  'attributors/class/size': SizeClass,
  'attributors/style/align': AlignStyle,
  'attributors/style/background': BackgroundStyle,
  'attributors/style/color': ColorStyle,
  'attributors/style/direction': DirectionStyle,
  'attributors/style/font': FontStyle,
  'attributors/style/size': SizeStyle
}, true);
core.register({
  'formats/align': AlignClass,
  'formats/direction': DirectionClass,
  'formats/indent': formats_indent,
  'formats/background': BackgroundStyle,
  'formats/color': ColorStyle,
  'formats/font': FontClass,
  'formats/size': SizeClass,
  'formats/blockquote': blockquote,
  'formats/code-block': code_CodeBlock,
  'formats/header': header,
  'formats/list': list_ListItem,
  'formats/bold': bold,
  'formats/code': code_Code,
  'formats/italic': italic,
  'formats/link': link_Link,
  'formats/script': script,
  'formats/strike': strike,
  'formats/underline': underline,
  'formats/formula': formula,
  'formats/image': formats_image,
  'formats/video': video,
  'modules/syntax': syntax_Syntax,
  'modules/table': modules_table,
  'modules/toolbar': toolbar_Toolbar,
  'themes/bubble': bubble_BubbleTheme,
  'themes/snow': snow,
  'ui/icons': ui_icons,
  'ui/picker': picker,
  'ui/icon-picker': icon_picker,
  'ui/color-picker': color_picker,
  'ui/tooltip': tooltip
}, true);
/* harmony default export */ var quill_0 = __webpack_exports__["default"] = (core);

/***/ })
/******/ ])["default"];
});
//# sourceMappingURL=quill.min.js.map